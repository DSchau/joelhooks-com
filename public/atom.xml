<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joel Hooks]]></title>
  <link href="http://joelhooks.com/atom.xml" rel="self"/>
  <link href="http://joelhooks.com/"/>
  <updated>2014-02-06T00:43:17-06:00</updated>
  <id>http://joelhooks.com/</id>
  <author>
    <name><![CDATA[Joel Hooks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stop writing For loops. Start using underscore.]]></title>
    <link href="http://joelhooks.com/blog/2014/02/06/stop-writing-for-loops-start-using-underscorejs/"/>
    <updated>2014-02-06T00:33:00-06:00</updated>
    <id>http://joelhooks.com/blog/2014/02/06/stop-writing-for-loops-start-using-underscorejs</id>
    <content type="html"><![CDATA[<p>How many for loops did you write today? This week?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">someArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">someThing</span> <span class="o">=</span> <span class="nx">someArray</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">doSomeWorkOn</span><span class="p">(</span><span class="nx">someThing</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure. That&rsquo;s harmless enough. Ugly and weird, but not something to really complain about. But this is all too common:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">someArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">someThing</span> <span class="o">=</span> <span class="nx">someArray</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">someThing</span><span class="p">.</span><span class="nx">stuff</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">doSomeWorkOn</span><span class="p">(</span><span class="nx">someThing</span><span class="p">.</span><span class="nx">stuff</span><span class="p">[</span><span class="nx">j</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which on the scale of bad code, isn&rsquo;t even <strong>that</strong> bad, but you start throwing some <code>if</code>s in there and the insanity really starts.</p>

<h2>I haven&rsquo;t written a For loop in two years.</h2>

<p>&ldquo;The hell you say?&rdquo;</p>

<p>It&rsquo;s true. Cold turkey. Not a single one, and my code is easier to understand because of my abstinence.</p>

<p>How&rsquo;d I do it?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">someArray</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">someThing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doSomeWorkOn</span><span class="p">(</span><span class="nx">someThing</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s <a href="http://underscorejs.org/">underscorejs</a> in action. Clean, easy to read, short, no variables, stacks of semi-colons&hellip; just plain nice.</p>

<p>Here&rsquo;s another example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">someArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">someThing</span> <span class="o">=</span> <span class="nx">someArray</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// my hand already hurts from all this damn typing</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">someThing</span><span class="p">.</span><span class="nx">isAwesome</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">someArray</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, a typical use case for the time honored <code>for</code> loop. Meh. Like an ex-smoker or a recently converted vegan, even the site of the thing fills me with righteous indignation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">someArray</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">someThing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">someThing</span><span class="p">.</span><span class="nx">isAwesome</span> <span class="o">===</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the underscore method name <code>filter</code> suggests, this handy 3 lines of easy to parse code gives me a new array of <strong>awesome things</strong>.</p>

<p>Or maybe I&rsquo;d like to do some work on the things and get a new array of the results?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">someArray</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">someThing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">trasformTheThing</span><span class="p">(</span><span class="nx">someThing</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those three functions are insanely useful on a daily basis, and don&rsquo;t even scratch the surface of what underscore brings to the table.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">grandTotal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">somePercentage</span> <span class="o">=</span> <span class="mf">1.07</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">severalNumbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">33</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">42</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">i</span><span class="p">;</span> <span class="c1">// don&#39;t forget to hoist those indices;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">severalNumbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">aNumber</span> <span class="o">=</span> <span class="nx">severalNumbers</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">grandTotal</span> <span class="o">+=</span> <span class="nx">aNumber</span> <span class="o">*</span> <span class="nx">somePercentage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">somePercentage</span> <span class="o">=</span> <span class="mf">1.07</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">severalNumbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">33</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">42</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">grandTotal</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">grandTotal</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">severalNumbers</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">runningTotal</span><span class="p">,</span> <span class="nx">aNumber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">runningTotal</span> <span class="o">+</span> <span class="p">(</span><span class="nx">aNumber</span> <span class="o">*</span> <span class="nx">somePercentage</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems a little weird at first, and I <strong>still</strong> hit the docs for methods like <strong>reduce</strong> above. Knowing they exist, and a flat refusal to use for loops is my primary weapon. The above methods are really just scratching the surface. The underscorejs library is filled with awesome utilities like this that can be combined together to create new and wonderful things.</p>

<h2>The 30 day no-loop challenge</h2>

<p>Stop.</p>

<p>For the next 30 days, don&rsquo;t write any for loops. If you see a nasty pile of those gnarly things, replace them with an <strong>each</strong> or a <strong>map</strong>. Do a little <strong>reducing</strong>. And let me know how it goes!</p>

<p>Beware. Underscore is the gateway to functional programming. What has been seen, can&rsquo;t be unseen. In a good way!</p>

<p>If you&rsquo;re wanting to dig a little deeper, you should jump over to this tutorial on <a href="http://reactive-extensions.github.io/learnrx/">functional programming in javascript</a>. It&rsquo;s great and only takes about &frac12; hour to work through. It is &ldquo;how the sausage is made&rdquo; fundamentals for the underscore functions I used above. Lot&rsquo;s of wholesome nerd fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build a Subscription Service on Rails: A Noob's Guide]]></title>
    <link href="http://joelhooks.com/blog/2013/10/30/how-to-build-a-subscription-service-on-rails-a-noobs-guide/"/>
    <updated>2013-10-30T11:19:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/10/30/how-to-build-a-subscription-service-on-rails-a-noobs-guide</id>
    <content type="html"><![CDATA[<p>There are few things as nerve-wracking as pushing your first subscription
website into production. Am I covering all the bases? Will everything break and
leave me in a pit of customer support sadness? How do I even take payments? Are
they just going to laugh at me?</p>

<h3>Some Background</h3>

<p>My friend John makes <a href="http://egghead.io">awesome AngularJS training videos</a>. They are short, topical, and
presented clearly. He loves making training videos, but has very little interest
in building out a website and marketing the content. &ldquo;Selling things on the
internet&rdquo; can be a chore. If you&rsquo;re just selling one off digital things, it is
fairly straight forward, but if you are looking to build out a website, allow
users to register, and charge them on a recurring basis it can be anything but.</p>

<p>As it happens, I&rsquo;m very interested in these problems. For the last couple of
years I&rsquo;ve been <a href="http://www.joelhooks.com/blog/2013/06/07/what-i-learned-from-brennan-dunns-consultancy-masterclass-w-slash-sketchnotes/">taking
classes</a>
and <a href="http://www.joelhooks.com/blog/2013/06/06/my-sketchnotes-and-thoughts-from-baconbizconf-2013/">going to
conferences</a>
that boil down to selling things on the internet. Recurring revenue is alluring.
My gurus are <strong>all about</strong> finding pain and providing immense value to people in
exchange for money. This is what I want to do too.</p>

<p>Wonder Twin powers; activate!</p>

<h3>Digging in: The Stack</h3>

<p>We have content, traffic, and a solid reputation. What&rsquo;s the next step?</p>

<p>To actually build something, of course. <a href="http://www.joelhooks.com/blog/2013/09/15/why-i-built-an-angularjs-training-site-on-rails/">Rails was the clear
choice</a>
when it came time to decide what framework to use. It is mature, easy (enough)
to use, and has a metric shit-ton of resources for building this type of thing.</p>

<p>It is also astonishingly easy to deploy Rails apps to Heroku. This has been a
huge win. Using the free Heroku tier has allowed me to have a production and
staging environment a few keystrokes away. For production, Heroku quickly becomes not free as you add in background workers, SSL, and other essential pieces, but you can go a <strong>long</strong> way with free.</p>

<h3>ZOMG There is so much to learn!</h3>

<p>I&rsquo;ve been developing software professionally for a few years. My roles are
primarily on the UI side of things, but I&rsquo;ve built a few full-stack solutions in
the past with Django. Over the years I&rsquo;ve always <em>wanted</em> to learn Rails, I just
never had anything real to build. Tutorials and books can be boring, especially
with no context of something &ldquo;real&rdquo; that you actually care about to build. That
said, there were a few excellent resources that helped me on the way:</p>

<p><a href="http://ruby.railstutorial.org/">Michael Hartl&rsquo;s Rub on Rails Tutorial</a>: Outside
of basic Ruby syntax, this is where you want to start. The web version is free,
and he guides you through building a &ldquo;real&rdquo; app with Rails in a clear, easy to
understand manner.</p>

<p><a href="http://railsapps.github.io/">Daniel Kehoe&rsquo;s RailsApp Project</a>: This was a huge
boost for me. It covered all the bases. I wanted to build an app with Rails.
Check. I wanted to use Twitter Boostrap with Rails. Check. I wanted to have
authentication and authorization in the app. Check. I wanted to integrate
recurring subscription payments. Check.</p>

<p><a href="http://www.petekeen.net/mastering-modern-payments">Peter Keen&rsquo;s Mastering Modern
Payments</a>: If you are going
to sell stuff via a Rails app, <strong>buy this book today</strong>. It saved me <strong>so much
time</strong> and instilled a confidence that I might never have had without it.
RailsApp is pretty good, but for me it started to break down when I wanted to
add payment. I needed deeper understanding and control, and Pete&rsquo;s book
delivered the knowledge I needed in a concise 120 page guide. I&rsquo;d recommend
getting the verion with the code, because it was a huge help to me.</p>

<p><a href="http://gilesbowkett.blogspot.com/2013/10/new-ebook-software-as-disservice-fixing.html">Giles Bowkett&rsquo;s Software as a
Disservice</a>
is a direct critique of RailsApp. It is harsh, but constructive. It addresses
code smells that I had noticed, enforced some of what I learned in Pete&rsquo;s book,
and lays out some solid practices that a Rails noob like me won&rsquo;t learn in 1000
searches that result in a Stack Overflow answer. It&rsquo;s an opinionated style and
practices guide. <em>note: RailsApp has its flaws, and it was extremely useful to
me. Daniel is passionate and has put out a lot of excellent material, but
charging people real money for a product or service is terrifying. I <strong>needed</strong>
this critique to plug some serious holes in the implementation. It is important
to recognize that Giles is critiquing the <strong>code</strong> and not the developer that
wrote it.</em></p>

<p>These four sources were keys to the successful launch of egghead.io&rsquo;s Pro
subscription service. Along with countless posts, Stack Overflow answers, and
documentation written by the Ruby/Rails community. It is amazing. Now is a
<strong>very</strong> good time to be a nerd.</p>

<h3>Taking Payments: *scared face*</h3>

<p>It really is terrifying. Maybe it isn&rsquo;t as scary if you&rsquo;ve done it before and
know what you are doing. I didn&rsquo;t qualify.</p>

<p>Luckily we live in a fantastic age of modern convenience.</p>

<p><strong>Stripe</strong>.</p>

<p>What an amazing service.</p>

<ul>
<li>No complicated merchant accounts or setup</li>
<li>By developers, for developers</li>
<li>Wonderful API</li>
<li>Excellent resources for testing</li>
<li>Solid documentation</li>
<li>Easy integration</li>
</ul>


<p>They handle a huge amount of the drudgery invloved with taking payments from
people on the internet. They remove the horrors of PCI compliance by providing
an implementation that allows you to take credit cards without ever actually
having the actual credit card numbers touch your system. They travel over
secure-socket-layer directly to Stripe, who responds with a token that allows
you to initiate an authorized charge. It is beautiful. Once you&rsquo;ve authorized a
subscription, Stripe manages the recurring billing for you.</p>

<p>To help with the subscriptions, I found the <a href="https://github.com/andrewculver/koudoku">Koudoku
gem</a> to be a great resource. While I
had to fork it and manipulate it to some extent for my specific needs, it does a
lot of the heavy lifting. I&rsquo;m on the fence about using a gem to handle all of
this. On one hand, it is <strong>very</strong> easy. On the other, having your subscription
implementation tucked away in a &ldquo;black box&rdquo; can bite you when the shit hits the
fan. Give and take.</p>

<h3>What would I do differently?</h3>

<p><strong>Testing</strong></p>

<p><strong>Testing</strong></p>

<p><strong>Testing</strong></p>

<p>It is tough, as a noob, to get in and write proper tests. <strong>All</strong> of the
resources I listed above discuss testing. I skipped it. You know what is
<strong>really hard</strong>? Going back through a non-trivial system and writing a solid
test suite.</p>

<p>This can&rsquo;t be said enough. Tests should <strong>guide design of code</strong> and when they
are tacked on later, they lose a big chunk of value. This isn&rsquo;t to say they
don&rsquo;t still provide immense value, but &ldquo;test later&rdquo; often means &ldquo;test never&rdquo; and
this isn&rsquo;t a good situation to be in.</p>

<p>I&rsquo;m working on retrofitting tests, but it is a chore. Test early, test often.</p>

<h3>Summary</h3>

<p>Building a subscription service is scary. Luckily the internet is stuffed full
of open source projects, examples, and helpful people sharing knowledge. Some of
it is free, but some of the best resources cost a few dollars. Worth every
penny.</p>

<p>Rails is a great framework for this sort of thing. I&rsquo;d recommend it highly, if
you are trying to build an application that requires recurring billing for your
users.</p>

<p><strong>Test early, test often</strong>. It&rsquo;s an additional thing to learn and understand if
you are just starting out, but it is worth the effort. If I could go back and do
anything differently, it would be to write solid tests along the way. Don&rsquo;t make
the same mistake with your apps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Built an AngularJS Training Site on Rails]]></title>
    <link href="http://joelhooks.com/blog/2013/09/15/why-i-built-an-angularjs-training-site-on-rails/"/>
    <updated>2013-09-15T11:24:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/09/15/why-i-built-an-angularjs-training-site-on-rails</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re into AngularJS at all, you are probably familiar with the kickass <a href="http://egghead.io/">AngularJS video training</a> from egghead.io. If you haven&rsquo;t seen egghead.io, it is a collection of 50+ short &ldquo;bite-sized&rdquo; training videos, largely focused on the AngularJS framework. <div style="float: right; padding:5px;"><a class="nofancybox" href="http://egghead.io"><div style=" height: 191px; width: 150px; background-image: url(/images/egghead_logo.png);"></div></a></div>The videos are created by (and feature) my friend <a href="https://twitter.com/johnlindquist">John Lindquist</a> playing Webstorm like a violin while explaining basic AngularJS concepts.</p>

<p>Over the last few months John and I have been discussing egghead.io, and what its future holds. Is it an AngularJS training site? Is John going to be the only presenter? Is the donation model the best approach for keeping the lights on?</p>

<h2>The Problem</h2>

<p>egghead.io was a static site, built on AngularJS. It was using the YouTube API to grab a list of videos from a playlist, and list them out in a simple list. It had a permanent &ldquo;in progress, fixing stuff&rdquo; message in the top left, and a request (plea?) for donations in the top right. When you would click on of the videos, it would display the embedded video in the page.</p>

<p><img src="http://joelhooks.com/images/egghead_before.jpg" alt="egghead.io on AngularJS" /></p>

<p>Frankly, this was adequate for John&rsquo;s needs. He just wants to create content and teach people. He didn&rsquo;t want to think about:</p>

<ul>
<li>SEO</li>
<li>Content pipelines</li>
<li>Information architecture</li>
<li>Server maintenance</li>
<li>Marketing</li>
</ul>


<p>Set it and forget it.</p>

<p>As it happens, I&rsquo;m really interested in all of those topics.</p>

<h2>The Solution Part 1: <strong>Ruby on Rails</strong></h2>

<p>I was asked, &ldquo;Why would you build an AngularJS training site with Ruby on Rails?!&rdquo;</p>

<p>This was the first time I&rsquo;ve used Rails, outside of tutorial type projects. It has been floating at the top of my &ldquo;to learn&rdquo; list for several years. Aside from basic nerd compulsion to explore cool technology, it became rapidly apparent that this was the <em>right tool for the job</em>.</p>

<p>One of the drawbacks of a single page app, built with AngularJS or another similar framework, is that SEO become extremely tricky. There are approaches for overcoming this, but it is beyond trivial. egghead.io is a web <strong>page</strong> with the purpose of delivering content. Web pages need to searchable, so people hunting Google will actually be able to find them. Egghead had a bit of search traffic. It actually does fairly well (2nd page) in a search for &ldquo;AngularJS&rdquo;. What wasn&rsquo;t getting search hits was the video lessons themselves.</p>

<p><img src="http://joelhooks.com/images/egghead_after.jpg" alt="egghead.io gets a facelift" /></p>

<p>By rendering the pages on the server, and delivering them to the browser, Google can now crawl the pages and actually show the pages to searchers interested in the content. It didn&rsquo;t take long to see a bump in organic search traffic.</p>

<p><img src="http://cl.ly/image/2e2p422t2f2R/Screen%20Shot%202013-09-15%20at%2012.29.01%20PM.png" alt="A nice spike in search traffic for egghead.io" /></p>

<p>I was also able to get authentication squared away with Devise and CanCan. It was a bit tricky, since I chose Rails 4 and Bootstrap 3. Many of the gems required using git branches, but after some trial and error it all dialed in very nicely.</p>

<p>Rails wasn&rsquo;t the only choice for this. I also considered Django and a Node stack, but ultimately the &ldquo;convention over configuration&rdquo; nature of Rails won my heart. It is <strong>so freaking easy</strong> and pleasant to work with. After a month, it has earned a well-deserved slot in my web development toolbelt.</p>

<h2>The Solution Part 2: <strong>Heroku</strong></h2>

<p>You want to talk about <strong>freaking easy</strong>? Heroku. Frictionless. Magic. Amazing. Awesome. Kickass. Incredible. ZOMG WOW.</p>

<p>If it isn&rsquo;t obvious, I really love Heroku.</p>

<p>Even with a fair bit of traffic, I&rsquo;m able to comfortably get away with the free plan. Through the use of strategic caching and CloudFront to serve static content, the server itself doesn&rsquo;t have to do much heavy lifting.</p>

<p><code>git push heroku master</code></p>

<p><i class='emoji emoji1f493'></i></p>

<p>I&rsquo;m not scared of managing my own VPS, but there is enough work to do without getting into SYSOP tasks. Heroku ftw.</p>

<h2>The Solution Part 3: <strong>Wistia</strong></h2>

<p>TIL: <strong>video seo</strong> is a thing.</p>

<p>You ever notice your search results that show a preview thumbnail of a video with the little &ldquo;play&rdquo; icon? Usually these are for YouTube results. This is because, and is no shocker, Google is <em>really good at video SEO</em>. For YouTube. Try as you might, if you are hosting your videos on YouTube, you will <strong>never</strong> see these &ldquo;rich snippets&rdquo; on your own pages where you embed the videos.</p>

<p>Video SEO is black magic voodoo. It involves creating a specific sitemap XML that correlates media to a URL. It looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;url&gt;</span>
</span><span class='line'>  <span class="nt">&lt;loc&gt;</span>http://egghead.io/lessons/bower-introduction-and-setup<span class="nt">&lt;/loc&gt;</span>
</span><span class='line'>  <span class="nt">&lt;video:video&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:content_loc&gt;</span>http://embed.wistia.com/deliveries/4f239fa48f86dd8854a707fa6384de5aa3c54db7/file.mp4<span class="nt">&lt;/video:content_loc&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:thumbnail_loc&gt;</span>http://embed.wistia.com/deliveries/3df06507df5589c130ceb906a59d8f04f9a5f034/file.png<span class="nt">&lt;/video:thumbnail_loc&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:title&gt;</span>Bower - Introduction to Bower<span class="nt">&lt;/video:title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:description&gt;</span>Bower is a package manager for Javascript libraries that allows you to define, version, and retrieve your dependencies. In this tutorial, John gives a quick introduction to Bower and will show you how to get started.<span class="nt">&lt;/video:description&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:publication_date&gt;</span>2013-09-05T14:27:26+00:00<span class="nt">&lt;/video:publication_date&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:family_friendly&gt;</span>yes<span class="nt">&lt;/video:family_friendly&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:duration&gt;</span>168<span class="nt">&lt;/video:duration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:tag&gt;</span>bower tutorial<span class="nt">&lt;/video:tag&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:tag&gt;</span>bower setup<span class="nt">&lt;/video:tag&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:tag&gt;</span>bower angularjs<span class="nt">&lt;/video:tag&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:tag&gt;</span>bower screencast<span class="nt">&lt;/video:tag&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/video:video&gt;</span>
</span><span class='line'><span class="nt">&lt;/url&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You <strong>can</strong> associate your YouTube videos with a video sitemap, but it is fruitless. Given the same video, Google will <strong>always</strong> favor YouTube.</p>

<p>That&rsquo;s where <a href="http://wistia.com/">Wistia</a> comes in.</p>

<p>Wistia offers &ldquo;Professional video hosting built specifically for business.&rdquo; They host and stream videos, give awesome analytics, embedding, and (perhaps most importantly) <strong>easy to use video SEO tools</strong>.</p>

<p>Videos on the egghead.io domain are embedded via Wistia, and not YouTube. John is still posting to YouTube, but on the site we are able to take advantage of Wistia and take back some of the &ldquo;Google juice&rdquo; that would otherwise be delivered solely to YouTube.</p>

<p><img src="http://cl.ly/image/0X2C2443413h/Screen%20Shot%202013-09-11%20at%208.05.26%20AM.png" alt="rich snippets for the egghead.io domain" /></p>

<p>I&rsquo;ll admit to being overly excited when I saw the first &ldquo;rich snippet&rdquo; attached to an egghead.io domain. Maybe I&rsquo;m a nerd?</p>

<h2>The Solution Part 4: <strong>General SEO</strong></h2>

<p>Wistia has the video SEO covered, but an interesting aspect of video is that while you can tell Google the video exists, their robots aren&rsquo;t smart enough (yet) to analyze the video for keywords. To get over this hurdle, you can use transcripts of the video and provide the spiders the words they crave.</p>

<p>For this we used <a href="https://castingwords.com/">CastingWords</a>. I was amazed, despite the videos technical nature, the transcripts we got back were very accurate.</p>

<p>Transcripts are a win/win/win. Lots of people would rather just read a block of text for speed. There are people that can&rsquo;t hear at all, so audio content is useless to them. Search spiders love text.</p>

<p>Along with the transcripts we&rsquo;ve been going through the backlog of videos adding summary descriptions to each. It is a chore, but it is worth the effort.</p>

<h2>The Solution Part 5: <strong>Open Source isn&rsquo;t Charity</strong></h2>

<p>The donation model in open-source software is flawed. It is not charity. It takes a lot of <strong>work</strong> to build high quality open source software. It takes a lot of <strong>work</strong> to write documentation and provide training.</p>

<p><img src="http://joelhooks.com/images/programmer.jpg" alt="Ain't too proud to beg." /></p>

<p>We can do better than asking for hand-outs.</p>

<p>While lots of generous visitors (~500) have donated to egghead.io over the last year, we decided to take a different approach. Instead of simply asking for a donation, what if we <a href="http://egghead.io/first-50-video-download-offline-bundle">bundled up the first 50 AngularJS videos and offered an &ldquo;offline HD bundle&rdquo;</a> of all the videos instead? This way we aren&rsquo;t accepting charity, and giving supporters something tangible for their hard-earned $$.</p>

<p>This approach has some limitations. All of the videos are streaming for free a back click away, but having the full resolution copies on your hard drive is something people want. It also gives a people a way to &ldquo;donate&rdquo; and get a receipt that can be expensed or deducted as a training cost.</p>

<p>It&rsquo;s been a huge success. The lights will be on at egghead.io for quite some time. We will be able to expand the site, and explore a wider range of high quality content.</p>

<h2>Conclusion and Next Steps</h2>

<p>I love AngularJS. It is an amazing tool. It isn&rsquo;t always the right tool for the job. If you are building web applications it might be a perfect fit. If you are building web <strong>pages</strong> the &ldquo;single page application&rdquo; approach has some severe flaws. Ruby on Rails solves these nicely.</p>

<p>Video provides many distinct challenges from a delivery and SEO perspective. YouTube makes it incredibly easy to share your content online, but the &ldquo;cost of free&rdquo; is that Google will leverage your content to take your audience away from your site and into their ecosystem. They give YouTube search priority, and squeeze your content for every drop of juice they can. By moving to a commercial hosting service like Wistia, you can regain a lot of control over the hard work you&rsquo;ve put into your content.</p>

<p>We aren&rsquo;t running a charity, and asking for donations is a habit I&rsquo;d like to see broken in OSS. There are clearly better ways to be compensated for our efforts, and I know that I <strong>love</strong> supporting OSS. It makes my day to send a content producer $$ for a high-quality book, workshop, or other training. I get smarter, they get paid. Everybody wins.</p>

<p><img src="http://joelhooks.com/images/egghead_before_after.jpg" alt="the before and after of egghead.io" /></p>

<p>Working on the relaunch of egghead.io has been a lot of fun. It has allowed me to put to use a lot of the things I&rsquo;ve been learning over the last year in regards to SEO, conversion rate optimization, and generally building a modern web page. It is <strong>extremely awesome</strong> to have a project that I care deeply about, and can work on lovingly in my free time. I love my enterprise clients, but having a little techno proto-baby to feed and care for fills my heart with joy. Again, I might be a nerd ;)</p>

<p>Now I&rsquo;m looking forward to publishing my first screencast to the site! It should be soon, so be on the lookout :></p>

<p>P.S. If you&rsquo;re looking to build an AngularJS site <strong>on</strong> Rails, I highly recommend <a href="http://www.fullstack.io/edu/angular/rails/">this book</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Dependency Injection in AngularJS]]></title>
    <link href="http://joelhooks.com/blog/2013/08/18/configuring-dependency-injection-in-angularjs/"/>
    <updated>2013-08-18T12:45:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/08/18/configuring-dependency-injection-in-angularjs</id>
    <content type="html"><![CDATA[<p>Dependency injection is the act of supplying values or object instances (dependencies) to target objects
from outside of the target object. In many (most?) cases this is automated
by a framework, such as AngularJS.</p>

<p>This means that a given target object does <strong>not</strong> create its own dependencies,
through the use of the <code>new</code> keyword or other creation methods.</p>

<p>By creating and managing dependencies
outside of an object, it makes it much easier to switch out that dependency as
needed. This is very useful when you are writing your unit tests, and can have
many advantages in larger systems.</p>

<p>There are only three ways for an object to resolve its dependencies:</p>

<ul>
<li>internally, via the <code>new</code> operator</li>
<li>lookup via a global variable (requirejs is an example)</li>
<li>the dependency is passed to the object</li>
</ul>


<p>The third option is <em>dependency injection</em>, and it is the preferred approach in
AngularJS apps.</p>

<h2>Defining your dependencies</h2>

<p>Dependency injection is a core feature of AngularJS. There are 3 approaches to
defining your dependencies, ordered by complexity from least to most:</p>

<ul>
<li>module.service</li>
<li>module.factory</li>
<li>module.provider</li>
</ul>


<p><strong>note:</strong> <em>AngularJS also provides <code>value</code> and <code>constant</code> dependencies. We aren&rsquo;t
going to get into those two today.</em></p>

<p>Both <code>service</code> and <code>factory</code> are abstractions that sit on top of <code>provider</code>.
Using <code>factory</code> and <code>provider</code> will give you more flexibility, but are more
verbose.</p>

<p>Before we look at how to use these tools, let&rsquo;s take a look at the AngularJS
source code and understand how they work.</p>

<h3>Interlude into the AngularJS internals</h3>

<p>If you&rsquo;re a geek like me, you might be curious as to what is going on under the hood
when you declare dependencies.</p>

<p>I mentioned earlier that <code>service</code> and <code>factory</code> were abstractions on top of <code>provider</code>.
To show you exactly how that works, we need to open up <code>injector.js</code> in <code>src/auto/</code>
folder in the AngularJS source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">function</span> <span class="nx">provider</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">provider_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">provider_</span><span class="p">)</span> <span class="o">||</span> <span class="nx">isArray</span><span class="p">(</span><span class="nx">provider_</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">provider_</span> <span class="o">=</span> <span class="nx">providerInjector</span><span class="p">.</span><span class="nx">instantiate</span><span class="p">(</span><span class="nx">provider_</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">provider_</span><span class="p">.</span><span class="nx">$get</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nx">$injectorMinErr</span><span class="p">(</span><span class="s1">&#39;pget&#39;</span><span class="p">,</span> <span class="s2">&quot;Provider &#39;{0}&#39; must define $get factory method.&quot;</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">providerCache</span><span class="p">[</span><span class="nx">name</span> <span class="o">+</span> <span class="nx">providerSuffix</span><span class="p">]</span> <span class="o">=</span> <span class="nx">provider_</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">factory</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">factoryFn</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">provider</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="p">{</span> <span class="nx">$get</span><span class="o">:</span> <span class="nx">factoryFn</span> <span class="p">});</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">service</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">constructor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">factory</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$injector&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$injector</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$injector</span><span class="p">.</span><span class="nx">instantiate</span><span class="p">(</span><span class="nx">constructor</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see at a glance, <code>service</code> calls <code>factory</code> which calls <code>provider</code>. So, when it
gets right down to it, these three methods are the exact same thing. Convenient!</p>

<p>Almost the exact same thing.</p>

<p>There is a subtle difference. The AngularJS <code>service</code> uses
<code>$injector.instantiate</code> on the constructor function that you pass in. This means
that internally the <code>service</code> creates an instance of your function with the
<code>new</code> operator. This will provide the resulting object a valid &lsquo;this&rsquo; scope.</p>

<p>Using <strong><code>factory</code> doesn&rsquo;t call <code>new</code> on the function that is passed in</strong>.
When using <code>factory</code>, the function that is passed in is called directly, and an
object is expteded to be returned.</p>

<p>Hat tip to
<a href="http://twitter.com/ThomasBurleson">@ThomasBurleson</a> for pointing this
out. This can be confusing if encountered in the wild. Now you know.
Half the battle.</p>

<p>Let&rsquo;s start with the simplest use case. The <code>service</code>.</p>

<h3>Defining a service in AngularJS</h3>

<p>A service instantiates a constructor function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;myApp.myModel&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">MyModel</span><span class="p">(</span><span class="nx">asyncService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">someApi</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">asyncService</span><span class="p">.</span><span class="nx">getStuff</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;myModel&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;asyncService&#39;</span><span class="p">,</span> <span class="nx">MyModel</span><span class="p">]);</span> <span class="c1">//simple option</span>
</span><span class='line'><span class="p">}(</span><span class="nx">angular</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example we are creating a module that will store a model that grabs data from some asynchronous
service. The <code>myModel</code> service will return an instance of <code>MyModel</code> when it is requested
for injection by other objects. The instance of <code>MyModel</code> is a singleton, and only one instance will
ever be created and used by the application.</p>

<p>This example could actually be even simpler if the injectable doesn&rsquo;t require any additional
dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;myModel&#39;</span><span class="p">,</span>  <span class="nx">MyModel</span><span class="p">);</span> <span class="c1">//most simple option</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>module.service</code> requires only two arguments. A string for its unique name, and a constructor
to create an instance of. This approach is useful, and most of the time is probably all you need
for your application.</p>

<p>When you need more flexibility than the <code>service</code> provides, it is time to look at <code>factory</code>.</p>

<h3>Defining a factory in AngularJS</h3>

<p>A factory returns an object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;myApp.myModel&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">MyModel</span><span class="p">(</span><span class="nx">asyncService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">someApi</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">asyncService</span><span class="p">.</span><span class="nx">getStuff</span><span class="p">();</span> <span class="c1">//promise?</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myModel&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;asyncService&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">asyncService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//could do some stuff here</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">(</span><span class="nx">asyncService</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}(</span><span class="nx">angular</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using a <code>factory</code> provides additional flexibility. By providing a factory function
over a straight constructor, you are provided with the opportunity to do some work
prior to returning the object. You are also in charge of creating the
instance that you want returned, unlike <code>service</code>, which creates the
instance for the constructor function you provide.</p>

<p>The above example is obviously not
doing anything interesting, but when you need to do some work prior to resolving a
dependency, a factory can be a good choice.</p>

<p>In the real world, I&rsquo;ve used <code>factory</code> to provide a configurable mock data &ldquo;mode&rdquo;. The
factory function would check to see which mode the app was in, and dynamically switch
between mock and real data. This can be incredibly handy when you want to work with out
depending on external services.</p>

<p>Note that the factory function will be called exactly <strong>one time</strong>. Any work you do
will only be done once, and <code>myModel</code> will be whatever your factory function returns.
In this case, we are simply returning an instance of <code>MyModel</code>, but a factory can return
objects <em>and</em> functions. Use that to your advantage.</p>

<p>The last way to define dependencies is with <code>provider</code>. Let&rsquo;s look at that next.</p>

<h3>Defining a provider with AngularJS</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;myApp.myModel&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">MyModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">asyncService</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">someApi</span><span class="o">:</span> <span class="kd">function</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">asyncService</span><span class="p">.</span><span class="nx">getStuff</span><span class="p">();</span> <span class="c1">//promise?</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">myModelProvider</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">model</span><span class="o">:</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$get</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;asyncService&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">asyncService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">asyncService</span> <span class="o">=</span> <span class="nx">asyncService</span><span class="p">;</span> <span class="c1">//&quot;manual&quot; dependency injection</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">;</span> <span class="c1">//resolved for the lifetime of app</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">modules</span><span class="p">.</span><span class="nx">provider</span><span class="p">(</span><span class="s1">&#39;myModel&#39;</span><span class="p">,</span> <span class="nx">myModelProvider</span><span class="p">);</span>
</span><span class='line'><span class="p">}(</span><span class="nx">angular</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, <code>provider</code> is lower level. Explicit and verbose. The <code>$get</code> function
is used by AngularJS internally for the injector. A provider is <strong>required</strong> to have a <code>$get</code>
function. When using <code>factory</code> (and <code>service</code> as well) the <code>$get</code> function is defined for
you.</p>

<p>For all practical purposes you will likely never need to use <code>provider</code> unless you are a
control freak. In most circumstances a <code>factory</code> or <code>service</code> will suffice, but it is nice
to know that <code>provider</code> is there, if you needed that level of explicit control for some reason.</p>

<p>One thing to note about providers is that the provider is <em>available during <strong>configuration phase</strong> of a module</em>. While I haven&rsquo;t found a specific use case for this, it is something to have in your toolbox.</p>

<h3>A little trick for dynamic dependencies</h3>

<p>I mentioned before that with a <code>factory</code> (or <code>provider</code>) you can return an object or a function.
As it turns out, this can be very useful if you need to dynamically update a resolved dependency.
Here&rsquo;s a simple example using a factory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myDynamicInjectable&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">count</span> <span class="o">=</span> <span class="nx">count</span> <span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is an extremely trivial example, but now when you inject <code>myDynamicInjectable</code> and call it,
it will return the freshly incremented <code>count</code>.</p>

<p><strong>warning:</strong> <em>don&rsquo;t do this. There are two things wrong with this example. It is storing state
with the count variable, and then it is manipulating state. This isn&rsquo;t the appropriate location
for either of those activities! A better solution would be to create an object that stored
that state and provided a nice API for manipulating it.</em></p>

<p>A more realistic (useful) use of this might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;getCurrentShoppingCart&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;getCurrentAccount&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">getCurrentAccount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//getCurrentAccount is also a factory that returns a function</span>
</span><span class='line'>        <span class="c1">//perhaps a user can have multiple accounts?</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">getCurrentAccount</span><span class="p">().</span><span class="nx">shoppingCart</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a ton of dynamic flexibility you can take advantage of when returning functions from
both the <code>provider</code> and <code>factory</code> approaches. I&rsquo;d proceed with caution. You could easily abuse this
flexibility. Don&rsquo;t use this approach to manipulate and/or store state in the providers! The
job of these tools is to <strong>resolve dependencies</strong>, and should be used only to <strong>resolve dependencies</strong>.</p>

<h2>Conclusion</h2>

<p>AngularJS provides several ways to configure dependency injection. From the simple <code>service</code> to the more flexible
<code>factory</code> and <code>provider</code> approaches. You should have a solid understanding of how these work
under the hood, and what situations are appropriate for each method.</p>

<p>P.S. This article is the expansion of the answer to a question that was emailed to me.
If you have any questions, I&rsquo;d love to help you out. My email and twitter can be found below, and I
answer them all.</p>

<p><strong>Related:</strong></p>

<ul>
<li><a href="http://joelhooks.com/blog/2013/05/01/when-is-a-singleton-not-a-singleton/">AngularJS, Dependency Injection, and When Is a Singleton Not a Singleton?</a></li>
<li><a href="http://joelhooks.com/blog/2013/04/24/modeling-data-and-state-in-your-angularjs-application/">Modeling Data and State in Your AngularJS Application</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn AngularJS this Weekend]]></title>
    <link href="http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend/"/>
    <updated>2013-08-03T23:36:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend</id>
    <content type="html"><![CDATA[<p>AngularJS has a reputation for a steep learning curve. It&rsquo;s definitely complex, but follows the 80/20 rule. <strong>20% of the features are what you will use 80% of the time</strong>. If you are new to AngularJS and have a weekend to study, there are some very high quality resources that will let you <strong>start Monday with a strong working knowledge of AngularJS</strong>.</p>

<p>Already know AngularJS? Feel free to skip ahead. These resources are excellent, and you&rsquo;re bound to learn something.</p>

<h2>The Official Tutorial ~4hrs</h2>

<p>Start with <a href="http://docs.angularjs.org/tutorial">the official tutorial</a>. It provides a very straight forward overview of AngularJS and walks step by step through building a simple app. When you&rsquo;re done, you should have <strong>a solid understanding of the basics</strong> and the vocabulary you will need to move on to the next step.</p>

<p>The official tutorial is <em>very</em> well put together. Unfortunately it utilizes the angular-seed project as a template. The angular-seed project is fine for quickly throwing together a working AngularJS app, but it doesn&rsquo;t provide a structure that scales well in a production application.</p>

<p><strong>Don&rsquo;t use the angular-seed to start your real projects!</strong> It&rsquo;s a learning tool only.</p>

<h2>Kickass (<strong>free!</strong>) Video Tutorials on Egghead.io ~3hrs</h2>

<div style="float: left; padding:10px;"><a class="nofancybox" href="http://egghead.io"><div style=" height: 191px; width: 150px; background-image: url(/images/egghead_logo.png);"></div></a></div>


<p>You&rsquo;ve done the tutorial, and should have a good grasp of the basics. Your next stop is John Lindquist&rsquo;s <a href="http://www.egghead.io/">egghead.io for free AngularJS videos</a>. This series of bite-sized videos will deliver a ton of great information. John has gone through almost all of the &ldquo;hard&rdquo; concepts, and presented them in an easy to understand way.</p>

<p><em>All</em> of the videos are great, but the <strong>series on directives is extra fantastic</strong>. Transclusion? No problem. Even after using AngularJS for over a year, I was able to solidify some of the concepts that were confusing for me.</p>

<p>Watch them all and <strong>take some notes</strong>. When you come out of the other side your AngularJS-fu will be starting to take shape.</p>

<p><img src="http://joelhooks.com/images/lemonade.jpg" alt="ahhhhhhh Learning AngularJS is refreshing - Photo Credit: chotda" /></p>

<p>That will take you through Saturday evening, and you deserve a rest. <strong>Send John a donation for his hard work</strong>, pour a tall glass of lemonade, and relax as you reflect on the your new-found knowledge of an awesome framework. Nice work!</p>

<h2>Things get real with angular-app ~4hrs</h2>

<p>Sunday morning.</p>

<p>At this point you should understand the core AngularJS concepts and terminology. Time to brew a fresh pot and get to work.</p>

<p><img src="http://joelhooks.com/images/french_press.jpg" alt="AngularJS Fuel - Photo Credit: Bjørn Giesenbauer" /></p>

<p>If you are anything like me, by now you&rsquo;re ready to dig into a <strong>proper example application</strong>. Luckily we have the excellent <a href="https://github.com/angular-app/angular-app">angular-app</a> project to explore. This non-trivial example focuses on best practices for:</p>

<ul>
<li>Folder structure (important!)</li>
<li>Modules (very important!)</li>
<li><strong>Testing</strong> (super important!)</li>
<li>RESTful services</li>
<li>Navigation</li>
<li>Security</li>
</ul>


<p>angular-app combines a solid AngularJS UI with a node.js backend. It is non-trivial, and studying this app will give you a realistic sense of a proper AngularJS app.</p>

<p>One killer aspect of this example is the build system. It <strong>demonstrates a fantastic Grunt.js build with an integrated Karma Test Runner</strong>.</p>

<p>Peter Bacon Darwin and Pewel Kozlowski have done a great job. Front to back, this project is worth your study time. You could spend several days investigating the nooks and crannies of this example, but we&rsquo;ve only got the weekend. Set angular-app to the side for now, but keep it handy. It will serve as valuable reference in the future.</p>

<h2>Start building your own app with ng-boilerplate ~4hrs</h2>

<p>At this point you should have a solid knowledge to start building something. The <a href="https://github.com/joshdmiller/ng-boilerplate">ng-boilerplate</a> project will get you started. <strong>This is the seed you should use</strong>. It takes the lessons you learned studying angular-app, and provides the foundation upon which to build something substantial.</p>

<p><img src="http://joelhooks.com/images/engine.jpg" alt="a strong engine for your AngularJS app" /></p>

<p>ng-boilerplate, unlike the angular-seed project, is <strong>suitable as a starting point for building a production app</strong>. It&rsquo;s a solid shortcut, and worth study.</p>

<p>Spend some time getting to know ng-boilerplate through its excellent README. The READMEs don&rsquo;t stop at the root of the project. Josh has sprinkled them throughout the project to help you understand what is going on.</p>

<p>Once you have your head around ng-boilerplate, you can delete all of the placeholder views, and <strong>start trying things out for yourself</strong>.</p>

<p>Need some ideas?</p>

<ul>
<li>PRISM:Refract &ndash; NSA Dashboard</li>
<li>FlySwatter &ndash; A simple bug tracker</li>
<li>GeekTalk &ndash; Multiroom Chat</li>
<li>OctoStats &ndash; Ranked Github Users with Clever D3 Visuals</li>
<li>1000words &ndash; Writing app that sets target of 1000 words per day and graphs your success</li>
<li>GetItDone &ndash; Yup, a todo list.</li>
<li>&hellip;?</li>
</ul>


<p>The sky is the limit. Using the reference material you&rsquo;ve studied all weekend, combined with the official AngularJS docs, you should be well on the way to AngularJS mastery. You&rsquo;ll be over the hump, having defeated that infamous curve. Build something cool and tell me about it.</p>

<p>If you&rsquo;ve hit any road blocks, <a href="https://mail.google.com/mail/?view=cm&amp;fs=1&amp;tf=1&amp;to=joelhooks@gmail.com&amp;su=Hello,%can%I%20get%20some%20help?">send me an email</a> and I&rsquo;ll help you out.</p>

<h2>Congrats! You&rsquo;ve leveled up.</h2>

<p>The fun isn&rsquo;t over. There is <strong>plenty left to learn</strong>. The weekend <em>is</em> over though, and you&rsquo;ve worked hard. Take a break and relax.</p>

<p>You&rsquo;ve earned it.</p>

<p><img src="http://joelhooks.com/images/yellow_belt.jpg" alt="You've Leveled up your AngularJS! - Photo Credit: Cayusa" /></p>

<p>P.S. Initial project setup is one of the most critical factors to a project&rsquo;s success. Using templates is a great way to get a head start, but using a template without solid understanding of all the moving parts can be dangerous. I&rsquo;m working on <strong>step-by-step guide to building your own best practices AngularJS project template</strong>. If you want to get notified of its progress, as well as launch-day discounts, sign up to my newsletter below.</p>

<p>You might also enjoy: <a href="http://joelhooks.com/blog/2013/05/22/lessons-learned-kicking-off-an-angularjs-project/"><strong>Lessons Learned: A Year with a Large AngularJS Project</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AngularJS? Stop using jQuery as a crutch.]]></title>
    <link href="http://joelhooks.com/blog/2013/07/27/using-angularjs-stop-using-jquery-as-a-crutch/"/>
    <updated>2013-07-27T11:30:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/07/27/using-angularjs-stop-using-jquery-as-a-crutch</id>
    <content type="html"><![CDATA[<p>Have you ever heard (or said!) this:</p>

<p>&ldquo;Directives? That&rsquo;s where the jQuery goes.&rdquo;</p>

<p>I definitely have.</p>

<p>In an effort to better understand
<a href="https://twitter.com/joshdmiller">@joshdmiller</a>&rsquo;s excellent
<a href="https://github.com/joshdmiller/ng-boilerplate">ng-boilerplate</a>, I
wanted to understand its dependency on Boostrap. More specifically, I wanted to
see if I could swap out Twitter Bootstrap for Zurb Foundation. Bootstrap is
great, but I really love using SCSS.</p>

<h2>Down the rabit hole&hellip;</h2>

<p>Up until this point, I&rsquo;ve completely ignored
<a href="https://github.com/angular-ui/bootstrap">angular-ui-bootstrap</a>, which is a wrapper for
Twitter Bootstrap that you can use with AngularJS. It hasn&rsquo;t been on my radar,
simply because I prefer Foundation. That was a mistake. This wonderful little
library is amazing. On many levels, it expresses the power and flexibility of
AngularJS like nothing else I have seen.</p>

<p>From the <a href="https://github.com/angular-ui/bootstrap#native-lightweight-directives">angular-ui-bootstrap
README</a>:</p>

<blockquote><p>We are aiming at providing a set of AngularJS directives based on Twitter
Bootstrap&rsquo;s markup and CSS. The goal is to provide native AngularJS directives
without any dependency on jQuery or Bootstrap&rsquo;s JavaScript. It is often better
to rewrite an existing JavaScript code and create a new, pure AngularJS
directive. Most of the time the resulting directive is smaller as compared to
the orginal JavaScript code size and better integrated into the AngularJS
ecosystem.</p></blockquote>

<p>This struck me.</p>

<p>The only dependency that ui-bootstrap has on Twitter Bootstrap is the CSS style
sheets. All of the widgets work because they have been implemented with
AngularJS directives.</p>

<p>I was reading through some posts on the Google groups in my earlier quest to
find out how to integrate Foundation into ng-boilerplate (I&rsquo;m stubborn!) and was
very interested in what Josh had to say:</p>

<blockquote>You can wire up some callbacks and $apply calls to make a jQuery
plugin work but as Pawel said, rewriting something in AngularJS often takes less
work. jQuery doesn&#8217;t have any of the binding or scope magic. When we cut out all
of the jQuery code that makes up for that, we&#8217;re often left with very little
code. And when we put those few lines of code in an AngularJS directive,
everything will work out of the box. So in balancing levels of effort, rewriting
makes sense more often than it doesn&#8217;t.<cite><br>- <a
href="https://groups.google.com/d/msg/angular/Htkzt7Fsaog/TeFm5l4snTwJ">Josh
David Miller</a></cite></blockquote>


<p><strong>Mind blown.</strong></p>

<p>In the post quoted above Josh also links to his <a href="http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-emberjsor-other-client-mvc-framework-if-i-have-a/15012542#15012542">excellent Stack
Overflow</a>
post that expands on this viewpoint. You may have seen this already, but if you
haven&rsquo;t, go take 10 minutes to read through it.</p>

<blockquote><p>Don&rsquo;t even use jQuery. Don&rsquo;t even include it. It will hold you back. And when
you come to a problem that you think you know how to solve in jQuery already,
before you reach for the $, try to think about how to do it within the confines
the AngularJS. If you don&rsquo;t know, ask! 19 times out of 20, the best way to do
it doesn&rsquo;t need jQuery and to try to solve it with jQuery results in more work
for you.</p></blockquote>

<p>Bold words.</p>

<p>I&rsquo;m convinced.</p>

<p><strong>jQuery is a crutch if you are writing AngularJS applications.</strong></p>

<p>If you&rsquo;re starting an AngularJS app, take a good look at
ng-boilerplate. Then take a look at <a href="https://github.com/angular-ui/bootstrap/tree/master/src">ui-bootstrap&rsquo;s directives</a>. They are a living
example of how you can do &ldquo;jQuery things&rdquo; with a fraction of the code, and build
an app that is easier to maintain, way more testable, and generally nicer to
work with.</p>

<p>P.S. If you were wondering, it is theoretically possible to simply use the
Foundation CSS with ui-bootstrap. There is some work being done in that regard,
and I&rsquo;m looking forward to pitching in on it. I don&rsquo;t know that it will ever get
to &ldquo;drop in replacement&rdquo; status, but from the discussions I&rsquo;ve read the future
looks promising on this front.</p>

<p>P.P.S This isn&rsquo;t a critique of jQuery. I think jQuery is awesome and has moved
the web forward considerably. Even within Angular, they use what is called
&ldquo;jqLite&rdquo; to give the core essentials of jQuery&rsquo;s functionality. In that sense,
just using Angular in the Angular way uses jQuery, but a minimal subset of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The basics of using ui-router with AngularJS]]></title>
    <link href="http://joelhooks.com/blog/2013/07/22/the-basics-of-using-ui-router-with-angularjs/"/>
    <updated>2013-07-22T10:55:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/07/22/the-basics-of-using-ui-router-with-angularjs</id>
    <content type="html"><![CDATA[<p>URL routing is a popular approach to matching the contents of a URL to specific
functionality within a web application. URL routes programatically present
specific content to users based on the URL that they are visiting. It is a
popular approach that has proven to be very effective.</p>

<p>Something that might not be obvious is that URL routing is also a <a href="https://en.wikipedia.org/wiki/Finite-state_machine">finite state
machine</a>. When you configure
the routing for an app, you are laying out the various states the application
can be in, and informing the application what to display and do when a specific
route is encountered.</p>

<p>AngularJS supplies <a href="http://docs.angularjs.org/tutorial/step_07">URL routing</a> by default.
It is adequate, but also has some limitations.</p>

<p><img src="http://joelhooks.com/images/app-layout.png" alt="A resonable application structure" /></p>

<h2>So what&rsquo;s the problem?</h2>

<p>Looking at the structure above, imagine an application where interacting with
items on the header or the sidebar causes the main content to load completely
different HTML. AngularJS provides a mechanism for this with <code>ng-switch</code>. You
can see a (very simple) example of this below.</p>

<iframe width="100%" height="300"
  src="http://jsfiddle.net/joelhooks/Swm48/4/embedded/result,js,html"
  allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>In this case, <code>ng-switch</code> is swapping out <code>div</code> elements, but you can also use
this approach to swap out templates using <code>ng-include</code>.</p>

<p>I&rsquo;m not going to explore this option. I&rsquo;m not particularly fond of it.</p>

<p><strong>Why not?</strong></p>

<ul>
<li>The <code>ng-switch</code> adds markup that could be confusing</li>
<li>The state of the main content area is captured and stored on a model</li>
<li>It feels like &ldquo;logic in markup&rdquo;, which I try to avoid</li>
<li>If you go down the <code>ng-include</code> road, you need to remember to always put
single quotes around your template names. I always forget. ;&lt;</li>
</ul>


<h2>ui-router</h2>

<p><a href="https://github.com/angular-ui/ui-router">ui-router</a> fully embraces the
state-machine nature of a routing system. It allows you to define states, and
transition your application to those states. The real win is that it allows you
to decouple nested states, and do some very complicated layouts in an elegant
way.</p>

<p>You need to think about your routing a bit differently, but once you get your
head around the state-based approach, I think you will like it.</p>

<iframe width="100%" height="300"
  src="http://jsfiddle.net/SvUjA/1/embedded/result,js,html"
  allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This example is functionally very similar to the <code>ng-switch</code> approach. The main
difference is that the main content area is populated with templated HTML for
each of the states, without using switching or <code>ng-include</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ui.compat&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$stateProvider&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$stateProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">home</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;home&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;content.html&#39;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">red</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/red&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">parent</span><span class="o">:</span> <span class="nx">home</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;content.red.html&#39;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">blue</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/blue&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">parent</span><span class="o">:</span> <span class="nx">home</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;content.blue.html&#39;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">green</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/green&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">parent</span><span class="o">:</span> <span class="nx">home</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;content.green.html&#39;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="nx">home</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="nx">red</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="nx">green</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="nx">blue</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code is the configuration for the router. We are defining the <code>module</code>, but instead
of injecting <code>$routeProvider</code> as we would with stock AngularJS, we are injecting
a <code>$stateProvider</code> that is used to define the states. We are defining 4 states.</p>

<ul>
<li><code>home</code> is the parent state of the next 3. It defines the header, siderbar, and
the <code>ui-view</code> element that will be populated with the child states.</li>
<li><code>red</code> is the first child state. It references the <code>home</code> as its parent, as
well as targeting its own template.</li>
<li><code>blue</code> and <code>green</code> are identical to <code>red</code>, but use different templates.</li>
</ul>


<p>After the states are defined, they are added to the <code>$stateProvider</code>. They are
now ready to be navigated to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="s1">&#39;$state&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">$state</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s1">&#39;home&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure>


<p>the <code>run</code> method is a great place to navigate to your intial state. You are able to
inject the now-resolved <code>$state</code> object and use its <code>transitionTo</code> method to set <code>home</code>
as the current state.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;SidebarCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">setPage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">page</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$state</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="nx">page</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>SidebarCtrl</code> lists contains a simple array called content on its <code>$scope</code> which
is used in a <code>ng-repeat</code> to give us a simple menu. When one of those items is clicked
the <code>setPage</code> function is called with the item that was clicked. In this case, the
content items correspond to the names of the states that we&rsquo;ve defined, so we simply
<code>transitionTo</code> the selected state to display the content of that state.</p>

<h2>Next steps with ui-router</h2>

<p>This only really scratches the very surface of what you can pull off with
ui-router. There are a ton of options and the
<a href="https://github.com/angular-ui/ui-router/wiki">wiki</a> is well put together. Some
things I didn&rsquo;t explore, but that are available:</p>

<ul>
<li>Passing data between states</li>
<li>Listening for state events</li>
<li>Named views (love this, it deserves its own post)</li>
<li>URL Routing</li>
</ul>


<p><strong>The ui-router README warns that the utility is still in active early
development</strong>. The API is still subject to change, so if you choose ui-router for
your next project, that is something to be aware of.</p>

<p>Let me know if you&rsquo;d like me to explore ui-router a bit deeper in future posts.
I think it is an excellent approach to routing, and look forward to using it
more.</p>

<p><strong>Update:</strong> I&rsquo;ve recorded a <a href="http://egghead.io/lessons/angularjs-introduction-ui-router">screencast about ui-router</a> for egghead.io.</p>

<p><strong>Update 2:</strong> Here&rsquo;s a <a href="https://egghead.io/lessons/angularjs-ui-router-named-views">screencast about ui-router&rsquo;s named views</a> that I recorded for egghead.io. (note: it is paid/subscription content)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Directives That Override Standard HTML Tags]]></title>
    <link href="http://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags/"/>
    <updated>2013-07-15T13:22:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags</id>
    <content type="html"><![CDATA[<p>Directives are the heart and soul of AngularJS. They are incredibly powerful.
AngularJS sets out to extend the grammar of the browser to supply semantics that
facilitate the creation of web applications, going beyond the standard
hyper-linked web page. The primary weapon to accomplish this is the directive.</p>

<p>Creating your own directives is an awesome way to create composed, reusable
behaviors in your applications. This article isn&rsquo;t about making your own
directives, instead I wanted to take a closer look at the internal directives of
AngularJS. Specifically, we will be looking at how and why AngularJS extends the
functionality of native HTML tags like <code>&lt;input&gt;</code> and <code>&lt;a&gt;</code> to make the magic
happen.</p>

<h2>A is for Anchor</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">htmlAnchorDirective</span> <span class="o">=</span> <span class="nx">valueFn</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">compile</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">attr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">msie</span> <span class="o">&lt;=</span> <span class="mi">8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// turn &lt;a href ng-click=&quot;..&quot;&gt;link&lt;/a&gt; into a stylable link in IE</span>
</span><span class='line'>      <span class="c1">// but only if it doesn&#39;t have name attribute, in which case it&#39;s an anchor</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">attr</span><span class="p">.</span><span class="nx">href</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">attr</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">attr</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// add a comment node to anchors to workaround IE bug that causes element content to be reset</span>
</span><span class='line'>      <span class="c1">// to new attribute content if attribute is updated with value containing @ and element also</span>
</span><span class='line'>      <span class="c1">// contains value with @</span>
</span><span class='line'>      <span class="c1">// see issue #1949</span>
</span><span class='line'>      <span class="nx">element</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createComment</span><span class="p">(</span><span class="s1">&#39;IE fix&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">element</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">// if we have no href url, then don&#39;t navigate anywhere.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">element</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://github.com/angular/angular.js/blob/master/src/ng/directive/a.js"><code>htmlAnchorDirective</code></a> has a simple job. It is there to prevent navigation and page reloading. Typically this is in conjunction with <code>ng-click</code>, which is used to actually capture the click and navigate the user within the application. Every <code>&lt;a&gt;</code> in your application is effectively extended by AngularJS. The functionality is primarily the <code>event.preventDefault()</code> that is applied if the anchor tag doesn&rsquo;t have an <code>href</code> attribute.</p>

<p>One thing to note, and this is typical throughout the AngularJS internals, is that this directive requires special attention for IE 7. When I&rsquo;m digging around in the internals, I&rsquo;m always appreciative of this effort made by the AngularJS contributors. These aren&rsquo;t fun problems to solve, and it is nice that somebody has made the effort to solve them for us :></p>

<h2>Digging into &lt;form></h2>

<p><a href="https://github.com/angular/angular.js/blob/master/src/ng/directive/form.js">AngularJS overrides <code>&lt;form&gt;</code></a> to provide some important functionality. The core of this extension of <code>&lt;form&gt;</code> is to prevent any page refresh that would occur with an unmodified <code>&lt;form&gt;</code> tag. Lets have a look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">formDirectiveFactory</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">isNgForm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="s1">&#39;$timeout&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$timeout</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">formDirective</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;form&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">controller</span><span class="o">:</span> <span class="nx">FormController</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">compile</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">pre</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">formElement</span><span class="p">,</span> <span class="nx">attr</span><span class="p">,</span> <span class="nx">controller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">attr</span><span class="p">.</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// we can&#39;t use jq events because if a form is destroyed during submission the default</span>
</span><span class='line'>              <span class="c1">// action is not prevented. see #1238</span>
</span><span class='line'>              <span class="c1">//</span>
</span><span class='line'>              <span class="c1">// IE 9 is not affected because it doesn&#39;t fire a submit event and try to do a full</span>
</span><span class='line'>              <span class="c1">// page reload if the form was destroyed by submission of the form via a click handler</span>
</span><span class='line'>              <span class="c1">// on a button in the form. Looks like an IE9 specific bug.</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">preventDefaultListener</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span>
</span><span class='line'>                  <span class="o">?</span> <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class='line'>                  <span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">returnValue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// IE</span>
</span><span class='line'>              <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>              <span class="nx">addEventListenerFn</span><span class="p">(</span><span class="nx">formElement</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s1">&#39;submit&#39;</span><span class="p">,</span> <span class="nx">preventDefaultListener</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">// unregister the preventDefault listener so that we don&#39;t not leak memory but in a</span>
</span><span class='line'>              <span class="c1">// way that will achieve the prevention of the default action.</span>
</span><span class='line'>              <span class="nx">formElement</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;$destroy&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$timeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">removeEventListenerFn</span><span class="p">(</span><span class="nx">formElement</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s1">&#39;submit&#39;</span><span class="p">,</span> <span class="nx">preventDefaultListener</span><span class="p">);</span>
</span><span class='line'>                <span class="p">},</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">parentFormCtrl</span> <span class="o">=</span> <span class="nx">formElement</span><span class="p">.</span><span class="nx">parent</span><span class="p">().</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">),</span>
</span><span class='line'>                <span class="nx">alias</span> <span class="o">=</span> <span class="nx">attr</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="nx">attr</span><span class="p">.</span><span class="nx">ngForm</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">alias</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">scope</span><span class="p">[</span><span class="nx">alias</span><span class="p">]</span> <span class="o">=</span> <span class="nx">controller</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">parentFormCtrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">formElement</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;$destroy&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">parentFormCtrl</span><span class="p">.</span><span class="nx">$removeControl</span><span class="p">(</span><span class="nx">controller</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">alias</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">scope</span><span class="p">[</span><span class="nx">alias</span><span class="p">]</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="nx">extend</span><span class="p">(</span><span class="nx">controller</span><span class="p">,</span> <span class="nx">nullFormCtrl</span><span class="p">);</span> <span class="c1">//stop propagating child destruction handlers upwards</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">isNgForm</span> <span class="o">?</span> <span class="nx">extend</span><span class="p">(</span><span class="nx">copy</span><span class="p">(</span><span class="nx">formDirective</span><span class="p">),</span> <span class="p">{</span><span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;EAC&#39;</span><span class="p">})</span> <span class="o">:</span> <span class="nx">formDirective</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above function is a factory that creates a form directive. The directive itself does several things. Aside from some memory management it also serves to prevent the default behavior of the form action. Typically with an AngularJS application, you will want to capture the user&rsquo;s input it a form, and feed that data into a controller to send it to the server. This is different from the standard <code>action</code> attribute of a form that will perform a POST operation and typically redirect the user to a new page. This behavior is probably not what you want in your single-page JavaScript application, so AngularJS is working to help prevent that. You probably still want to be able to submit your form, and the <code>ngSubmit</code> directive placed as an attribute on the <code>&lt;form&gt;</code> tag will execute an expression when your designated submit input is clicked.</p>

<p>If you&rsquo;re paying close attention, you&rsquo;ll notice that the form directive above has a <code>FormController</code> assigned to it. The <code>FormController</code> is the brains of all the forms within an AngularJS application, and every <code>&lt;form&gt;</code> gets one. The <code>FormController</code> tracks all of the controls within a form and manages the validity of the form.</p>

<h2>The Input Directive</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">inputDirective</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$browser&#39;</span><span class="p">,</span> <span class="s1">&#39;$sniffer&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$browser</span><span class="p">,</span> <span class="nx">$sniffer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">require</span><span class="o">:</span> <span class="s1">&#39;?ngModel&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attr</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">(</span><span class="nx">inputType</span><span class="p">[</span><span class="nx">lowercase</span><span class="p">(</span><span class="nx">attr</span><span class="p">.</span><span class="nx">type</span><span class="p">)]</span> <span class="o">||</span> <span class="nx">inputType</span><span class="p">.</span><span class="nx">text</span><span class="p">)(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attr</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">,</span> <span class="nx">$sniffer</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="nx">$browser</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow! It&rsquo;s so simple ;)</p>

<p>It is. This is because <a href="https://github.com/angular/angular.js/blob/master/src/ng/directive/input.js">the actual <code>&lt;input&gt;</code> tag</a> is only the entry point. The real work is done based on the <strong>type</strong> of input that is being used. AngularJS is looking for the following input types:</p>

<ul>
<li>text</li>
<li>number</li>
<li>url</li>
<li>email</li>
<li>radio</li>
<li>checkbox</li>
</ul>


<p>With the URL, email, and number types, AngularJS provides some basic validation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">URL_REGEXP</span> <span class="o">=</span> <span class="sr">/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&amp;%@!\-\/]))?$/</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">EMAIL_REGEXP</span> <span class="o">=</span> <span class="sr">/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">NUMBER_REGEXP</span> <span class="o">=</span> <span class="sr">/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the code for the URL type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">urlInputType</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attr</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">,</span> <span class="nx">$sniffer</span><span class="p">,</span> <span class="nx">$browser</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">textInputType</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attr</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">,</span> <span class="nx">$sniffer</span><span class="p">,</span> <span class="nx">$browser</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">urlValidator</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">||</span> <span class="nx">URL_REGEXP</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$formatters</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">urlValidator</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$parsers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">urlValidator</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple stuff. It is using the REGEX above and setting the validity on the <code>FormController</code>, which you can then use to display feedback to the user. Email and number validation works in a similar fashion.</p>

<p>With text-type inputs AnglularJS also provides <strong>data-binding</strong> via <code>ngModel</code>, which is an extremely convenient solution to capturing user input and displaying it in the form. We should look at <code>ngModel</code> a bit closer in a future post.</p>

<h2>Just the beginning.</h2>

<p>It wasn&rsquo;t immediately obvious to me when I started using AngularJS that the framework was overriding these default HTML tags to add the secret sauce on top. Once the realization dawned on me, it opened my eyes to the power and potential that directives hold. You aren&rsquo;t restricted to the extensions that AngularJS provides with these built-in directives. You can further extend the capabilities of HTML by creating your own directives that override and extend the native HTML elements.</p>

<p>Digging into the guts of the <a href="https://github.com/angular/angular.js/tree/master/src">AngularJS source code</a> is a great way to learn the hows and whys of the framework, and can reveal techniques that can be applied to your own applications. The AngularJS source is well documented, cleanly written, and well tested. If you&rsquo;re working with AngularJS, I highly recommend diving into these internals and discovering this for yourself. It won&rsquo;t be time wasted.</p>

<p>You might also enjoy: <a href="http://joelhooks.com/blog/2013/05/22/lessons-learned-kicking-off-an-angularjs-project/"><strong>Lessons Learned: A Year with a Large AngularJS Project</strong></a></p>

<p>or maybe: <a href="http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend/"><strong>Learn AngularJS this Weekend</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Doesn't My Photography Studio Website Appear in Search Results?]]></title>
    <link href="http://joelhooks.com/blog/2013/06/25/why-doesnt-my-photography-studio-website-appear-in-search-results/"/>
    <updated>2013-06-25T20:04:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/06/25/why-doesnt-my-photography-studio-website-appear-in-search-results</id>
    <content type="html"><![CDATA[<p>This is a series of post examining why our <a href="http://www.visualempathy.com">Fort Worth photography
studio</a> website performs poorly in Google search
results, and why it fails to convert the visitors it does get into new clients.
The first post sought to <a href="http://joelhooks.com/blog/2013/06/22/optimizing-a-photography-studio-website-for-converstion-and-seo-the-analysis/">analyze Google Analytics
data</a>
and get a clue as to how users arrive to the site via search. The short story is
that they typically arrive via image searches for very generic terms such as &ldquo;4
month old baby&rdquo; and other similar searches. Even amongst these searches, actual
clicks through to the site are abysmally low. I&rsquo;m working on a <a href="http://studioigniter.com/">book about
conversion optimization for photographers</a>, and our
studio is the first case study in the process.</p>

<p><img src="http://joelhooks.com/images/ve/ve-home.jpg" alt="VE Home Page" /></p>

<p>Let&rsquo;s start at the top, with the page title:</p>

<p><em>Visual Empathy Portrait Photography, Dallas Fort Worth | Modern Lifestyle
Portraiture | Fine portrait photography | Children&rsquo;s Portraits | Portrait
Photographer</em></p>

<p>These are some interesting phrases. I can almost remember writing them.
First, the business name. The site does really
well when searching for &ldquo;Visual Empathy&rdquo;, which of course nobody does. It has
&ldquo;Dallas Fort Worth&rdquo; in the title, which is definitely where we are at, but they
are in isolation. I thought these two were interesting:</p>

<ul>
<li>Fine portrait photography</li>
<li>Modern Lifestyle Portraiture</li>
</ul>


<p>Why are they interesting? Because they&rsquo;ve both been searched for by <strong>nobody
ever</strong>. &ldquo;Children&rsquo;s Portraits&rdquo; and &ldquo;Portrait Photographer&rdquo; are ok, but it is a
bunch of disjointed keywords that gives Google&rsquo;s robots no specifics to hone in
on. Robots <em>really</em> like specifics.</p>

<p>Walking down the page, we get to the header. The logo is actually a background
image, which misses an opportunity to use the alt text to let the robots know
what the page is about. Image alt text is actually important, and was something
that I never even considered when I put this page together in 2007. Sliding
across the header is the navigation, which isn&rsquo;t egregious, but is also
extremely generic and vague, targeting pages that have extremely generic and
vague titles. Again, missed opportunity to turn on the bright blinking lights
about what this page is for Google.</p>

<p>Next down the page is the gallery. My wife takes truly wonderful pictures of
people. The photography is beautiful, but it is
also hidden behind now dated Flash image gallery. While this isn&rsquo;t really
hurting us in terms of SEO, it probably isn&rsquo;t helping either. We are
<em>definitely</em> missing another opportunity to use the alt tags on the images. The
worst part about this presentation is that it totally excludes mobile phones.
Visit the page on an iPhone and you get a big white field of <strong>nothing</strong>. Not
cool.</p>

<p>Down below the fold is a mishmash. To the left is an area that uses a special
catagory of blog post to show a special. It isn&rsquo;t helping with SEO at all. No
keyword phrases, no image alt text. The picture is nice, but otherwise&hellip;</p>

<p>Now to the right. 6 paragraphs of me being &ldquo;clever&rdquo;, using flowery phrases and a
smattering of keywords. The last paragraph has the potential to actually harm
our SEO. Google robots <em>hate</em> keyword packing. The same word, photographer in
this case, repeated over and over again.</p>

<h2>Digging into the blog&hellip;</h2>

<p>Blogs have a ton of potential for capturing the <strong>long tail of SEO</strong>. This is
where we can really produce some content, using keywords that highlight specific
terms and phrases that potential customers might search for. For a photographer
the blog can also serve as a gallery that uses posts as a way for clients to
pin, like, and share their pictures with family and friends.</p>

<p>I&rsquo;ll use the latest post at the time of this writing that highlights some
beautiful wedding photos. The title is <em>J&amp;J Wedding- Dallas/ Fort Worth Wedding
Photographer</em>. Looking down the page, they all follow this pattern. <em>Client
Name- Dallas/ Fort Worth _________ Photographer</em>. This is where we start to see
the origins of the image search results we talked about above. The post titles
are definitely affecting search results, but not a way that is useful for the
site&rsquo;s SEO. I suspect the repeated use of the exact same <em>Dallas/ Fort Worth
Photographer</em> in the titles is adversely affecting search results too. That is
just a suspicion, but given the objective results (or lack of results), the post
titles aren&rsquo;t <em>helping</em>. The image alt tags are also not contributing here. They
are the filenames. Nobody is searching for specific filenames when they search
for a local portrait photographer.</p>

<p>Kristina also got into a &ldquo;blog circle&rdquo; this year. This is a good idea. Their
implementation of the concept could use some work, but it could be a good thing.
The drawback here is that it effectively turned the blog into a personal blog,
akin to a Tumblr. I love my children, but rule number one of your photography
website has to be <strong>only post your best</strong>, and these once a week posts border
on snapshots at times.</p>

<h2>And in conclusion.</h2>

<p>The only redeeming aspect of the website is the photography. Period. Which is
great news. Given awesome photography, we can build something on top of that.
These first two posts are a little boring, but I wanted to deconstruct the site
to understand exactly what was wrong.</p>

<p>The really interesting bits are in the fixing, and that is what is coming next.
I&rsquo;m terribly excited to start the process. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing a Photography Studio Website for Converstion and SEO: The Analysis]]></title>
    <link href="http://joelhooks.com/blog/2013/06/22/optimizing-a-photography-studio-website-for-converstion-and-seo-the-analysis/"/>
    <updated>2013-06-22T08:32:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/06/22/optimizing-a-photography-studio-website-for-converstion-and-seo-the-analysis</id>
    <content type="html"><![CDATA[<p>The internet is a competitive place for small businesses, and this is especially
true when we are talking about portrait photographers. My lovely wife is a
<a href="http://visualempathy.com">family photographer in Fort Worth</a>, Texas. She&rsquo;s been
doing portrait photography professionally since 2007, and being the good nerd
husband I am, she&rsquo;s had a web presence the entire time. By this I mean she&rsquo;s had
a website that I built in 2007 (prior to my own shift in careers from 3d
animation to web development), and haven&rsquo;t really touched since. She&rsquo;s been
left to her own devices, outside of my intervention when her Wordpress
installation was &ldquo;hacked&rdquo; to be used for nefarious purposes (this is an entirely
different post, ugh).</p>

<p>Fast forward to 2013. This year has been interesting for me professionally. I&rsquo;ve
become extremely passionate about conversion optimization and search engine
optimization. Conversion optimization simply means converting website visitors
into paying clients, and search engine optimization (SEO) is the art of climbing
the Google ranks for organic search results. Our photography site is the polar
opposite of being optimized for either of those things.
My research on conversion optimization and SEO wasn&rsquo;t focused on our photography
business, at all. It is a weird instance of the &ldquo;cobblers son has no shoes&rdquo;
where I wasn&rsquo;t even considering our own business and how it might benefit from
the techniques that I&rsquo;ve been learning. In fact, in my moment of epiphany it
occured to me that other photographer&rsquo;s websites suffer in a similar fashion, so
I decided to write a <a href="http://studioigniter.com">guidebook on conversion optimization and SEO for
photographers</a>.</p>

<p>I&rsquo;m going to use my wife&rsquo;s site as a case study, breaking it down and rebuilding
it into a useful asset that not only attracts potential clients, but converts
those visitors into high quality clients. Of the two, SEO and converstion
optimization, the latter is infinitely more important. Even if you have killer
placement in search results, or spend piles of cash to buy top placement with
AdWords, if those visitors aren&rsquo;t contacting you in some way, then your website
is effectively useless. It is also a possibility that your website is
<strong>attracting the wrong clients</strong>, like bargain hunters looking for discount
photographs on the cheap. Visual Empathy&rsquo;s website doesn&rsquo;t do either, and the
first step is to take a look at why this might be the case.</p>

<p><img src="http://joelhooks.com/images/search_fort_worth_photographer.png" alt="No SEO for this website, that much is
obvious" /></p>

<p>The above is a search for &ldquo;Fort Worth photographer&rdquo;, which is fairly generic.
More specific searches don&rsquo;t yield better results, unless you search for &ldquo;Visual
Empathy&rdquo;. Thankfully we land at number 1 there, but anybody searching for your
businesses name directly already knows about you.</p>

<p>We <strong>do</strong> have Google Analytics installed, so I can get some insight into what
searches are actually displaying the website. If you are curious, I&rsquo;ve put a
full month of analytics data in <a href="https://docs.google.com/spreadsheet/ccc?key=0AhmOjcD8YdT6dHQtS29vSW8tb1Bwb1hBd3AzZHM4LUE&amp;usp=sharing">this
spreadsheet</a>,
but the top searches are:</p>

<ul>
<li>4 month old baby</li>
<li>6 week old baby</li>
<li>rubys</li>
<li>12 month old baby</li>
<li>summer time photography</li>
</ul>


<p>And the list goes on. Ugh. And to rub salt in the wound:</p>

<p><img src="https://docs.google.com/spreadsheet/oimg?key=0AhmOjcD8YdT6dHQtS29vSW8tb1Bwb1hBd3AzZHM4LUE&amp;oid=3&amp;zx=lohft0ss9c73" alt="What kinds of searches are we showing up
for" /></p>

<p>Normal web searches account for a <strong>tiny sliver</strong> of the pie. Images account for
the overwhelming amount of search results where VE actually shows up.
Searchers are looking for pictures of babies at certain ages. Only <strong>0.75%</strong> of the
total search results actually end up getting clicked through. I actually think
this might be on the <strong>high</strong> side because there were some weird things in the
data. The items that were clicked all showed 5 clicks. That seems strange, but
the important thing is that <strong>nobody</strong> is coming to Visual Empathy&rsquo;s website
because they are looking for a local photographer. Of those that
click through, exactly <strong>0%</strong> actually convert to paying customers.</p>

<p>The silver lining? There is <strong>a lot</strong> of room for improvement.</p>

<p>In the next post in this series we will tear down Visual Empathy&rsquo;s website and
try to understand why we are getting these results on Google, and attempt to
identify ways of improving them. As part of the series, Visual Empathy is going
to get a complete web makeover. Top to bottom, back to front.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coming to Terms With Enterprise JavaScript]]></title>
    <link href="http://joelhooks.com/blog/2013/06/17/coming-to-terms-with-enterprise-javascript/"/>
    <updated>2013-06-17T13:19:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/06/17/coming-to-terms-with-enterprise-javascript</id>
    <content type="html"><![CDATA[<h2>What is enterprise javascript?</h2>

<p>Good question. One that might even make you chuckle[1] a little bit on the inside.
The word &ldquo;enterprise&rdquo; is definitely a loaded term. It could be considered by
some to be a buzzword. Others might say &ldquo;Why are we talking about starships?&rdquo;</p>

<p>When I use the term &ldquo;enterprise&rdquo; to describe software, I typically mean
&ldquo;software that helps people get work done more efficiently.&rdquo; In this sense,
Angry Birds and your favorite Twitter client are not enterprise applications. A
Twitter client that has additional features to facilitate and track a company&rsquo;s
social engagement, on the other hand, might fall into the enterprise category.</p>

<p>An application that is used in a call center to track incoming support requests
is definitely &ldquo;enterprise&rdquo;. A system that connects several &ldquo;legacy&rdquo; systems and
presents employees with a unified interface and saves 1000s of man-years every
month of application context switching? Enterprise.</p>

<p>Enterprise software is software that is sold to a business or government agency,
and not to individuals. Content management, billing, point of sale, payment
processing, customer relations, help desk, project management, enterprise
application integrations, time tracking, business intelligence&hellip; you get the
idea.</p>

<p>This is software for <strong>getting things done</strong>. This is software that <strong>makes a business
money</strong>. Because of this, it is software that businesses will invest heavily in.</p>

<h2>Enterprise isn&rsquo;t cool.</h2>

<p>Maybe. It certainly evokes thoughts of ugly user interfaces with huge J2EE
backends. Developers working on Saturdays to get their TPS reports filed.
Enterprise software certainly can be that. It doesn&rsquo;t have to be.</p>

<p>Today&rsquo;s software users, even enterprise software users, are more sophisticated.
They are used to using applications like Facebook and Gmail on a daily basis.
They have iPhones that present beautiful easy to use interfaces and excellent
user experience (UX). They want more.</p>

<p>More importantly, perhaps, is that software that provides excellent UX makes it
easier to get work done. Using software that sucks, is slow, is ugly, or
generally misbehaves is counter-productive. Bad software represents lost revenue
and increased overhead. Employees that are forced into bad software are forced
to focus their energy on wrestling the software. Not only does this make them
miserable, but it saps a business&rsquo;s most valuable resource &ndash; the brain-power and
energy of their employees.</p>

<h2>Enterprise can be cool.</h2>

<p>It can! It largely depends on how you define &ldquo;cool.&rdquo; For me, my biggest thrill
in software development is eliminating cognitive overhead for people that are
trying to get work done. I want to make their working lives better. I want them
to be mentally free to concentrate on harder problems. I want their businesses
to make more money. I want them to see real value in their software, so that
they will keep hiring developers to build more software. Achieving these goals
is definitely cool.</p>

<h2>Where does JavaScript fit in?</h2>

<p>In today&rsquo;s world, savvy enterprise customers demand rich experiences. They want
to be able to access their data anytime and anywhere. They carry smart phones
and tablets and expect their software to function on these devices as well as it
does on their desktop computers.
Arguably the quickest way to achieve this multi-screen approach is through web
applications. Applications that run, and run well, in any modern browser. You
don&rsquo;t have negotiate walled-garden app stores to deploy a web app.</p>

<p>HTML pages originated as a format for linking scientific documents. This was a
great achievement, but soon users wanted more interactivity. JavaScript was
introduced, and now we could begin to see richer experiences, right in the
browser. This eventually brought us to DHTML, or dynamic HTML. The next
evolution in web pages was AJAX, or asynchronous JavaScript and XML. This is a
huge step, allowing us to hit the server for additional data without moving to
an entirely new page.</p>

<p>These days we&rsquo;ve gone a step further with single-page web applications. A
single-page app isn&rsquo;t a brochure-like web page for strictly delivering content.
It is a real application, built to do work. A single-page application is a
&ldquo;thick&rdquo; client that is more similar to a desktop application than a web page.</p>

<p>JavaScript has matured. HTML has matured. CSS has matured. All of these
technologies continue to see growth as their standards are updated to match
modern technology, and the demands of users.</p>

<p>Enterprises want to leverage these advances and build robust applications to
facilitate commerce. JavaScript is uniquely qualified as a programming language
to help with this. It allows us to harness the the computing power of modern
computers directly in the browser. In the past, we were forced to offload much
of the work for displaying a web page on to the server. A request was made and
the server generated a page that was displayed in the browser.</p>

<p>With modern JavaScript we are able to query the server for data via its
application programming interface (API) and use that data to dynamically update
content in the browser without actually changing URLs or reloading a page. The
client side application has its own templates and logic and can manage itself
tidily. The server is now a caretaker for data, while the application running in
the browser is entirely in charge of presentation and interaction with the data
that is provided.</p>

<p>JavaScript has been used in enterprise applications for many years. It is almost
as if we&rsquo;ve come full circle. The major difference in modern applications is
that presentation concerns can now be completely offloaded to the client. We
aren&rsquo;t beholden to a JSP or other server-side page template for rendering
content for our users. After the initial payload of the web application is
delivered, the server&rsquo;s job is now reduced to handling requests for data. This
is still a big job, but the separation of concerns opens up a lot of
opportunity. Because the server&rsquo;s boundaries are clearly separated from
presentation and focused on data, we are able to build APIs that can support
infinite possibilities in terms of how we present and interact with the data
that is flowing from the server.
This is awesome. This is opportunity. We are going to take advantage of this.</p>

<h2>So what is enterprise JavaScript?</h2>

<p>Enterprise JavaScript is used for building web applications that facilitate
commerce is some form or another. Enterprise JavaScript is likely going to be
larger and more complicated than a simple web page. Enterprise JavaScript is
probably going to be developed by a team, perhaps a large team or even several
teams, and will require stronger standards and practices than smaller
non-enterprise use cases.</p>

<p>Is it useful to tack on this &ldquo;enterprise&rdquo; label to JavaScript? Sometimes. When
you say that you are building an enterprise application, it definitely evokes a
mental image of what you are dealing with. Good or bad. You could say
&ldquo;large-scale&rdquo; JavaScript instead, but it wouldn&rsquo;t be as specific. I&rsquo;m an
enterprise developer, and I use JavaScript. Enterprise JavaScript.</p>

<p>[1] <a href="http://enterprise-js.com/">http://enterprise-js.com/</a> is hilarious. Hint:
don&rsquo;t follow its advice!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Paralyzing Grip of Fear]]></title>
    <link href="http://joelhooks.com/blog/2013/06/10/the-paralyzing-grip-of-fear/"/>
    <updated>2013-06-10T17:21:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/06/10/the-paralyzing-grip-of-fear</id>
    <content type="html"><![CDATA[<p>My sons love playing basketball. After a certain age
(around 12), youth sports change. The court or field is no longer filled with
kids that were dragged to the game by their parents. These kids are here because
they love playing the game. So what do you do if your kid loves the game, but
just isn&rsquo;t very good? What if he just can&rsquo;t make the team?</p>

<p>Being a &ldquo;best practices&rdquo; loving software developer, I started scouring the
internet for the best ways to train. We hired a coach to work with him one on
one. We found the &ldquo;gurus&rdquo; on the internet and bought their materials. The boy
<strong>put in the work</strong>, practicing and working out on a daily basis.</p>

<p>He made the team.</p>

<p>Another year passes, and more training ensues. He&rsquo;s gotten <strong>strong</strong> through
consistent exercise and training. He is doing ridiculously
complicated two-ball dribbling drills in the driveway. He&rsquo;s sinking 3s, and even
dunked a women&rsquo;s regulation ball.</p>

<p>In the driveway.</p>

<p>Then comes game time. He won&rsquo;t dribble. He won&rsquo;t shoot a three. <strong>He won&rsquo;t
dribble</strong>.</p>

<p>What&rsquo;s going on?</p>

<p>Fear. The fear of messing up. The fear of shame. This horrible, crippling
paralysis that comes when it is time to execute. This memory of the 9 year old
you, that couldn&rsquo;t do anything right, and spent most of your time on the bench.</p>

<p>Don&rsquo;t get me wrong, there has been improvement. Massive improvement, but this
fear of messing up on the dribble persists. It persists through hours of weekly
practice. It persists through objectivity. It is the <strong>lizard brain</strong> disallowing
us to open up to the vulnerability of potential failure.</p>

<p>No amount of coaching is going to break through this wall. This is something
that we humans have to dig deep and overcome. We have to go ahead. We have to
expose ourselves to the potential for failure. We have to fail, and learn that
failing isn&rsquo;t the end. Failing is <strong>the beginning</strong>.</p>

<p>The quickest way to ensure continued failure is to never make the attempt in the
first place. Abstinence is safety. When we let go of the fear of failure, and
open our minds to the vulnerability that comes along with <strong>doing</strong>, we start to
chisel away at the paralysis. Every attempt becomes slightly easier. Fear can be
pushed aside, and replaced with the muscle memory that comes from practice. We
can have a chance for success.</p>

<p><strong>JFDI</strong> &ndash; Just F&#8217;n Do it.</p>

<p><img src="http://farm5.staticflickr.com/4124/5050135544_97d67cd23c_o.png" alt="Alex Hillman's Awesome
Tattoo" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned From Brennan Dunn's Consultancy Masterclass]]></title>
    <link href="http://joelhooks.com/blog/2013/06/07/what-i-learned-from-brennan-dunns-consultancy-masterclass-w-slash-sketchnotes/"/>
    <updated>2013-06-07T12:53:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/06/07/what-i-learned-from-brennan-dunns-consultancy-masterclass-w-slash-sketchnotes</id>
    <content type="html"><![CDATA[<p>Consulting is something that I truly love. Helping businesses succeed, helping
employees to stop focusing on mundane repeatable tasks, helping enterprises
drive large scale commerce&hellip; these are truly activities that I enjoy. Getting
into the mix, digging up core problems and providing solutions is not a bad way
to earn a living.</p>

<p>As a constant learner, I have a strong desire to learn from people that have
already made my future mistakes, so that I can learn from them and avoid them.
Questions like &ldquo;how to I maintain a steady pipeline of work?&rdquo; and &ldquo;where the
heck do I find clients that I will love to work with?&rdquo; are questions that seem
elusive. Obviously they are answerable, because people do this sort of thing all
the time.</p>

<p>Brennan started offering his <a href="http://doubleyourfreelancingrate.com/build-a-consultancy">Consultancy
Masterclass</a>, and from
the moment he launched, I&rsquo;ve been extremely curious. It isn&rsquo;t cheap at almost
$1,200, but I had the feeling that learning from Brennan&rsquo;s experience in a more
direct way than his books, <a href="http://doubleyourfreelancingrate.com/">Double Your Freelancing
Rate</a> and <a href="http://doubleyourfreelancingrate.com/the-blueprint">The
Blueprint</a>, <strong>had</strong> to be
beneficial. Both of the books are excellent. I encourage you to follow the links
and buy them today. When I saw that The Blueprints top-tier package included a
discount to the class, I was sold.</p>

<p>The class itself is over the course of two half-days. The core topics covered
were:</p>

<ul>
<li>Sustaining a consultancy</li>
<li>Pipeline management</li>
<li>Marketing and networking through events</li>
<li>Vetting and acquiring high quality clients</li>
<li>Cultivating lasting relationships</li>
<li>Billing and cash flow</li>
<li>Value based rates vs. commodity rates</li>
<li>Culture (internal &amp; external)</li>
<li>Staffing</li>
<li>Branding</li>
<li>Operations (remote v brick &amp; mortar)</li>
<li>Handling problem clients</li>
<li><strong>Productized Consulting</strong></li>
</ul>


<p>It was really crammed with information.</p>

<p>One of my absolute favorite benefits of taking the class is the community
access. All of the consultants that have taken the class have access to the
<em>very</em> active email list. Since taking the class, I&rsquo;ve learned a ton from this
group of like-minded folks trying to build sustainable businesses.</p>

<p>Overall, this was a great experience, and I highly recommend it to anybody that
might benefit. It is a proper level++.</p>

<p>Brennan has given me permission to publish my notes from the class. These aren&rsquo;t a
replacement for actually attending, but still contain a trove of valuable
information. I&rsquo;ve found myself, while sketchnoting Brennan&rsquo;s talks, drawing
stacks of money near his topics. That&rsquo;s what this class is about, stacking paper
and loving what you do.</p>

<div class="buybox">
  <span class="buyhead">Want to make more money and love what you do? If you
  answered &#8220;Yes!&#8221; then you will enjoy my Consultancy Masterclass Sketchnotes.</span><br><p class="text">Brennan charges <strong>$1,799</strong>
 for <a href="http://doubleyourfreelancingrate.com/build-a-consultancy">his masterclass</a>
and it is worth every penny. If you are on the fence about the class, or would
like to look at the &#8220;essence&#8221; of the class in <strong>10 pages of lovingly illustrated sketchnotes</strong>, click below and
they are yours for <strong>$9.99</strong>.</p>
  <p class="quote">&#8220;Awesome! I love these.&#8221; - Brennan Dunn</p>
  <a class="button" href="http://gum.co/consultancyclass">Buy Sketchnotes Now</a>
  <p><a class="small" href="http://gum.co/consultancyclass">Buy Sketchnotes Now</a><p>
  <p class="small"><strong>100% satisfaction gurantee</strong>. If you aren&#8217;t happy with these
  notes, for <strong>any</strong> reason, just let me know and I will refund your money!</p>
</div>


<p>You might also enjoy: <a href="http://joelhooks.com/blog/2013/06/06/my-sketchnotes-and-thoughts-from-baconbizconf-2013/"><strong>My Sketchnotes and Thoughts from BaconBizConf 2013</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Sketchnotes and Thoughts from BaconBizConf 2013]]></title>
    <link href="http://joelhooks.com/blog/2013/06/06/my-sketchnotes-and-thoughts-from-baconbizconf-2013/"/>
    <updated>2013-06-06T14:18:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/06/06/my-sketchnotes-and-thoughts-from-baconbizconf-2013</id>
    <content type="html"><![CDATA[<p>It is hard to explain how excited I was when Amy announced
<a href="http://unicornfree.com/category/baconbiz">BaconBizConf</a> in April of 2013. A
small conference devoted to like-minded people that either are, or want to be,
bootstrapping product businesses. The speaker lineup included personal &ldquo;gurus&rdquo;
that I look up to and listen to closely like Brennan Dunn and Patrick McKenzie.
Sold again.</p>

<p>It was a great conference, and I sketchnoted the entire thing. I wanted to share
my notes with you here, and talk about what I absorbed from these talks.</p>

<h2>Day 1</h2>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-1.jpg" alt="Nathan Barry" /></p>

<p>Nathan Barry has had a really good year. He&rsquo;s released several infoproducts
including <a href="http://nathanbarry.com/app-design-handbook/">The App Design
Handbook</a>, <a href="http://nathanbarry.com/webapps/">Designing Web
Applications</a>, and most recently
<a href="http://nathanbarry.com/authority/">Authority</a> which is about&hellip; self publishing
infoproducts. Additionally he&rsquo;s launched his first SAAS product with
<a href="http://convertkit.com/">ConvertKit</a>. This dude is <strong>busy</strong>. He&rsquo;s also made
<strong>$200k</strong> in the last 9 months across these products.</p>

<p>Wow.</p>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-2.jpg" alt="Nathan Barry" /></p>

<p>My key take-aways from Nathan&rsquo;s talk were:</p>

<ul>
<li>Teach everything you know. Even if you are learning yourself, teach it.</li>
<li>Tiered offerings are huge revenue boosters.</li>
<li>Patio11 says <strong>charge more</strong></li>
<li>Be consistent. Write every day as a <strong>habit</strong></li>
</ul>


<p>He&rsquo;s an inspiring guy, and his products are of the highest quality.</p>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-3.jpg" alt="Marc-Andre Cournoyer" /></p>

<p>Next up was Marc-Andre Cournoyer who wrote <a href="http://createyourproglang.com/">Create Your Own Programming
Language</a>. Marc really hammered home the need to
actively seek out and <strong>kill</strong> objections your potential customers might have.
He pointed out that <strong>social proof</strong> is absolutely essential when you are trying
to sell a product, and that anchoring prices against much higher prices is
extremely effective.</p>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-4.jpg" alt="Brennan Dunn" /></p>

<p>Brennan Dunn gave a talk on making money via an email newsletter. Email is &ldquo;old
school&rdquo;, which means it is tried and true platform for reaching your potential
customers. Education based marketing is highly effective, and we are delivering
constant value to our audiences inbox on a regular basis. By &ldquo;giving away&rdquo; our
most valuable content, we are priming the audience for future product offerings.</p>

<p>I can say from first hand experience that this works. I&rsquo;ve bought Brennan&rsquo;s
books, and even took his <a href="http://doubleyourfreelancingrate.com/build-a-consultancy">Consultancy
Masterclass</a>.</p>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-5.jpg" alt="Patrick, Nathan, Marc, and Amy" /></p>

<p>This was a panel on infoproducts. Tiers. Email lists. Charging more.</p>

<p>There was a definite theme.</p>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-6.jpg" alt="Chris &amp; Natalie Nagele" /></p>

<p>Chris and Natalie from <a href="http://wildbit.com/">Wildbit Software</a> are the creators
of Beanstalk. They started out with a 100% remote development team, and have
been migrating to an onsite structure after 10 years of doing remote.</p>

<p>At first I though, &ldquo;meh, working at home is awesome&rdquo;, but then they got into how
they structure the office. Essentially it is a home-away-from-home. The office
is comfortable. Co-workers are treated like family. They dine together. They
have their families up for happy hour (kids included), and generally have a
great time. Once a year they have a company retreat, where they rent a property
in an exotic location and gather as a group.</p>

<p>I will admit that I was reconsidering my staunch <strong>remote only</strong> world view
after hearing them talk about their setup.</p>

<p>The second half of their talk was about competing with the big boys. It is
interesting to consider that <strong>#1 does not have to be the goal</strong>. They are
seeing great success delighting their clients in a space with a lot of
competition. I thought that was cool, and a very good point.</p>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-7.jpg" alt="Patrick McKenzie" /></p>

<p>If there was any of these talks that had the potential to exponentially pay for
the cost of admission, it was Patrick&rsquo;s. Known in some circles as Patio11,
Patrick built a successful business around <strong>selling printable bingo cards to
teachers</strong>. WTFLOL? In the process he got <em>really good</em> at SEO and online
marketing.</p>

<p>And <strong>charging more</strong>.</p>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-8.jpg" alt="Patrick McKenzie" /></p>

<p>He gave really good advice on the &ldquo;funnel&rdquo; and converting visits into sales. He
reiterated the early advice from Marc about <strong>stomping the shit out of
objections</strong> that potential customers might have.</p>

<p>I&rsquo;m excited to put his advice into practice.</p>

<h2>Day 2 (Lightening Talks)</h2>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-9.jpg" alt="Anthony Eden and Lindsay Nixon" /></p>

<p>Anthony Eden founded DNSimple while working another job. He attacked a simple
problem and delivered a simple solution and has since seen success and growth.
He now works on DNSimple fulltime.</p>

<p>Lindsay Nixon got sick of lawyering and leveraged the success of traditionally
published cookbooks into subscription vegan meal-plans that are generating tidy
profits. Recurring tidy profits.</p>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-10.jpg" alt="Ben Curtis, Ian Landsman, and Thomas Fuchs" /></p>

<p>Ben Curtis of Honeybadger strives to make his customers <strong>awesome</strong>. Honesty,
responsiveness, and transparency with your customers will help to ensure that
they continue to be your customers.</p>

<p>Ian Landsman of Snappy leveraged a design firm with popularity on Dribble to get
&ldquo;2 for 1&rdquo; on his design work. They encouraged the firm to post &ldquo;everything&rdquo; on
Dribbble, which funneled potential clients to their website and resulted in 5000
pre-launch subscribers to their mailing list.</p>

<p>Thomas Fuchs gave an interesting rundown of tracking metrics like money, churn
rate, and lifetime customer value. He pointed out how shitty raw data can be,
and gave some tips on converting that raw data into something usable.</p>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-11.jpg" alt="Matt Brindley &amp; Ryan Delk" /></p>

<p>Matt Brindley of Litmus told us how they eliminated tension between development
and support by implementing &ldquo;support Fridays&rdquo;. The result is less confusion and
happier customers.</p>

<p>Ryan Delk from Gumroad broke down some very interesting metrics in regards to
launches across various mediums. The short story? Email converts to $$.</p>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-12.jpg" alt="Chris Savage &amp; Mike Brown" /></p>

<p>Chris Savage from Wistia gave a convincing talk about using video in meaningful
ways. It made me seriously consider how video can play into a solid marketing
plan, and he had tips about how to deliver quality content that customers will
respond to.</p>

<p>Mike Brown puts on a conference called Webstock in New Zealand. They don&rsquo;t
market the conference, but it sells out and they get world class speakers. If
you ever wanted a deductible way of hitting New Zealand, you should consider
Webstock. I know I am.</p>

<p><img src="http://joelhooks.com/images/bacon/bacon_biz_2013-13.jpg" alt="Nick, Garrett, Dave, and Scott" /></p>

<p>Nick Disabato got into Kickstarter early with his publishing of Cadence &amp; Slang,
a wonderful volume on User Experience and interaction design. He presented it as
how he did &ldquo;all the wrong things&rdquo;, but as a backer of the project, and a happy
customer, I&rsquo;d say he did a lot of right things. I&rsquo;m looking forward to his next
edition of the book.</p>

<p>Garrett Dimon is the founder of Sifter. His talk on <strong>fear</strong> resonated with me.
It is so easy to get completely locked up with fear. I know this personally.
Build something. <strong>Just fucking ship it</strong>.</p>

<p>Dave Martorana is a founder at Flyclops. They make an iOS game called
<strong>Domino!</strong> that has seen some success. He said that diversification would
really help their business. A single app in a single app store is scary.</p>

<p>Scott Watermasysk from Kickoff Labs was the last speaker of the day. He
reiterated the <strong>charge more</strong> mantra as well as pointing out that free services
aren&rsquo;t really competitors. Free is a crutch!</p>

<h2>Conclusion</h2>

<p>This was an awesome experience. The conference had a lot of extended breaks for
mingling and getting to know people. The speakers were <strong>all</strong> awesome and open,
as well as highly available. The knowledge that got dropped was outrageously
high quality, and I will keep going back as long as they hold it.</p>

<p>It was also my first time in Philly. Great town!</p>

<p>In the spirit of BaconBiz I&rsquo;ve decided to <a
href="http://gum.co/baconbiz2013sketchnotes">high resolution DRM free PDFs of
my notes</a>. Before you ask, I do realize that the entire set is posted above,
but if you&rsquo;d like your own copy for archive and would like to encourage future
note taking, please take advantage and buy the PDF :></p>

<div class="buybox">
  <span class="buyhead">Want to make more money and love what you do? If you
  answered &#8220;Yes!&#8221; then you will enjoy my Consultancy Masterclass Sketchnotes.</span><br><p class="text">Brennan charges <strong>$1,799</strong>
 for <a href="http://doubleyourfreelancingrate.com/build-a-consultancy">his masterclass</a>
and it is worth every penny. If you are on the fence about the class, or would
like to look at the &#8220;essence&#8221; of the class in <strong>10 pages of lovingly illustrated sketchnotes</strong>, click below and
they are yours for <strong>$9.99</strong>.</p>
  <p class="quote">&#8220;Awesome! I love these.&#8221; - Brennan Dunn</p>
  <a class="button" href="http://gum.co/consultancyclass">Buy Sketchnotes Now</a>
  <p><a class="small" href="http://gum.co/consultancyclass">Buy Sketchnotes Now</a><p>
  <p class="small"><strong>100% satisfaction gurantee</strong>. If you aren&#8217;t happy with these
  notes, for <strong>any</strong> reason, just let me know and I will refund your money!</p>
</div>


<p>You might also enjoy: <a href="http://joelhooks.com/blog/2013/06/07/what-i-learned-from-brennan-dunns-consultancy-masterclass-w-slash-sketchnotes/"><strong>What I Learned From Brennan Dunn&rsquo;s Consultancy Masterclass</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons Learned: A Year with a Large AngularJS Project]]></title>
    <link href="http://joelhooks.com/blog/2013/05/22/lessons-learned-kicking-off-an-angularjs-project/"/>
    <updated>2013-05-22T15:08:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/05/22/lessons-learned-kicking-off-an-angularjs-project</id>
    <content type="html"><![CDATA[<p>After a year of working with a large AngularJS project, I thought I&rsquo;d share a
few of the lessons that I learned in the process. Firstly, I love AngularJS. It
suits my needs exceedingly well, and I expect it will be my goto for the
forseeable future when I need a solid framework for &ldquo;thick client&rdquo; single page
applications. It&rsquo;s awesome. The team working on it is world class, the community
is fantastic, and it combines a killer combo of functionality for building web
apps.</p>

<h2>Code Organisation</h2>

<p>This one is huge. When I arrived the app basically followed what the
angular-seed project represents. Lots of monolithic single files that contained
too much code. We migrated from that to using John Resig&rsquo;s &ldquo;Simple Class
Inheritence&rdquo; to divide up encapsulated pieces of functionality. This approach
works well, and as long as you keep the inheritance shallow generally works. We
were saddled with a &ldquo;dirty sock drawer&rdquo; still, where monolithic folders existed
to house various types of classes.</p>

<pre>
- project
-- controllers
--- someController.js
--- someOtherController.js
--- ...
--- someController99.js
</pre>


<p>Which lead to a controllers folder that would twist the eyes. My new rule is
that if you hear yourself humming the ABCs in your mind in order to find a
specific file, your folders probably have too many files.</p>

<p>Today I&rsquo;d want to start building my project in a more modular fashion. Each
discreet bit of functionality, or functional area, contains the majority of the
files/classes/objects that it needs to function. In a perfect world, these
modules would be completely modular, and could be extracted and placed in other
projects as reusable &ldquo;meta&rdquo; components. This is difficult sometimes because you
will likely also need a set of common utilities, helpers, or other such files
that serve as shared dependencies across your modules. Unless reusability is a
requirement, I won&rsquo;t spend a lot of time ensuring absolute seperation, but it is
where the bar is raised and something that I keep in mind as I develop.</p>

<p>Cliff Meyers <a href="http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript">has written a great
article</a>
on organizing your code in a large Angular app.</p>

<h2>Directives are awesome and powerful</h2>

<p>I&rsquo;m of the opinion now that Directives are the <strong>killer feature</strong> of AngularJS.
They are wonderful little packages of contained UI/Presentation logic. They
present so much flexibility and power with their ability to extend the grammar
of HTML. We definitely use directives, but perhaps not as much as we could.</p>

<p>One of my favorite aspects of Angular Directives is that they are composable.
Using them as HTML attributes, we are able to leverage directives to build
complex widgets with layered functionality. This can be a double-edge sword at
times, when the layered functionality wants to compete, but overall it is
awesome.</p>

<p>If I was starting a project today, I would put some serious thought into
organizing Directives as visual components and behaviors. There are already
several projects that wrap popular UI frameworks with Angular Directives, but it
isn&rsquo;t strictly necessary to use a full-blown component set to approach it with
this mentality. What are the primary components of the application? How can it
be built around directives so that the primary components are shared throughout
the application instead of cut-n-paste HTML and CSS sprinkled everywhere. How
can I leverage these components for future work?</p>

<p>If you haven&rsquo;t watched them yet, bounce on over to John Lindquist&rsquo;s
<a href="http://egghead.io">egghead.io</a> and check out the series on Directives. All of
the videos are excellent, but the Directives information is enlightening.</p>

<h2>Know thy framework</h2>

<p>Since I&rsquo;ve started this project, I&rsquo;ve definitely spent some time with the
<a href="https://github.com/angular/angular.js/tree/master/src">Angular internals</a>. The source code is highly readable and well tested, so it is
a <strong>great read</strong> if you are into clean/tight JavaScript.</p>

<p>While I&rsquo;ve spent some time with it, this is an area I&rsquo;d like to get more
intimate with. Many things are still <strong>black box</strong> to me, and while I trust the
folks building Angular, I still feel the need to understand what is occuring
when I build applications. This is one of my immediate goals right now, so
hopefully down the road I might have a thing or two to say about how Angular
works uner the hood.</p>

<p>As an aside, I feel compelled to do the same thing with
<a href="https://github.com/jquery/jquery/tree/master/src">jQuery</a>. So much source,
so little time.</p>

<h2>The Build</h2>

<p>Sadly, with this project we are required to use Maven and JAWR for our build. It
has been a real struggle and we can&rsquo;t do &ldquo;proper&rdquo; builds. We&rsquo;ve been able to
build some tools that help to mitigate, but I don&rsquo;t recommend using Maven for
your front end code.</p>

<p>If I was starting the project today, I would definitely use
<a href="https://github.com/yeoman/generator-angular">Yeoman</a> to easily generate
templates and make life easier.</p>

<h2>The CSS</h2>

<p>This isn&rsquo;t related to Angular directly, but is another important aspect of your
<em>AngularJS project</em> so I wanted to spend a little time on it.</p>

<p>I will admit that a year ago my attitude was &ldquo;f css&rdquo;. It confused and frustrated
me to the point of distaste. Obviously this stemmed from ignorance, and I&rsquo;ve
spent the last year trying to play makeup with CSS. My attitude is no longer &ldquo;f
css&rdquo; and sounds more like &ldquo;SCSS!&rdquo; because I found a happy place where CSS and I
can get along.</p>

<p><a href="http://sass-lang.com/">SCSS</a> syntax takes many of the pain points that put the
screws to my brain with vanilla CSS and added a nice level of clarity. On top of
that, Compass provides a pile of wicked mixins that eliminate an entirely new
level of pain from the stylesheet workflow.</p>

<p>In the future I want to dig into SASS/Compass deeper, combining its expressive
styling capabilities with the module and component level AngularJS work outlined
above. I&rsquo;d like to use a more organized approach to my stylesheets with
something like <a href="http://smacss.com/">SMACSS</a> providing a baseline standard for how the styling is
implemented and organized.</p>

<p>At this point, CSS and I have fully made up. I&rsquo;ve removed a lot of my ignorance,
which was obviously the key to building a solid relationship. We will see how it
goes. One day at a time.</p>

<h2>Conclusion</h2>

<p>If you are building a single-page web application, AngularJS is a solid choice.
It is important to decide on and implement structure for your application early.
Consider up front how to organize your code into modules and components so that
you can harness the power of Directives and maximize reusability potential.</p>

<p>Some good comments on <a href="https://news.ycombinator.com/item?id=5756911">Hacker
News</a> if you&rsquo;d like to join the
discussion.</p>

<p>You might also enjoy: <a href="http://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags/"><strong>AngularJS Directives That Override Standard HTML Tags</strong></a></p>

<p>or maybe: <a href="http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend/"><strong>Learn AngularJS this Weekend</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Size and Composition of Effective Software Teams]]></title>
    <link href="http://joelhooks.com/blog/2013/05/21/size-and-composition-of-effective-teams/"/>
    <updated>2013-05-21T09:01:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/05/21/size-and-composition-of-effective-teams</id>
    <content type="html"><![CDATA[<p>The success or failure of <em>any</em> project is based on the team or teams working on
it. Teams are like fingerprints and snowflakes. They are composed of individuals
with unique experiences and skillsets. When we set out to build large
applications in a reasonable amount of time, we will generally build a larger
team composed of specialists to get it done. The specialties range from UI
developers to marketing experts, with many other areas of expertise in between.</p>

<p>How does a big team organize to work together effectively? I&rsquo;ve seen several
approaches, and I want to talk about two. The first, which is not my preference,
is the creation &ldquo;silos&rdquo; for teams based on areas if expertise. The second is to
create cross-functional autonomous teams.</p>

<h2>Building silos</h2>

<p>The first approach is to group teams based on their areas of influence. In this
case you might have a UI team, a server-side systems team, a qa team, a
marketing team, etc&hellip;</p>

<p><img src="http://joelhooks.com/images/silos.jpg" alt="photo credit: PXLated" /></p>

<p>These teams might even be divided along vendor lines, for a project that
utilizes consultants to help deliver a project. This has some potential for
conflict related to a breakdown in communication.</p>

<p>What is wrong with this? It can lead to caustic relationships with &ldquo;us v them&rdquo;
mentality. Communication breaks down. Daily status meetings for teams don&rsquo;t
cross-pollinate ideas or current status of activities. Generally these teams
will require some sort of &ldquo;ambassador&rdquo; that shuttles information between the
teams. It leads to &ldquo;waterfall&rdquo; development where the server-side team needs to
finish work in order to hand it off to the UI team. The UI team will then finish
their part and hopefully hand it off to the QA team, unless they ran into issues
with integration and it needs to be handed back to the server-team.</p>

<p>This can work, but successful software is built on top of <strong>communication</strong>, so
how can we organize to help better facilitate that?</p>

<h2>Cross-functional and Autonomous</h2>

<p>A cross-functional team is composed of members across the boundaries
specialties. This team might consist of ui specialists, server-side experts, qa
pros, as well as representitives from the business side of things including
product owner/business analyst and marketing gurus. These teams can shephard
virtually any functionality from start to finish.</p>

<p><img src="http://joelhooks.com/images/rainbow.jpg" alt="photo credit: Pink Sherbet Photography" /></p>

<p>When a team is composed in this fashion, daily status meetings start to take on
more meaning. They facilitate active communication across disciplines and allow
members to interact more closely. It removes much of the us/them problem. It
doesn&rsquo;t matter who writes an individual team member&rsquo;s check or what their area
of expertise might be. They are a member of a team that can fully deliver value
with much less reliance on external dependencies.</p>

<p>Autonomy and the ability to get work done at a comfortable speed without
hitting hard stops to wait on another team to deliver allows teams to succeed.
Teams are modular, allowing the business to add new teams that have the
capability to deliver value to the project.</p>

<p>In most cases developers will be on a single team. The exception might be an
&ldquo;architect&rdquo; or devops specialist that serves as &ldquo;glue&rdquo; between the different
teams providing consistency. The same is likely true for the business analyst
and marketing specialist. It is important not to spread the business liasons too
thin. The teams should have well-groomed backlogs of work from which to pull
from.</p>

<h2>How big should a team be?</h2>

<p>My favorite &ldquo;rule&rdquo; for team size comes from Amazon&rsquo;s <a href="http://www.fastcompany.com/50106/inside-mind-jeff-bezos">Jeff
Bezos</a> who uses the
concept of &ldquo;pizza teams&rdquo;:</p>

<blockquote><p>Bezos pursued his idea of a decentralized, disentangled company where small
groups can innovate and test their visions independently of everyone else. He
came up with the notion of the &ldquo;two-pizza team&rdquo;: If you can&rsquo;t feed a team with
two pizzas, it&rsquo;s too large. That limits a task force to five to seven people,
depending on their appetites.</p></blockquote>

<p>A &ldquo;pizza team&rdquo; might look like this:</p>

<ul>
<li>1 designer/UX Specialist</li>
<li>1 or 2 UI developers</li>
<li>1 or 2 server-side developers</li>
<li>1 QA expert</li>
<li>1 product owner/business analyst</li>
</ul>


<p>This is a very general list, but you get the idea. A team composed in this
fashion can <strong>get shit done</strong>. This is the ultimate goal.</p>

<p>Team size and composition is only one factor in the communication puzzle, but it
is an important one. In the end, whatever works for you and gets your software shipping is the best.
I&rsquo;ve had experience working inside of both of these types of teams, and greatly
prefer the cross-functional approach. Regardless of how your teams are composed
remember that we are all on the <strong>same team</strong> and that the basic assumption that
the members of the team are both <strong>smart</strong> and <strong>capable</strong> are essential.</p>

<p>How do you organize teams? What has worked
for you, and conversly what has been completely <strong>FUBAR</strong>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS, Dependency Injection, and when is a singleton not a Singleton?]]></title>
    <link href="http://joelhooks.com/blog/2013/05/01/when-is-a-singleton-not-a-singleton/"/>
    <updated>2013-05-01T17:31:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/05/01/when-is-a-singleton-not-a-singleton</id>
    <content type="html"><![CDATA[<p>The Singleton is the Highlander of design patterns. <strong>There can be only one</strong>.</p>

<p>An example of a Singleton implementation might look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">MySingletonClass</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">MySingletonClass</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_singletonInstance</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">MySingletonClass</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_singletonInstance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">MySingletonClass</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_singletonInstance</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">Foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MySingletonClass</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MySingletonClass</span><span class="p">();</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">result</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}(</span><span class="nb">window</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/a/6733919/87002">from Tom Roggero</a></p>

<p>The above JavaScript is from an <a href="http://stackoverflow.com/questions/1635800/javascript-best-singleton-pattern">answer</a>
from StackOverflow that seemed resonable. I&rsquo;ve never actually needed an enforced Singleton in JavaScript.
I suspect I never will, but&hellip; know thy enemy!</p>

<p>Singletons have some use cases, but it is generally considered poor form to use
them. They are especially bothersome when you start trying to unit test your
code. They effectively create global state, and shared state is a real pain to
manage when you are writing unit tests.</p>

<p>It <strong>is</strong> extremely handy to only have one instance of a thing within a certain
context, so how do we gain the benefit of a Singleton, without the pain?</p>

<h2>Dependency Injection (DI)</h2>

<p><a href="http://en.wikipedia.org/wiki/Dependency_injection">Dependency injection</a> is a lovely thing. It can be accomplished in several ways, from simply
passing arguments into a constructor, to full blown DI containers like
<a href="https://code.google.com/p/google-guice/">Guice</a>,
<a href="https://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</a>, and
<a href="http://angularjs.org/">AngularJS</a>. I&rsquo;m not going to go to deep in this post, but <a href="http://joelhooks.com/2009/07/12/inversion-of-control-and-dependency-injection-in-flex-using-the-parsley-application-framework-part-1/">here is one from
the archives</a> that is still relevant (if you don&rsquo;t mind a little AS3). <a href="http://misko.hevery.com/2008/11/11/clean-code-talks-dependency-injection/">Here are a couple</a> of awesome talks from Miško Hevery that I highly recommend.</p>

<p>Most containers have a mechanism for
providing <em>context-based singletons</em>.</p>

<h2>Context-Based singletons.</h2>

<p>With a DI container, we have contexts. In the case of AngularJS, we have
the application module, which provides the overall container for a given
application. Within this container we define dependencies that can be
liberally injected into other actors within the module, such as directives,
controllers, and/or utility classes. The module and its sub-modules <strong>are</strong> the context.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;someModule&quot;</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'>    <span class="nx">service</span><span class="p">(</span><span class="s2">&quot;mySingletonThing&quot;</span><span class="p">,</span> <span class="nx">MySingletonThing</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a very typical line of config code in an AngularJS application. This configures
a service for <code>someModule</code> called <code>mySingletonThing</code>. <code>mySingletonThing</code> is a
singleton, but it is not a Singleton. <code>MySingletonThing</code> does not enforce its
singleton nature. We can create as many instances as we desire. We won&rsquo;t, but it
is nice to have freedom. ;)</p>

<p>Instead we rely on AngularJS&rsquo;s ability to inject dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;someModule&quot;</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;MyController&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;mySingletonThing&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">mySingletonThing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//do stuff</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;someModule&quot;</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;MyOtherController&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;mySingletonThing&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">mySingletonThing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">hahaTakeThat</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MySingletonThing</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hahaTakeThat</span> <span class="o">===</span> <span class="nx">mySingletonThing</span><span class="p">);</span> <span class="c1">//false</span>
</span><span class='line'>    <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we talk about a context-based singleton, these defined dependencies
are what we mean. Within a given context the <em>DI container</em> will only allow a single
instance of the object to be injected. The object itself does not protect
against or prevent multiple instances. You can <code>new</code>, <code>new</code>, <code>new</code> it all day long,
and there will be no complaints. With objects managed by a DI container you
should <em>never</em> need to use <code>new</code> for objects that are injectable.</p>

<p>This provides you with all the benefits of a Singleton, with none of the
sadness. Now when you write your units tests, you can use as many individual instances as
you might need, without managing global state. <strong>Joy</strong>.</p>

<p>With Angular&rsquo;s DI implementation, we are a bit limited. Within a given module, we only
have access to a single context. This limits some flexibility that would
be gained by allowing nested contexts. Consider for example a user with
multiple accounts. What I&rsquo;d really like is for each account to represent a
context that could have its <strong>own</strong> singleton objects. It would be <strong>very</strong>
handy to dynamically add/remove account sub-modules from the user. The singleton
injectables defined in the user module would cascade to sub-modules, but a
sub-module could also define its own singleton mappings, perhaps even overriding
the parent module&rsquo;s. I don&rsquo;t know if this is on the roadmap, but it would be awesome to
have a more robust injector.</p>

<h2>Conclusion</h2>

<p>A Singleton is a singleton, but a singleton is not <strong>always</strong> a Singleton in the
<em>formal</em> sense. The enforced Singleton is generally regarded as &ldquo;<strong>to be avoided</strong>&rdquo;, but context-based
singletons are an extremely useful tool that play nice and
don&rsquo;t represent hairy global state. YMMV</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A rose by any other name?]]></title>
    <link href="http://joelhooks.com/blog/2013/04/26/a-rose-by-any-other-name/"/>
    <updated>2013-04-26T02:15:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/04/26/a-rose-by-any-other-name</id>
    <content type="html"><![CDATA[<p>I posted <a href="http://joelhooks.com/blog/2013/04/24/modeling-data-and-state-in-your-angularjs-application/#comment-875747843">an
article</a> about using models to assist in creating leaner, meaner controllers. It resulted in a lively conversation in the comments that spawned an interesting <a href="http://wekeroad.com/2013/04/25/models-and-services-in-angular">rebuttal</a> from <a href="http://twitter.com/robconery">Rob Conery</a> that essentially says I am full of it, and the names I attach to the patterns I use are wrong.</p>

<p><strong>This is probably true.</strong></p>

<p>With that truth understood, I also don&rsquo;t go around pulling made up nonsense
definitions out of my ass. The models bit is battle-tested real working
patterns, on a large project, with a good sized team. The terms I use come from
a mix of sources, with roots in GoF patterns and through my continued education.
It is <strong>not</strong> personal terminology.</p>

<blockquote><p>Having said, I&rsquo;d rather see developers build kick-ass apps that are
well-designed and follow separation of concerns, than see them waste time
arguing about MV* nonsense. And for this reason, I hereby declare AngularJS to
be MVW framework &ndash; Model-View-Whatever. Where Whatever stands for &ldquo;whatever
works for you&rdquo;.</p>

<p>Angular gives you a lot of flexibility to nicely separate presentation logic
from business logic and presentation state. Please use it fuel your productivity
and application maintainability rather than heated discussions about things that
at the end of the day don&rsquo;t matter that much.</p></blockquote>

<p>The whole situation reminded me of <a href="https://plus.google.com/app/basic/stream/z13vitkjpya0zxcee23ztzmqcor3fzen2">this
post</a> from Igor Minar, regarding
AngularJS&rsquo;s status as an MV-WHATEVER framework. For whatever reason, people name
things differently for different reasons. Naming is <strong>hugely</strong> important for our
common understanding of things. Up to a point. To take an example from
non-coding life, on a recent trip to Italy, I had <em>no clue</em> what the name of
anything was. A combination of handwaving, pointing, and nodding was more
effective than one might think. In some ways, this is true for programming as
well. As long as we eventually agree to build the same thing, it will probably
be <strong>OK</strong>.</p>

<p>The conversation came to an abrupt end. My son witnessed the tragic and brutal
death of a man that we both have a lot of respect for. I was involved with
notifying people of the incident, and it was a really difficult situation. The
Disqus notifications were too much, so I disabled the comment thread. Rob
subsequently attempted to delete his comments (which is a shame, but
understandable) so he is the &ldquo;guest&rdquo; commentor. Normally I love a good debate,
and this is the first time I&rsquo;ve ever done this sort of thing. Rob expressed
extreme displeasure and took it as a personal insult. Hopefully he understands
that it is not, and my desire is that we pick up the conversation again one day. Perhaps via a different medium?</p>

<p>I find it highly interesting that two people could have such wildly different
world views when it comes to naming patterns. It would be great to get to the
bottom of it, and I suspect in the end we would both be smarter for it.</p>

<p>I&rsquo;ve got a fairly strict rule about not posting non-technical stuff here, so
this post is an anomolly. I won&rsquo;t make a habit of stopping conversations, and
wanted to put this out here, as it relates directly with this space.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modeling Data and State in Your AngularJS Application]]></title>
    <link href="http://joelhooks.com/blog/2013/04/24/modeling-data-and-state-in-your-angularjs-application/"/>
    <updated>2013-04-24T09:05:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/04/24/modeling-data-and-state-in-your-angularjs-application</id>
    <content type="html"><![CDATA[<h2>Respect your data. Contain your state.</h2>

<div style="float: right; padding-top: 30px; padding-left: 30px"><img src="http://joelhooks.com/images/AngularJS-Shield-large.png" /></div>


<p>Data and state are the foundation of your application. These two items should be
absolutely respected. As you work through the AngularJS documentation, these two
items are generally stored on the controllers. This works OK, but as your app
grows beyond the &ldquo;todo list&rdquo; it quickly breaks down. Controllers need shared
state, data needs to be contained, and it needs to be done in a consistent manner
that is easy to comprehend.</p>

<p>I&rsquo;ve <a href="http://joelhooks.com/2011/03/12/an-introduction-to-robotlegs-as3-part-2-models/">written about
this</a>
in the past, in the context of ActionScript 3 and the Robotlegs framework. This
approach is valid for JavaScript, but requires some translation to build something usable for
AngularJS.</p>

<h2>What is a Model?</h2>

<blockquote><p>A model notifies its associated views and controllers when there has been a
change in its state. This notification allows the views to produce updated
output, and the controllers to change the available set of commands. A passive
implementation of MVC omits these notifications, because the application does
not require them or the software platform does not support them.
<a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">from
Wikipedia</a></p></blockquote>

<p>As the &ldquo;M&rdquo; in <a href="http://www.codinghorror.com/blog/2008/05/understanding-model-view-controller.html">MVC</a>, model classes <strong>encapsulate</strong> your application’s data and <strong>provide an API</strong> to access
and manipulate that data. The other classes in your application will make
requests of models via this API. When data on the model is updated, the model
dispatches events that the other classes within your application can react to.
Models are appropriate for capturing the domain logic, such as performing
calculations or other manipulations.</p>

<p>An example of this might be a shopping
cart. When an item is added to the shopping cart model, the new total for all of
the items in the cart will be calculated. The new total will then be stored on
the model for access by other classes within the application. By placing this
logic within your models, you ensure that it isn’t scattered across the entire
application and know exactly where to look to see how and when your data is
being manipulated.</p>

<p>In addition to controlling access to data, models maintain the state of your
application. Consider a list of objects. You want to keep track of which of
these objects is selected, so the data model has a selected property which is
updated with the currently selected item. Other areas of your application can
now access this property to discover which item is selected and react
accordingly.</p>

<p>As you can see, data and state are intimately related. <strong>State is data, data is
state</strong>.</p>

<p>Models are portable. There are many common sets of data that can easily
transport between one application and the next. Think of, as an example, a
<code>UserLoginModel</code> or a <code>ShoppingCartModel</code>. Portability takes a bit more thought and
energy, but no more than writing the same code over again for each project.
Obviously every model isn&rsquo;t going to qualify for this, but many will so it is
something to watch out for.</p>

<p>The model is the core of your application. The
visual components get all the ooos and aaahs, but as a developer you know that
data is the man behind the curtain. It is our jobs, as developers, to curate the
data and deliver it to those beautiful interface items accurately. This is why
isolating domain logic in the model is so important. By isolating it you have
made it easier to locate, update, and maintain.</p>

<p>We&rsquo;ve dug into what a model is, but if you&rsquo;re like me, you are waiting to see
how to actually use models within an AngularJS application, so let&rsquo;s take a look
at that.</p>

<h2>Exploring the Code</h2>

<iframe width="100%" height="300"
src="http://jsfiddle.net/joelhooks/jWmck/embedded/js,result,html/"
allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This is a simple/naive example that has a list of authors with a poignant quote from
each. If you explore the example you will quickly notice that all of the data
and state is stuffed in the controller. This is OK for a trivial demo, and
something more complicated/non-trivial is difficult to present in a blog post.
It should be enough to present the concepts and gain some understanding on how
using models can reduce the overall cognitive load of more complex applications.</p>

<p>This &ldquo;everything stuffed in a controller&rdquo; approach works, but <strong>we can do better</strong>.</p>

<p><strong>note:</strong> I&rsquo;m using jsFiddle, and it puts obvious restrictions on how you
organize your code. I will be adding some thoughts on that in a future post, but
a monolithic single JS file isn&rsquo;t going to scale very well.</p>

<p>If you&rsquo;d like to see a good write-up on structuring larger Angular apps, my
friend <a href="http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript">Cliff
Meyers</a>
wrote a great article on the subject.</p>

<h2>Introducing a Model to Store Data</h2>

<p>In the above example, all of our data is stored within the controller on the
<code>$scope</code>. It is all hardcoded in the app as well, but we will talk about service
integration in the future. The task we want to accomplish now is a little
seperation of data and presentation. This doesn&rsquo;t mean that we won&rsquo;t be using
<code>$scope</code>. We will. AngularJS uses the <code>$scope</code> as a <a href="http://martinfowler.com/eaaDev/PresentationModel.html">Presentation
Model</a>. This is
fine, but we can still provide much nicer separation with a &ldquo;proper&rdquo; model for
the data.</p>

<iframe width="100%" height="300"
src="http://jsfiddle.net/joelhooks/jWmck/7/embedded/js,result/"
allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>If you look at the JavaScript above, I think you will agree that it is already
starting to look a bit cleaner. While the controller&rsquo;s <code>$scope</code> is still
ultimately supplying the view with the data it craves, the actual data is housed
in a model. The model is a &lsquo;singleton&rsquo; (of the lowercase &rsquo;s&#8217; variety) defined as
an Angular service.</p>

<p>I found Angular&rsquo;s definition of &ldquo;service&rdquo; confusing at first. It has nothing
directly to do with what I consider a service, but is simply one of the methods
for defining dependencies for injection.</p>

<iframe width="100%" height="300"
src="http://jsfiddle.net/joelhooks/jWmck/9/embedded/js,result/"
allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This is more like it. Now we have a tiny controller, and all of our data and
state is offloaded onto <code>authorListModel</code>. We&rsquo;ve added the <code>setSelectedAuthor</code>
to the model, which dispatches an event. Our controller is listening for the
event, so it updates the <code>$scope</code> appropriately and the view displays the
information we expect.</p>

<p>This clean separation is going to pay huge dividends as the application grows in
scope. We can now easily separate the <code>textarea</code> that contains the quote from
the list of available authors.</p>

<p><strong>anti-pattern alert:</strong> you might be tempted to add event listeners on your
model. Don&rsquo;t. It makes them harder to test and generally kills models in terms
of single-responsibility-principle. Since a model <em>has an</em> event dispatch, which
can also listen for events, the temptation is always there. Ignore this warning
at your own peril! ;)</p>

<iframe width="100%" height="300"
src="http://jsfiddle.net/joelhooks/jWmck/10/embedded/js,result,html/"
allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This is a bit silly, but shows the flexibility of this approach. The <code>textarea</code>
is now driven by its own controller. That controller is also listening for the
update event the model dispatches. Instead of inspecting the model, it uses a
parameter sent with the event to update <code>$scope.quote</code> and the magical Angular
binding does the rest. Nice.</p>

<h2>Do I really need to use events like this?</h2>

<p>Most definitely <strong>not</strong>. Instead of the eventing I outlined above, you could
simply bind to the model. One of Angular&rsquo;s greatest strengths is its awesome
two-way &#8220;.</p>

<iframe width="100%" height="300"
src="http://jsfiddle.net/joelhooks/jWmck/12/embedded/js,html,result"
allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This is pretty nice, and is arguably cleaner than the eventing approach. In many
(most) cases, this approach might be preferred.</p>

<h2>Conclusion?</h2>

<p>Models provide an excellent way to separate data and display. By migrating your
data and state to a model, you have much more flexibility with how that data is
presented. Models are also <strong>prime</strong> candidates for unit testing, as they
typically have exactly <strong>one dependency</strong> (some form of event emitter, in this
case the <code>$rootScope</code>) and contain highly testable domain
logic.</p>

<p>Hopefully this gets you started down the road of using models in your AngularJS
apps. In the near future, I will expand on models to discuss services (the
external kind) and how they play with this approach.</p>

<p>If you have any comments, questions, or critique please share. I&rsquo;d love to hear
about how you solve this problem of separating view and data with AngularJS.</p>

<p>If you are looking for nuts &amp; bolts lessons on AngularJS, it is hard for me to
express in words how awesome <a href="http://www.egghead.io/">John Lindquist&rsquo;s
egghead.io</a> is. If you haven&rsquo;t already, go there now.</p>

<p>Join the conversation on <a href="http://redd.it/1d31fh">Reddit</a> and <a href="https://news.ycombinator.com/item?id=5607330">Hacker
News</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Essential VIM Plugins That Greatly Increase my Productivity]]></title>
    <link href="http://joelhooks.com/blog/2013/04/23/5-essential-vim-plugins/"/>
    <updated>2013-04-23T09:05:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/04/23/5-essential-vim-plugins</id>
    <content type="html"><![CDATA[<p>There are <strong>a lot</strong> of VIM plugins to choose from. An individual&rsquo;s list of what
would be considered &ldquo;essential&rdquo; is largely a personal matter. For any given
plugin, there is also probably going to be an excellent alternative plugin that does the
same basic thing in a slightly different way. I&rsquo;m just starting to use VIM for
more than just quick edits of files on a server, and the plugins below are
solving very specific workflow issues that I&rsquo;ve encountered while learning to be
productive in VIM.</p>

<p><strong>warning:</strong> watch out for plugins, generally. For many (some included in my
list of favorites here) might hamper your ability to understand the core
functionality of VIM. Many times the problem is best solved by understanding how
you can accomplish the task with just VIM, and not a plugin. One of the biggest
barriers I had with getting over the initial learning curve was over-saturation
with plugins, as I <a href="http://joelhooks.com/blog/2013/04/09/getting-to-know-vim/">wrote
here</a>.</p>

<h2>Vundle</h2>

<p>If any of these plugins had an &ldquo;absolutely&rdquo; in front of its &ldquo;essential&rdquo;
descriptor, it would be <a href="https://github.com/gmarik/vundle">Vundle</a>.</p>

<p>Vundle is short for VIM Bundle. It is spiritually alike to
<a href="http://gembundler.com/">Bundler</a>, and provides a clean easy way to manage
plugins that you install. In past VIM efforts, I didn&rsquo;t use any sort of scheme
for managing plugins, and it was allways a complete <strong>mess</strong>. Vundle has solved
this for me completely.</p>

<p>Vundle also allows me to rapidly reconfigure my setup across multiple machines,
which can be a real boost. It isn&rsquo;t really a day-to-day productivity booster,
but when you need it, it is great to have it configured.</p>

<h2>NERDTree</h2>

<p>One of the first walls I hit was &ldquo;how the heck do I navigate files in a
project?&rdquo;</p>

<p>The solution is multi-pronged, and starts with
<a href="https://github.com/scrooloose/nerdtree">NERDTree</a>. The NERD Tree is a
filesystem explorer that looks something like this:</p>

<p><img src="http://joelhooks.com/images/nerdtree.png" alt="NERDTree" /></p>

<p>It opens to your current directory, and allows you to drill down into folders.
This allows you to traverse your project and open files. It also has file
management capabilities for creating, deleting, and other common tasks.</p>

<p>NERDTree is fantastic for hunting something down, but there are other tools that
help solve this problem in different ways.</p>

<p><strong>note</strong>: I was chastised a bit for this one on <a href="https://news.ycombinator.com/item?id=5597939">Hacker
News</a>. NERDTree <strong>is</strong> big, and
you might have better luck with <code>netrw</code> as suggested. I plan on digging in to
<code>:h netrw</code> to see if I can drop NERDTree off this list of (my) essentials.</p>

<h2>ctrlp</h2>

<blockquote><p>Full path fuzzy file, buffer, mru, tag, &hellip; finder for Vim.</p></blockquote>

<p><a href="https://github.com/kien/ctrlp.vim">ctrlp</a> is <strong>rad</strong>. It really lets you fly
around your project&rsquo;s files. After a quick <code>let g:ctrlp_map = '&lt;c-p&gt;'</code> to map it
to a hotkey, you are off to the races. It has different modes that allow you to
jump to files, buffers, most recently used, as well as tags.</p>

<p>With no fault to ctrlp, I&rsquo;ve had issues with tags and JavaScript. ctags is
behind the times, and DoctorJS lost its maintainer. Tern looks to have some
promise in this regard, and the VIM plugin is under heavy development. Having
solid JS tags would turbo-charge ctrlp for me, so I&rsquo;m paying close attention to
ongoing development.</p>

<h2>Syntastic</h2>

<p><a href="https://github.com/scrooloose">scrooloose</a> has several awesome VIM plugins,
including NERDTree above. I also get a lot of mileage out of
<a href="https://github.com/scrooloose/syntastic">Syntastic</a>. It is a simple linter that
highlights problems with syntax in a file. It works on <code>save</code>, and provides
meaningful feedback about warnings and errors.</p>

<h2>EasyMotion</h2>

<p>Last, but in absolutely no way least, is the elegent
<a href="https://github.com/Lokaltog/vim-easymotion">EasyMotion</a>. This plugin is all
about navigating in the file you are currently editing.</p>

<p><img src="http://joelhooks.com/images/easymotion.png" alt="EasyMotion" /></p>

<p>When activated with the <code>word</code> motion, EasyMotion assigns the first letter of
every word after the cursor with a letter-based hotkey. After the first 26
letters are used up, it switches to capitals. Those soon change to sections that
allow you to &ldquo;drill in&rdquo; and get very fine-grained movement across large
distances in your file. As your finger muscles get trained, the motion really is
<strong>easy</strong>.</p>

<p>This list isn&rsquo;t exhaustive, by any means. I also have several &ldquo;essential&rdquo;
plugins that I used specifically related to languages and file types that are
common for me. Vundle is probably the most essential out of this list. It has
been a huge help over the previous cut-n-paste horrid approach I&rsquo;ve used in the
past. Running <code>:BundleUpdate</code> and watching Vundle march down my installed plugin
list, looking at the github repository for each plugin I&rsquo;ve installed, and
updating them without any hassle at all is hugely satisfying.</p>

<p>If you are interested, my <a href="https://github.com/joelhooks/dotfiles">dotfiles are stored
here</a>. They are an ongoing process, but
there are some interesting things going on.</p>

<p>I&rsquo;d love the hear about your essential VIM plugins. I&rsquo;m always on the hunt for
new and interesting additions to my workflow.</p>

<div class="buybox">
  <span class="buyhead">Want to make more money and love what you do? If you
  answered &#8220;Yes!&#8221; then you will enjoy my Consultancy Masterclass Sketchnotes.</span><br><p class="text">Brennan charges <strong>$1,799</strong>
 for <a href="http://doubleyourfreelancingrate.com/build-a-consultancy">his masterclass</a>
and it is worth every penny. If you are on the fence about the class, or would
like to look at the &#8220;essence&#8221; of the class in <strong>10 pages of lovingly illustrated sketchnotes</strong>, click below and
they are yours for <strong>$9.99</strong>.</p>
  <p class="quote">&#8220;Awesome! I love these.&#8221; - Brennan Dunn</p>
  <a class="button" href="http://gum.co/consultancyclass">Buy Sketchnotes Now</a>
  <p><a class="small" href="http://gum.co/consultancyclass">Buy Sketchnotes Now</a><p>
  <p class="small"><strong>100% satisfaction gurantee</strong>. If you aren&#8217;t happy with these
  notes, for <strong>any</strong> reason, just let me know and I will refund your money!</p>
</div>

]]></content>
  </entry>
  
</feed>
