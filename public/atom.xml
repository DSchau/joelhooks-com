<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joel Hooks]]></title>
  <link href="http://joelhooks.com/atom.xml" rel="self"/>
  <link href="http://joelhooks.com/"/>
  <updated>2018-01-01T15:42:53-08:00</updated>
  <id>http://joelhooks.com/</id>
  <author>
    <name><![CDATA[Joel Hooks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Living and learning in 2017]]></title>
    <link href="http://joelhooks.com/blog/2018/01/01/what-i-learned-and-did-in-2017/"/>
    <updated>2018-01-01T09:38:00-08:00</updated>
    <id>http://joelhooks.com/blog/2018/01/01/what-i-learned-and-did-in-2017</id>
    <content type="html"><![CDATA[<h1>Make all the big life changes at once&hellip;</h1>

<p>In 2016 we moved our family of 6 out of our home of 15 years across the country to settle in Vancouver, WA. That&rsquo;s quite a lot of change for everybody involved. My partner lived her entire life in Fort Worth, TX. Her family was, for the most part, within a 20 mile radius of our house.</p>

<p>It&rsquo;s hard to even begin to describe the level of trust and commitment that this amazing human has given to me. ❤️</p>

<p><img src="http://joelhooks.com/images/2017_review/2C0AF686-AC7C-415F-9ADC-6ACA3FC53C6C.jpg" alt="Our backyard." /></p>

<p>Shortly after arriving in the Pacific Wonderland, we made another decision, and on Feb 9th, 2017 she arrived. Our little Romi π.</p>

<p><img src="http://joelhooks.com/images/2017_review/romi_born.jpg" alt="A baby?!" /></p>

<p><em><strong>HOLY SHIT 5 FUCKIN KIDS ARE YOU KIDDING ME LOL??</strong></em></p>

<p>They say you should make and execute as many major life changes as possible in as short a time span as you can, right?</p>

<p>Hah.</p>

<p>They don&rsquo;t say this, because it is a lot. At this point I can&rsquo;t even recommend that people have kids, much less 5 of them.</p>

<p><img src="http://joelhooks.com/images/2017_review/romi_joel_2017.jpg" alt="selfie partner" /></p>

<p>I wouldn&rsquo;t change a thing though, and this little firecracker of a baby girl makes me smile every time I see her.</p>

<p><img src="http://joelhooks.com/images/2017_review/20258444_1583018338389007_5030645407557176293_n.jpg" alt="The fam." /></p>

<h2>They say the Lord giveth&hellip;</h2>

<p>One of the reasons I love living in the PWN is the closeness of my family. After 36 years in Texas, we were finally close enough to casually visit them. In the summer of 2016 we were able to spend a full week lounging at Loon Lake in Washington with my cousin Lizzie and her family.</p>

<p>It was wonderful. We looked forward to doing it year after year.</p>

<p><img src="http://joelhooks.com/images/2017_review/lizzie.jpg" alt="I miss you so much." /></p>

<p>On March 2017 Lizzie was killed in a sudden and random car crash.</p>

<p>Aunt Mary, Uncle Dave, Sarah, Jim, Luke, Andrew, Mable, Theo, and all the other people that cherished Lizzie and her love of life&hellip;</p>

<p>I love you.</p>

<p>I didn&rsquo;t want to cry today, but here I am.</p>

<p>Hug them.</p>

<h1>Back to work</h1>

<p>Through all of this joy and pain, I&rsquo;m privileged to have a stable growing business, that continues to provide a living wage for my family. The stability has meant that I&rsquo;ve been able to be there for my partner in a more meaningful way than I was with our previous 4 kids.</p>

<p>It means that when I was sad for a month, I could step away and take care of myself and my family without having to worry about how we would pay rent.</p>

<p>This year egghead has grown. We saw about 20% growth in revenue, and have added several amazing team members. We were able to afford 100% health coverage for our full-time employees and their families. This was huge for us, because having to worry about these things can be a real emotional drain.</p>

<p>The biggest challenge for me personally, as the director/orchestrator, has definitely been the team building. For the second year in a row <strong>I got it wrong</strong> and had to correct my mistakes. It&rsquo;s painful. It feels cruel. It makes me personally ashamed. It makes me sad.</p>

<p>But that&rsquo;s part of the deal. And I have to analyze what when wrong, and how I can correct the problems for the future in a way that saves people the turmoil that sudden job loss causes.</p>

<p>It <strong>has</strong> to work for me. The job <strong>has</strong> to satisfy me. I have to be selfish. I have to protect myself. I have to build something strong and resilient that can keep me entertained and fed for decades.</p>

<p>This has to be balanced with providing the same for others of course. If this thing that we are building is an &ldquo;engine of opportunity&rdquo;, a thing that provides amazing jobs to as many people as possible, it has to do that for me first.</p>

<p>Leadership is a <em>learned skill</em>, like almost everything. It&rsquo;s hard af, and the only thing I can do with the failures is try to learn from them so they don&rsquo;t get repeated.</p>

<h3>Doubling down on what works&hellip;</h3>

<p>egghead has evolved quite a lot in since John and I started it in 2013. In the beginning it was John &amp; Joel, but it quickly evolved into a platform for content creators (instructors) to publish their learning material and let us take care of marketing, delivery, and support.</p>

<p>The paying members of egghead are ostensibly our customers, but our true customers are the content creators.</p>

<p>Much of the year has been spent improving the experience for egghead&rsquo;s instructors so we can</p>

<ul>
<li>make the opportunity to instruct on egghead more accessible to more people</li>
<li>increase average instructor revenue in a meaningful way</li>
<li>provide a more consistent learning experience for egghead members</li>
</ul>


<p>Step one was to provide <a href="https://instructor.egghead.io/guide/">a written introduction and guide</a> for new (and existing) instructors to reference. The guide is a living document that we are able to reference and amend as the process evolves over time. We wrote it free and open to the world in the hopes that others might be able to benefit, regardless of how they choose to publish their work.</p>

<p>On top of this we did extensive work building software tools that provide a more consistent and clear experience for instructors when they publish their works.</p>

<p>It wasn&rsquo;t too long ago that I asked them to email me a link to a Dropbox folder and then manually did the rest. heh</p>

<h3>React ❤️</h3>

<p>In 2017 we made massive changes to our website and infrastructure, fully embracing the React JavaScript framework for our user interface.</p>

<p>It&rsquo;s been wonderful. Robust. Delightful to use.</p>

<p>At the end of the year we have a massive library of components across many many pages in production. It is easy to maintain and add new features.</p>

<p>I&rsquo;ve been developing UIs for 20+ years and React is by far the best developer experience I&rsquo;ve had.</p>

<p>It&rsquo;s great. We pair it with MobX. Also great.</p>

<h3>Throwing away perfectly good code.</h3>

<p>We approached this initially with an entirely different instructor website, but this idea ended up being confusing. There was on &ldquo;single source of truth&rdquo; to refer to, and it split development efforts across two distinct products.</p>

<p>After spending 6 months and many tens of thousands of dollars building out this multi-faceted approach, I had to make the tough call to kill the entire thing, effectively throwing all of that hard development and design work into the bin and starting fresh with a consolidated single-site approach.</p>

<p>That&rsquo;s a hard decision to make, but it was the right one. Now we are on track.</p>

<h3>UX Research</h3>

<p>We&rsquo;ve got the honor of working with a handful of amazing consultants. The biggest area that we choose to invest in is research.</p>

<p>User experience often gets lumped in to UI development and treated as a visual exercise.</p>

<p>Reality is that <strong>good user experience starts with research</strong>.</p>

<p>We need to understand our users and their needs.</p>

<p>For egghead, this is two-fold. We want to understand what our members need, and we absolutely need to understand what our instructors need.</p>

<p>So we hire professionals to help us.</p>

<p>This has worked out extremely well, and has lifted everything that we do. We aren&rsquo;t guessing, or using our intuition for every decision. We still guess and intuit, but we can now often refer to well executed research to feed and support the decisions we make.</p>

<p>High quality UX research is very expensive, and when you are bootstrapping a business, it can feel like it might be a waste.</p>

<p>&ldquo;Shouldn&rsquo;t we spend this money on development and get features out the door?&rdquo;</p>

<p>But, every time we&rsquo;ve done this the results for us have been overwhelmingly positive.</p>

<p>The trick is to actually use the research! Because it is such a large chunk of our operating costs, we deeply respect the work and use it to drive design and development in a direct and tangible way.</p>

<p>Knowledge is power. Knowledge is confidence.</p>

<p>More please.</p>

<h3>We started a podcast.</h3>

<p>My favorite show of 2017 has to be The Hot Ones, which is an interview show on YouTube where they eat progressively hotter chicken wings and ask famous people questions with each step. It&rsquo;s great.</p>

<p>There was <a href="https://www.youtube.com/watch?v=zl-X3dhooPM">an episode that featured Gary Vee</a>, who&rsquo;s a generally inspiring guy that has some serious skills making money online. He told Sean that it was crazy that he didn&rsquo;t have an audio version of the show, and it was a <em>click</em> moment for me.</p>

<p>I hopped on Slack and told John, &ldquo;we&rsquo;ve gotta do a podcast&rdquo;. His response:</p>

<p>&ldquo;Hah, I just finished that episode too and thought the same thing&rdquo;</p>

<p>So we did the needful and <a href="https://egghead.simplecast.fm/">got a podcast up and running</a>.</p>

<p>We made it easy on ourselves and used the excellent <a href="https://www.podcastmotor.com/">PodcastMotor</a> service, which is the rondo rotisserie grill of creating podcast. Coupled with Zencaster, it takes all the grueling production work out of the picture so John and I can focus on interviewing guests.</p>

<h3>Millions of emails</h3>

<p>I sent somewhere in the neighborhood of 10,000,000 emails in 2017. They all are attached to my work email and &ldquo;Joel from egghead&rdquo; is the sender.</p>

<p>This has been, and continues to be, extremely lucrative. Most of these emails are content announcements. I&rsquo;m letting people know that there is new stuff to watch. Everything we release is released free for a week before becoming member&rsquo;s only, so everybody has the chance to learn something.</p>

<p>2.5 million of those emails were sent in December for our end of the year extravaganza. We released 18 courses over 12 days. On the final day we sent 4 emails, and a last last last chance email on the day after the promo ended.</p>

<p>The last last chance email resulted in $50k in additional revenue, but it also pissed off at least a dozen angry men that sent me hateful responses.</p>

<p>I can live with that.</p>

<p>For the month of December 2017 we are cutting almost $250,000 in royalty checks to our instructors. A quarter of a million dollars into the pockets of hard working developers and open source contributors.</p>

<p>Feels good. Really good.</p>

<h1>It wasn&rsquo;t all work. Lots of fun too!</h1>

<p>Outside of work and the big life events, I had a lot of fun in 2017.</p>

<h3>Ink</h3>

<p>Once you get over the fact that you&rsquo;ve defaced your arms forever, it&rsquo;s way easier just to do more.</p>

<p>My approach to tattoo is to pick great artists and let them do what they want. I thematic suggestions, but every tattoo is part of an art collection that I carry around with me. It&rsquo;s an expression of the artist, and not a deep meaningful personal milestone.</p>

<p><img src="http://joelhooks.com/images/2017_review/joel_tats.jpg" alt="tattoo freakshow" /></p>

<p>The abstract colorful pieces are done by Winston the Whale in PDX. The wrapping undead crystal space dragon was done by Joby Cummings.</p>

<p>I&rsquo;ll probably get more.</p>

<h3>Wheels</h3>

<p>I traded in my beloved 2015 Subaru Impreza STI.</p>

<p><img src="http://joelhooks.com/images/2017_review/IMG_0312.JPG" alt="vroom vroom" /></p>

<p>It&rsquo;s such a great vehicle. Fast (enough), responsive, comfortable, and excellent in all road conditions. The spoiler is even useful when you are going too fast on winding roads (at the track, hopefully).</p>

<p>The intent originally was to hit the track more often, but after the one and only track event I participated in, I learned that it wasn&rsquo;t for me. It&rsquo;s a lot of work, very expensive, and has a non-trivial risk of death. It&rsquo;s also not fun for the whole family.</p>

<p>So, I got a Jeep.</p>

<p><img src="http://joelhooks.com/images/2017_review/IMG_0370.jpg" alt="wheelin" /></p>

<p>I&rsquo;ll be honest, driving the jeep around town isn&rsquo;t much fun. It&rsquo;s a truck. It&rsquo;s heavy. It&rsquo;s slow.</p>

<p><em>Every other vehicle in this reason is a Jeep.</em></p>

<p><strong>But</strong>, it&rsquo;s a shit load of fun driving on the trails.</p>

<p><img src="http://joelhooks.com/images/2017_review/IMG_0469.jpg" alt="at the top of the world with my boys" /></p>

<p>We are able to explore the backwoods that this wonderful region has to offer. We can go places that are hard to get to and see spectacular sights.</p>

<p>This Jeep is no fuckin&#8217; mall crawler.</p>

<p>Good times.</p>

<h3>Woodworking</h3>

<p>Working with wood is fascinating. From a tree to a useful object. It&rsquo;s something I&rsquo;ve wanted to do for a long time, and in 2017 I was able to try it out. I took a class at a local maker space in Portland (ADX), and built a small table.</p>

<p><img src="http://joelhooks.com/images/2017_review/IMG_0594.jpg" alt="hammer of justice" /></p>

<p>I finished the table early so I spent the last night of class constructing this joiner&rsquo;s mallet.</p>

<p>Now I&rsquo;m planning my garage shop, so I can dive in and make useful things from wood on a regular basis.</p>

<h3>Self-care</h3>

<p>I didn&rsquo;t gain much weight. At 43, I worry about death a lot. Being overweight contributes to that. I&rsquo;d like to lose weight in 2018. I know <strong>how</strong> to lose weight. I&rsquo;ve done it before. Candy is delicious&hellip; 😭</p>

<p>For the first time in 30+ years I don&rsquo;t have to wear corrective lenses! I got LASIK. It&rsquo;s awesome. <strong>DO IT</strong>. 100% worth it.</p>

<p><img src="http://joelhooks.com/images/2017_review/lasik_01.jpg" alt="four eyes" /></p>

<h3>Team gatherings</h3>

<p>egghead is 100% remote. That means we don&rsquo;t see each other in person very much. This summer we got together in Utah with most of the team.</p>

<p><img src="http://joelhooks.com/images/2017_review/IMG_0991.jpg" alt="" /></p>

<p>Living near Portland is nice because people actually visit here, unlike Fort Worth.</p>

<p>I got to prove to Taylor that his job at egghead wasn&rsquo;t an elaborate catfish.</p>

<p><img src="http://joelhooks.com/images/2017_review/IMG_2362.JPG" alt="new friends." /></p>

<p>And John and I finally had the opportunity to converge our families.</p>

<p><img src="http://joelhooks.com/images/2017_review/9D441857-8612-480B-BBAE-224A5E938654.jpg" alt="a good partner" /></p>

<p>Next year we are going to gather in Prague. Can&rsquo;t wait!</p>

<h3>Art Camp</h3>

<p>For the last several summers I&rsquo;ve gone to Aspen to Anderson Ranch to have Joshua Davis, the Dark Wizard of computer generated art, school me in his craft. In 2017 we worked on Arduinos, and I learned a ton. In 2018 we are going to do computer vision. Can&rsquo;t wait.</p>

<p><img src="http://joelhooks.com/images/2017_review/IMG_0161.jpg" alt="art is life" /></p>

<h3>THE PATH OF TOTALITY</h3>

<p>Holy shit. Total solar eclipse is really really amazing. If you&rsquo;ve got the opportunity to see it, do it. Fuck the traffic. Sit your ass in the long line of cars and witness this event.</p>

<p><img src="http://joelhooks.com/images/2017_review/IMG_0212.jpg" alt="total eclipse of the sun" /></p>

<h1>2018 Plans</h1>

<p>More of the same, really. We are going to keep doing what we are doing, incrementing, improving. Small changes. Nothing radical.</p>

<p>For the first time we&rsquo;ve got a solid 1 year plan for the business based on research.</p>

<p>We aren&rsquo;t going to have any more kids, or move across the country. We might get to travel a bit.</p>

<p>It should be nice.</p>

<p><img src="http://joelhooks.com/images/2017_review/IMG_0316.PNG" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why we hire consultants to help build egghead.io]]></title>
    <link href="http://joelhooks.com/blog/2017/10/26/why-we-hire-consultants-to-help-build-egghead-dot-io/"/>
    <updated>2017-10-26T13:09:00-07:00</updated>
    <id>http://joelhooks.com/blog/2017/10/26/why-we-hire-consultants-to-help-build-egghead-dot-io</id>
    <content type="html"><![CDATA[<p>Over the past few years we have built egghead.io from a relatively simple “video blog” and into a full blown platform for developers to publish their knowledge about software development as screencasts and get paid for it. The process has been intense! Every step of the way was a new road block labeled “NOW LEARN THIS”. Often with multiple new skills to learn at the same time. If you stop for a minute and consider what it takes to build an online business from scratch, your list would be similar to:</p>

<ul>
<li>Serverside Development</li>
<li>Frontend (UI) Development</li>
<li>Internet Marketing</li>
<li>Business</li>
<li>Accounting</li>
<li>Design</li>
<li>User Experience</li>
<li>Support</li>
<li>Analytics</li>
<li>Communications</li>
<li>Copywriting</li>
<li>…?</li>
</ul>


<p><strong>It’s really fucking daunting</strong>. As a “mild” perfectionist and planner with symptoms of OCD to proceed without first fully understanding the problem <strong>and</strong> knowing the proper, best-we-can-manage solution to the problem. To solve this, especially in the beginning when it is just you and the wide open internet is to:</p>

<ol>
<li>Buy all the books.</li>
<li>Read all the books.</li>
<li>Search for answers and opinions on the internet.</li>
<li>Combine all of the above into a composite solution for your specific problem.</li>
</ol>


<p>This takes a <em>long</em> time, depending on the scope and difficulty of what you want to build. It is required though, and as somebody that is trying to solve a non-trivial problem using software deployed to the internet you will need to be an expert in many things.</p>

<p>Wikipedia, Amazon, Kahn Academy, Safari Online…</p>

<p>It’s seriously amazing to be alive in this time of deep deep wealth of available information.</p>

<p>There are definitely other options. You can even take college courses, but that is dreadfully slow and it will delay making The Thing for sure, maybe forever. They don’t offer a degree that combines the list above, and it is very expensive.</p>

<p>Another option can be to take on a partner or partners. This is tricky, but you’ll often hear the story of a technically oriented person teaming up with a business savvy person to create a thing. Partnerships can be amazing and work out wonderfully, but they can also be horribly tragic and painful. Choose your partners well, and understand that (maybe most?) partnerships can end badly if expectations don’t meet reality.</p>

<p>Some combination of the above is going to be how you <strong>get started</strong> building your business. You’ll understand the principles of getting an audience built. Once you’ve got a group of people that appreciate your help and knowledge, you’ll sell them something small. Now, you’ve started to develop an income somewhere in the “hey, this pays the rent!” range, and you’ll have had interaction with your audience and understand their pain and suffering even more. Now it’s time to alleviate the pain, and build The Thing.</p>

<p>What’s The Thing? Who knows. If you start with an idea of the solution, you’ve basically tainted the whole process and will most likely become another sad case of “9 out of 10 small businesses fail” giving the rest of us a bad name. Right now what it is doesn’t matter, but the process remains the same.</p>

<p>Learning all of the skills needed to build a Platform of Audience Pain Relief at an expert level is an admirable goal. For a lifetime. That’s too long, so how can we speed that process up and serve our audience in more profound ways sooner?</p>

<p>Expert consultants. Individuals that bring years of experience, intelligent insight, and high level focus on the specific problems that your business craves. Consultants, <strong>good</strong> consultants, are highly paid to give you their undivided attention. The amazing world-class experts in their fields that would take you a decade of sad failures to fully understand what they can accomplish in a matter of weeks.</p>

<p>A good consultant will cost you thousands or tens of thousands of dollars <strong>per week</strong>, and when you see the proposal’s last page, it can be a bit of a gut shot. A good consultant can ultimately <strong>save you years</strong> and increase your earnings exponentially.</p>

<p>If you want to maximize the value you get out of your consultant engagement, it’s important to have a conversational knowledge of the area of expertise you are hiring a consultant for.  The more knowledge you have will help you identify specific problems that are beyond your current level, as well as interview and make sane decisions when you hire a consultant.</p>

<p>How to actually hire the good consultants is another essay ;)</p>

<h2>You hire a consultant as a teacher.</h2>

<p>If your hope is to hire an expensive consultant to “do their thing and leave” they will do that, and it could be just fine. Or…</p>

<p>L<strong>ook at your world-class consulting engagement as an opportunity to receive a condensed practical education from somebody in the top of their field in the context of your business.</strong></p>

<p>This approach can multiply your investment in hiring experts so much.</p>

<p>When you are paying a consultant $25-50k a week (sounds crazy, right?) and they are doing their work, you should be taking notes and asking questions.</p>

<p>Have you ever seen the show Kitchen Nightmares? You’ll notice one type of restaurant owner that always bickers with Gordon “fucking” Ramsay. You’ve got a world class chef and restauranteur standing in your kitchen giving you tips and techniques to lift your business and better serve your customer… and you’re gonna bicker with him?</p>

<p><img src="https://d2mxuefqeaa7sj.cloudfront.net/s_CE6FF3FC65E6A9460D730679A5296DFBBBD421B6C4D79EE26DC7661337FBF459_1506020006881_image.png" alt="" /></p>

<p>If you own a restaurant and Chef Ramsay is in your kitchen, you should be standing at attention, notepad poised, asking questions, and scribbling down the answers to study that night to ask more questions.</p>

<p>Don’t annoy the Chef, but learn, observe, and communicate where you want clarity. Take notes. Summarize in written documents. Ask questions async (email). Ask the expert to review your summaries. Use this time to your advantage.</p>

<p>If you consider your consultant as a prized guest lecturer there to demonstrate and teach you how to improve your business, they are money well spent.</p>

<h2>Building a team</h2>

<p>If things go as planned, you can start hiring experts to work with you full time. That can be an amazing experience, though you’ve also added “HR” to the list of skills you need to know and understand. You might fuck that up a few times too, as you learn about hiring and working with humans the hard way through trial and error.</p>

<p>Consultants are often hired to <strong>fix problems caused by poor early choices</strong>, which is fine and sometimes required. Consultants can also be hired to <strong>start new directions and ideas correctly.</strong></p>

<p>Once you’ve got a team in place, hiring consultants can continue to help educate the entire team, while filling in gaps with their expert knowledge. Now the team can be present and observe the work that occurs to draw upon and fill in their knowledge gaps. The team can summarize and discuss the work the consultant is doing, as well as participate in the feedback cycle and clarification.</p>

<p>Hiring a good consultant can uplift your business’s product <strong>and</strong> team and work as across the board multiplier to Platform of Audience Pain Relief. The team wins, the customers win, the consultant wins, and ultimately <strong>you</strong> win too.</p>

<h2>What if it goes bad?</h2>

<p>It’s not all roses. Engagements can go wrong. You might end up feeling a little sad or disappointed if your expectations don’t reflect the outcomes. At that point, it’s time for some reflection and understanding. Was it a total loss? Are the gains not apparent yet? Were we attacking the wrong problems at the wrong time?</p>

<p>It’s a learning experience. Don’t bet the farm on a consulting engagement! It’s an intermediate to advanced technique, which in itself is on the (ever-growing) list of skills you probably need to have.</p>

<p>If you learn something, the odds are that a bad consulting engagement is a low-key win you and the business.</p>

<p>Keep going.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016 was amazing. Best year yet.]]></title>
    <link href="http://joelhooks.com/blog/2017/01/02/2016-was-amazing-best-year-yet/"/>
    <updated>2017-01-02T11:59:00-08:00</updated>
    <id>http://joelhooks.com/blog/2017/01/02/2016-was-amazing-best-year-yet</id>
    <content type="html"><![CDATA[<p>2016 as a year took a lot of criticism as a year. Beloved celebrities died in a seemingly endless parade of &ldquo;noooooooo&rdquo;. We were subjected to a painful and divisive US federal election cycle, which resulted in another shameless ass-clown getting elected to the highest office in the land. The entire internet appears to be on fire with rage and hate.</p>

<p>Shit is tough all over. 💩</p>

<p>If you look closely enough you might notice that mankind is doing better than we&rsquo;ve ever done. We&rsquo;ve definitely got a TMI problem, and our collective brains are still learning how to deal with that. It will likely get worse before things improve though as the radical advances in global communication via the internet is the single biggest thing to collectively happen to us&hellip; ever.</p>

<p>For me, personally, 2016 was amazing. Filled with new experiences and personal bests. There were a few rough patches too, everything didn&rsquo;t go as expected. Overall though, amazing&hellip;</p>

<h2>Big changes&hellip;</h2>

<p>For 36 years I lived in North Texas. That&rsquo;s plenty of time to soak up everything that North Texas has to offer. After a 15 year sales-pitch my lovely partner Kristina finally relented and we bought a house in Southwest Washington (Vancouver). Now my home office has this view:</p>

<p><img src="https://d3vv6lp55qjaqc.cloudfront.net/items/110Z0a3X3g1p1s262C40/Screen%20Shot%202017-01-02%20at%203.20.58%20PM.png?v=edc2f669" alt="" /></p>

<p>Not bad! 😉</p>

<p>Moving is hard af. Logistically, we are a family of 6 people. We lived in our house for well over a decade. There is a sheer volume of stuff that accumulates over that time that is staggering. We had a feeling for a year or so that we&rsquo;d be making the move, so we worked hard tossing all of our crap into the donation bin and trying to get the house ready to go. It wasn&rsquo;t enough, and we still had a 2/3rds of a full size tractor-trailer filled with our stuff.</p>

<p>But, the move was a freight train. We bought a house, had extensive renovations done, and there was no turning back. It was an experience that I wouldn&rsquo;t be excited to do again. The result has been fantastic and the family is adjusting to the new location. We had an amazing summer with constant visitors filling our house with family and friends.</p>

<p>While we lost the day to day interaction with our Texas peeps, having visitors is awesome because we get to have a full-on all-day everyday cohabitation experience. In some ways that offers more closeness than regional proximity offers.</p>

<p>It&rsquo;s been a real treat to be back in the Pacific Northwest with my family. I was born up here, and most of family is in the area, so the move has allowed us to get some solid hang time. It&rsquo;s cool to get to know them better and have our kids immersed in that side of the family.</p>

<p>For Kristina it has been much more difficult. Out of all of us she has made the biggest sacrifice. Her Texas roots run very deep. Everybody has had to adjust to the changes, but her reality was completely shattered, moved across the country, and glued back together. Learning how to deal with her family now being thousands of miles away. New house. In-laws. And to top it off we&rsquo;ve got a baby due in February 2017 😳</p>

<p>They say you shouldn&rsquo;t make big life decisions after a big move like this, but we said, &ldquo;fuck it&rdquo; and decided to add another member to our family. So almost immediately after we got moved in, after a 10 year break from infants, we are embarking on a new chapter with our 5th child. lol</p>

<p>You only live once y&#8217;all!</p>

<h2>New Tattoo&hellip;</h2>

<p>I broke the short sleeve barrier and got a new tattoo from Joby Cummings in Dallas the day before we left town.</p>

<p><img src="https://d3vv6lp55qjaqc.cloudfront.net/items/3O35212q170B261f1v0V/Screen%20Shot%202017-01-02%20at%203.22.33%20PM.png?v=afaf0060" alt="" /></p>

<h2>Lost a homie&hellip;</h2>

<p>One of my oldest and best friends passed away this year. Pete Davidson was like a brother to me. In my teen years, I had a hard time, and he was always there. We saw the Beastie Boys together on the Licensed to Ill tour, and were constant companions through high school.</p>

<p>Over the last few years work has afforded me the opportunity to travel a bit, and a frequent destination was Denver, where Pete loved living for the past two decades. It was really great to have the opportunity to reconnect with my good friend, and his sudden loss was a huge blow.</p>

<p>Friends, good friends, the kind that let you just be yourself, are few and far between and should be cherished.</p>

<p>In June Pete organized a trip to Jamaica with a few friends. It was a lot of fun, and something that I&rsquo;ll always have to remember him by.</p>

<p><img src="https://d3vv6lp55qjaqc.cloudfront.net/items/030U2Y3y3v1E3P0G3U17/Screen%20Shot%202017-01-02%20at%203.38.55%20PM.png?v=b18fc58f" alt="" /></p>

<p>Love you brother, will miss you always.</p>

<h2>So much fun&hellip;</h2>

<p>Portland gets <strong>all of the live music</strong> and we went to many many shows. Kristina has stuck with me with out unborn child coming along for the ride. It&rsquo;s been rad.</p>

<p>We played a lot of games, visited the ocean a bunch of times, hiked dozens of trails, went to NYC and saw Hamilton, ate endless bowls of ramen noodles, and generally had an amazing family adventure all year long. ❤️</p>

<p><img src="https://d3vv6lp55qjaqc.cloudfront.net/items/1E2e0Z2W3s2s08072U2e/Screen%20Shot%202017-01-02%20at%203.37.30%20PM.png?v=44c55b23" alt="" /></p>

<h2>Taking care of business&hellip;</h2>

<p>Professionally 2016 was awesome. There were a couple of rough patches, but overall egghead.io keeps growing and improving in an incremental way and I couldn&rsquo;t be more pleased with how it is shaping up.</p>

<p>Work is important. I love to work, but I&rsquo;ve also spent most of my adult life under-achieving in a cycle of boredom and resulting depression. This business that we&rsquo;ve built has allowed me to completely alter how I approach working in a radical way. I work when I want. I work on what I want. I have the opportunity to make consistent and constant improvements to a thing that helps other people achieve their goals and improve their lives.</p>

<p>It&rsquo;s wonderful, and something that I take intense pride in.</p>

<p>The biggest challenges have been related to building the team behind the business. When it&rsquo;s just you working on the thing with maybe the occasional contractor things are straight forward and &ldquo;easy&rdquo; to navigate. That&rsquo;s fine, and maybe enough, but I&rsquo;m nothing if not ambitious, and I&rsquo;ve got a grand vision that would take me 200 years to build without help.</p>

<p>We are building a world class platform for smart people to deliver curated training content via bite-sized videos.</p>

<p>That requires a team of smart people to make it happen.</p>

<p>To make it challenging we also want to build an entirely remote workforce, where the team can work, play, and live wherever they want.</p>

<p>In the past year we&rsquo;ve added an amazing illustrator, a wonderful human to interact more directly with instructors, and an awesome developer. We&rsquo;ve also hired two of our part-time &ldquo;interns&rdquo; as full-time employees to fill out our content excellence team and work on site features for our users. As of Jan 1st, 2017 we have 9 amazing people working on egghead.io full-time.</p>

<p>It blows my freaking mind to see it everyday as people discuss what they are working on in our chat room. Like &ldquo;holy shit, this thing is getting built!&rdquo;</p>

<p>In 2017 we are going to double-down on a research driven approach to user experience. Accelerating development of both site features for instructors and users, as well as our content offerings.</p>

<p>I&rsquo;ve found that I get a lot of personal fulfillment helping other people achieve success in their work lives. The way we work is fundamentally broken, and there are opportunities to break out of the shackles of the 9-5 grind. That is a big motivator for me with egghead.io as we facilitate radical lifestyle changes for many of our instructors. In December 2016 we paid out over $100,000 in direct royalties to our instructors. I&rsquo;m beaming with pride here, as that is an amazing accomplishment.</p>

<p>I want to help people. I want to provide opportunity for other humans. I want to share what I know and facilitate success for as many people as possible.</p>

<p>2017 is going to be more of this. More fun, more ramen, more travel, a new baby, helping people, sharing knowledge, more hugs, more games, more tattoos, new friends, time with old friends, family, visitors&hellip; ❤️</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting goals for (my version of) success.]]></title>
    <link href="http://joelhooks.com/blog/2016/04/08/setting-goals-for-my-version-of-success/"/>
    <updated>2016-04-08T14:35:00-07:00</updated>
    <id>http://joelhooks.com/blog/2016/04/08/setting-goals-for-my-version-of-success</id>
    <content type="html"><![CDATA[<p>There is this amazing conference in Las Vegas once a year called MicroConf. It&rsquo;s a gathering of like-minded entrepreneurs that (for the most part) are boot-strapping their business. This means that they aren&rsquo;t taking outside investment, specifically of the venture capital variety. It&rsquo;s a spectacular event, with interesting talks, fun parties, and amazing conversations.</p>

<p>At one of the talks this year, the audience was told something to the effect of &ldquo;If you aren&rsquo;t meeting this metric, your business is on fire and you should probably quit.&rdquo;</p>

<p>The question and answer section of the talk was filled with panicked questions from business owners who were in the &ldquo;lol, fail&rdquo; spectrum of the metric.</p>

<p>Egads! My business actually falls in that range too!</p>

<p>Am I a failure because my &ldquo;<a href="https://en.wikipedia.org/wiki/Churn_rate">churn rate</a>&rdquo; is high?</p>

<p>The answer is &ldquo;no? maybe? probably not.&rdquo;</p>

<p>The talk has made me consider the factors contributing to the idea of what a success is. It&rsquo;s obvious that success is different for each person and/or business. What does success mean for <strong>me</strong>?</p>

<h3>What metric determines success?</h3>

<p>There are many paths to success, and for me that path doesn&rsquo;t involve the typical trappings one might envision as required to be successful. Yachts, cars, mansions, a private island, a private party with Kanye&hellip; none of these hold my interest. For me, success means that I look forward to my day, and don&rsquo;t dread tomorrow. Success is being able to spend weeks doing absolutely nothing, and not feeling stressed or guilty about it. My success is directly related to the amount of <strong>free time</strong> that I have to spend with my family and friends.</p>

<p>I love nice things! Don&rsquo;t get me wrong, but the primary success indicator for me, however, is not <strong>maximizing revenue</strong>. My success metric is <strong>maximizing free time</strong>. The ability to do <strong>whatever the fuck I want</strong>.</p>

<p>These two factors overlap quite a bit. I get a big kick out of running a business. It&rsquo;s actually quite a bit of fun, but as it happens, there is a lot of revenue potential &ldquo;left on the table&rdquo; because I <em>just don&rsquo;t feel like doing the activities that are required to make more money</em>.</p>

<p>It would dig into my free time, or I don&rsquo;t want to be an expert in a particular subject area. Maybe it is something that I consider boring and don&rsquo;t want to have anything to do with.</p>

<p>It&rsquo;s hard to express how much I appreciate the privilege that I enjoy to live the life <em>I</em> choose. Not everybody does.</p>

<h3>Setting professional goals.</h3>

<p>If &ldquo;all the money&rdquo; isn&rsquo;t the goal, what is?</p>

<ul>
<li>To use my success and privilege to help other people gain the freedom and joy that comes from maximizing free time.</li>
<li>To build a team of awesome humans that get to work on awesome projects and accomplish meaningful work.</li>
<li>To help others come to realize that work isn&rsquo;t who we are, but it can be an interesting and engaging part of how we spend our time.</li>
</ul>


<p>For most of my life I&rsquo;ve defined my goals with respect to specific dollar amounts. That is more tangible, more concrete. Monetary goals make sense, and provide a very clear metric that you either hit or don&rsquo;t.</p>

<p>For me, those goals have shifted away from specific dollar amounts, and into experiences and relationships I&rsquo;d like to build. Into looking at money as a vehicle for facilitating free time. Time to relax and enjoy the brief glimmer of existence that I&rsquo;ve been granted on Earth, and help others do the same.</p>

<p>I&rsquo;m looking forward to working towards these new goals. It&rsquo;s exciting, and fills me with joy.</p>

<p><img src="http://joelhooks.com/images/kickback.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build an Image Gallery Using React, Redux and redux-saga]]></title>
    <link href="http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga/"/>
    <updated>2016-03-20T15:57:00-07:00</updated>
    <id>http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga</id>
    <content type="html"><![CDATA[<h1>Building an Image Gallery</h1>

<p>The image gallery we will build is a simple application that displays an array of image URLs loaded from a service (Flickr), and allows the user to select them individually.</p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/3v0l00410J1Z1j310b24/Screen%20Shot%202016-03-20%20at%203.42.17%20PM.png?v=1b32daca" alt="" /></p>

<p>It will be built with React, using Redux and redux-saga. React is being used as the core framework to take advantage of its virtual-dom implementation. Redux will handle the management of state within the application. Finally, we will use redux-saga to handle the complexity of asynchronous sequences.</p>

<p>We will write the gallery in ES6 (arrow functions, modules, and template strings!), so we will need to do a bit of project setup to get going.</p>

<h2>Project Setup and Automation</h2>

<p>There is a significant array of options when it comes to getting started with a React application. For this simple app, we want to keep it as minimal as possible. We are going to use Babel to transpile ES6 into good ol’ ES5 for the browser, budo/browserify to serve it locally, and tape to test.</p>

<p>Create a file called <code>package.json</code> in a new project folder and add the following contents to it:</p>

<h3>package.json</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;egghead-react-redux-image-gallery&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;Redux Saga beginner tutorial&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;main&quot;</span><span class="o">:</span> <span class="s2">&quot;src/main.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;test&quot;</span><span class="o">:</span> <span class="s2">&quot;babel-node ./src/saga.spec.js | tap-spec&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="s2">&quot;budo ./src/main.js:build.js --dir ./src --verbose  --live -- -t babelify&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;repository&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;url&quot;</span><span class="o">:</span> <span class="s2">&quot;git+https://github.com/joelhooks/egghead-react-redux-image-gallery.git&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;author&quot;</span><span class="o">:</span> <span class="s2">&quot;Joel Hooks &lt;joelhooks@gmail.com&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;license&quot;</span><span class="o">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;babel-polyfill&quot;</span><span class="o">:</span> <span class="s2">&quot;6.3.14&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;react&quot;</span><span class="o">:</span> <span class="s2">&quot;^0.14.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;react-dom&quot;</span><span class="o">:</span> <span class="s2">&quot;^0.14.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;react-redux&quot;</span><span class="o">:</span> <span class="s2">&quot;^4.4.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;redux&quot;</span><span class="o">:</span> <span class="s2">&quot;^3.3.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;redux-saga&quot;</span><span class="o">:</span> <span class="s2">&quot;^0.8.0&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;devDependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;babel-cli&quot;</span><span class="o">:</span> <span class="s2">&quot;^6.1.18&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;babel-core&quot;</span><span class="o">:</span> <span class="s2">&quot;6.4.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;babel-preset-es2015&quot;</span><span class="o">:</span> <span class="s2">&quot;^6.1.18&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;babel-preset-react&quot;</span><span class="o">:</span> <span class="s2">&quot;^6.1.18&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;babel-preset-stage-2&quot;</span><span class="o">:</span> <span class="s2">&quot;^6.1.18&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;babelify&quot;</span><span class="o">:</span> <span class="s2">&quot;^7.2.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;browserify&quot;</span><span class="o">:</span> <span class="s2">&quot;^13.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;budo&quot;</span><span class="o">:</span> <span class="s2">&quot;^8.0.4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;tap-spec&quot;</span><span class="o">:</span> <span class="s2">&quot;^4.1.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;tape&quot;</span><span class="o">:</span> <span class="s2">&quot;^4.2.2&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the <code>package.json</code> in place, you can run <code>npm install</code> in the project folder and install all of the dependencies that we will need.</p>

<p>We&rsquo;re also going to need to configure Babel with a <code>.babelrc</code> file in the project folder that contains the Babel presets that we want to use:</p>

<h3>.babelrc</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;presets&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;es2015&quot;</span><span class="p">,</span> <span class="s2">&quot;react&quot;</span><span class="p">,</span> <span class="s2">&quot;stage-2&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This file tells babel that we will be using ES2015 (ES6), React, and stage-2 features of the emerging ECMAScript standard (ES2016).</p>

<p>The <code>package.json</code> has two standard scripts configured called <code>start</code> and <code>test</code>. For right now, we want to get <code>start</code> working so we can load the application. The <code>start</code> script is currently configured to look inside of a folder called <code>src</code> so <em>create a folder called <code>src</code></em> in the project directory and add the following files:</p>

<h3>index.html</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>egghead: React Redux Image Gallery<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;styles.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;title&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://cloud.egghead.io/2G021h3t2K10/download/egghead-logo-head-only.svg&quot;</span> <span class="na">class=</span><span class="s">&quot;egghead&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h3&gt;</span>Egghead Image Gallery<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;root&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;build.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>main.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="s2">&quot;babel-polyfill&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">React</span><span class="o">!&lt;</span><span class="err">/h1&gt;,</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>styles.css</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-family</span><span class="o">:</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="n">Arial</span><span class="o">,</span> <span class="n">Sans</span><span class="o">-</span><span class="n">Serif</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.title</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">2px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.egghead</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.image-gallery</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>
</span><span class='line'>    <span class="n">flex</span><span class="o">-</span><span class="k">direction</span><span class="o">:</span> <span class="n">column</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">darkgray</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.gallery-image</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">250px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>
</span><span class='line'>    <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>    <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.gallery-image</span> <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">max-height</span><span class="o">:</span> <span class="m">250px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.image-scroller</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>
</span><span class='line'>    <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">around</span><span class="p">;</span>
</span><span class='line'>    <span class="k">overflow</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>    <span class="k">overflow-y</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.image-scroller</span> <span class="nt">img</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">1px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>index.html</code> loads the <code>styles.css</code> to give us some basic styling/layout. It also loads the script <code>build.js</code>, which is a <em>generated</em> file. Our <code>main.js</code> is a very basic React application that renders an <code>h1</code> into the <code>#root</code> element inside of <code>index.html</code>. With these files in place, you should now be able to run <strong><code>npm start</code></strong> in the project folder and navigate to <a href="http://10.11.12.1:9966/">http://10.11.12.1:9966/</a> and see the following:</p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/2I1V0o2c1d281f3i3408/Screen%20Shot%202016-03-20%20at%204.31.06%20PM.png?v=1720e99d" alt="" /></p>

<p>Now we will build the base <code>Gallery</code> React component.</p>

<h2>Displaying some images in the gallery.</h2>

<p>First thing&rsquo;s first, and we want to get some images displayed as quickly as possible! We will create a <code>Gallery</code> component that will display our images. In the project folder, create a file called <code>Gallery.js</code> with the following contents.</p>

<h3>Gallery.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span><span class="nx">Component</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">flickrImages</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg&quot;</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">Gallery</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">images</span><span class="o">:</span> <span class="nx">flickrImages</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">selectedImage</span><span class="o">:</span> <span class="nx">flickrImages</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="p">{</span><span class="nx">images</span><span class="p">,</span> <span class="nx">selectedImage</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;image-gallery&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;gallery-image&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="p">{</span><span class="nx">selectedImage</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;image-scroller&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">images</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">image</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">index</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="p">{</span><span class="nx">image</span><span class="p">}</span><span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>          <span class="p">))}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve hard coded an array of data into this component, which is a great way to start working quickly. The <code>Gallery</code> extends <code>Component</code>, and in its constructor we set the initial state of the component. Finally, we render a basic structure with some styled markup. The <code>image-scroller</code> element uses the images array to produce multiple elements using <code>map</code>.</p>

<p>With the <code>Gallery</code> created, we can update <code>main.js</code> to load the gallery:</p>

<h3>main.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import &quot;babel-polyfill&quot;
</span><span class='line'>
</span><span class='line'>import React from &#39;react&#39;
</span><span class='line'>import ReactDOM from &#39;react-dom&#39;
</span><span class='line'>
</span><span class='line'><span class="gi">+ import Gallery from &#39;./Gallery&#39;</span>
</span><span class='line'>
</span><span class='line'>ReactDOM.render(
</span><span class='line'><span class="gd">-  &lt;h1&gt;Hello React!&lt;/h1&gt;,</span>
</span><span class='line'><span class="gi">+  &lt;Gallery /&gt;,</span>
</span><span class='line'>  document.getElementById(&#39;root&#39;)
</span><span class='line'>);
</span></code></pre></td></tr></table></div></figure>


<p>For now, we are using the hard-coded image URLs (via the <code>flickrImages</code> array), and displaying the first image url as the <code>selectedImage</code>. We&rsquo;re accessing these properties by setting a default initial state within the <code>Gallery</code> component class constructor.</p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/1T3G3p3T2q2H00472T1C/Screen%20Shot%202016-03-20%20at%204.51.14%20PM.png?v=afdd9bf7" alt="" /></p>

<p>We can add interactivity to the gallery with an event handler that calls the <code>setState</code> method on the <code>Gallery</code> component:</p>

<h3>Gallery.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>export default class Gallery extends Component {
</span><span class='line'>  constructor(props) {
</span><span class='line'>    super(props);
</span><span class='line'>    this.state = {
</span><span class='line'>      images: flickrImages,
</span><span class='line'>      selectedImage: flickrImages[0]
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'><span class="gi">+  handleThumbClick(selectedImage) {</span>
</span><span class='line'><span class="gi">+    this.setState({</span>
</span><span class='line'><span class="gi">+      selectedImage</span>
</span><span class='line'><span class="gi">+   })</span>
</span><span class='line'><span class="gi">+  }</span>
</span><span class='line'>  render() {
</span><span class='line'>    const {images, selectedImage} = this.state;
</span><span class='line'>    return (
</span><span class='line'>      &lt;div className=&quot;image-gallery&quot;&gt;
</span><span class='line'>        &lt;div className=&quot;gallery-image&quot;&gt;
</span><span class='line'>          &lt;div&gt;
</span><span class='line'>            &lt;img src={selectedImage} /&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>        &lt;div className=&quot;image-scroller&quot;&gt;
</span><span class='line'>          {images.map((image, index) =&gt; (
</span><span class='line'><span class="gd">-            &lt;div key={index}&gt;</span>
</span><span class='line'><span class="gi">+            &lt;div key={index} onClick={this.handleThumbClick.bind(this,image)}&gt;</span>
</span><span class='line'>              &lt;img src={image}/&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>          ))}
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>By adding <code>handleThumbClick</code> to the <code>Gallery</code> component class, we can access it in any elements <code>onClick</code> method. Note that we are using <code>bind(this,image)</code> in the <code>onClick</code>. By passing <code>image</code> as the second argument, it is sent as the first argument to <code>handleThumbClick</code>. This use of bind is an extermely handy way to pass <em>context</em> to an event handler.</p>

<p>Looking good! Now we have some interaction, and something that resembles an &ldquo;app&rdquo;. Now that we&rsquo;ve dealt with getting the application running and displaying data, we can consider loading some remote data. The most obvious place to do that is one of the React component lifecycle methods. We will use <code>componentDidMount</code> and make a call to the Flickr API and load some images:</p>

<h3>Gallery.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>export default class Gallery extends Component {
</span><span class='line'>  constructor(props) {
</span><span class='line'>    super(props);
</span><span class='line'>    this.state = {
</span><span class='line'>      images: flickrImages,
</span><span class='line'>      selectedImage: flickrImages[0]
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'><span class="gi">+  componentDidMount() {</span>
</span><span class='line'><span class="gi">+    const API_KEY = &#39;a46a979f39c49975dbdd23b378e6d3d5&#39;;</span>
</span><span class='line'><span class="gi">+    const API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.+getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5`;+</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+    fetch(API_ENDPOINT).then((response) =&gt; {</span>
</span><span class='line'><span class="gi">+      return response.json().then((json) =&gt; {</span>
</span><span class='line'><span class="gi">+        const images = json.photos.photo.map(({farm, server, id, secret}) =&gt; { </span>
</span><span class='line'><span class="gi">+            return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`</span>
</span><span class='line'><span class="gi">+        });</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+        this.setState({images, selectedImage: images[0]});</span>
</span><span class='line'><span class="gi">+      })</span>
</span><span class='line'><span class="gi">+    })</span>
</span><span class='line'><span class="gi">+  }</span>
</span><span class='line'>[...]
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve added a new method to the Gallery class. We are using React&rsquo;s <code>componentDidMount</code> lifecycle method to trigger the loading of data from Flickr. Lifecycle methods are called by React at specific times in a component&rsquo;s lifecycle. In this case, the method will be called whenever the component is added to the DOM. Note that the Gallery component is only added to the DOM once, so this will give us our initial load of images. For a more dynamic component that is loaded and unloaded over an application&rsquo;s lifecycle, this might cause excessive service calls or other unforeseen results.</p>

<p>We are using the <code>fetch</code> browser API to make a request to Flickr. Fetch returns a promise that resolves with <code>response</code> object. Calling <code>response.json()</code> gives us another promise, which is the actual JSON result we are looking for. We&rsquo;ll map over the photos to create an array of Flickr image urls.</p>

<blockquote><p>Let&rsquo;s be honest. This application is simple. We could stop right here and we&rsquo;d have the basic requirements done. Maybe we add an error handler in the fetch promise chain, some logic to see if there are images and <em>DONE!</em> At this point you really have to stop and use your imagination a bit. Simple requirements rarely last in the real world. Soon the application will grow as feature requests roll in. Authentication, a slide show, the ability to load different galleries and images sets&hellip; This <strong>is not</strong> good enough.</p></blockquote>

<p>So now that we have a working image gallery using React, we can start thinking about the foundation of patterns that we want to use to grow the application over time. The first order of business is to take away the <code>Gallery</code> component&rsquo;s power to control the state of the application.</p>

<p>We are going to introduce Redux to manage state instead, so let&rsquo;s get that setup.</p>

<h2>Using Redux to manage state</h2>

<p>Anytime you use <code>setState</code> in your application <em>you&rsquo;ve allowed the Component to become stateful</em>. While this isn&rsquo;t always bad, it can lead to some confusing application code over time, with state management spread from top to bottom in your application.</p>

<p>The Flux architecture is one solution that was introduced to help alleviate this. Flux moves logic and state into Stores. Stores are updated when Actions are dispatched in the application. Updates to Stores will trigger Views to be rendered with the new state.</p>

<p>So why not just drop in Flux? It&rsquo;s &ldquo;official&rdquo; architecture after all.</p>

<p>Well, <strong>Redux is basically Flux</strong>, but with some distinct advantages. Here&rsquo;s what <a href="http://stackoverflow.com/a/32920459/87002">Dan Abramov (the creator of Redux) has to say</a>:</p>

<blockquote><p>Redux is not that different from Flux. Overall it&rsquo;s the same architecture, but Redux is able to cut some complexity corners by using functional composition where Flux uses callback registration.</p>

<p>It&rsquo;s not fundamentally different, but I find it that Redux makes certain abstractions easier, or at least possible to implement, that would be hard or impossible to implement in Flux.</p></blockquote>

<p>The <a href="http://redux.js.org/">Redux documentation</a> is great. Dan is a truly gracious and inspiring individual. If you haven&rsquo;t <a href="https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6#.7cra4lukv">read the code cartoons</a> or watched <a href="https://egghead.io/series/getting-started-with-redux">Dan&rsquo;s free egghead.io series</a>, now is the time!</p>

<h3>Bootstrapping Redux</h3>

<p>The first thing we need to do is get Redux bootstrapped and running in our application. We don&rsquo;t have to install anything, that was all taken care of when we ran <code>npm install</code>, but we do need to import and configure Redux.</p>

<p><strong>The reducer function is the brain of Redux</strong>. When an action is dispatched by the application, the reducer receives the action and creates the piece of application state that the reducer owns. Since <strong>reducers are pure functions</strong>, they can be composed together to create the complete state of the application. Let&rsquo;s create a simple reducer in the <code>src</code> folder:</p>

<h3>reducer.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">images</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A reducer function is a function that takes two arguments.</p>

<ul>
<li><code>state</code> &ndash; this is the data that represents the state of the application. The reducer function will use this state to construct the new state. If no state has changed as result of the action, the reducer will simply return the state input.</li>
<li><code>action</code> &ndash; the event that has triggered the reducer. Actions are dispatched by the store, and handled by reducers. The action is required to have a <code>type</code> property that the reducer uses to apply changes to the new application state.</li>
</ul>


<p>For right now, the <code>images</code> reducer will log to the console to prove that it is connected and ready for work. To use the reducer we need to configure redux in <code>main.js</code>:</p>

<h3>main.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import &quot;babel-polyfill&quot;;
</span><span class='line'>
</span><span class='line'>import React from &#39;react&#39;;
</span><span class='line'>import ReactDOM from &#39;react-dom&#39;;
</span><span class='line'>
</span><span class='line'>import Gallery from &#39;./Gallery&#39;;
</span><span class='line'>
</span><span class='line'><span class="gi">+ import { createStore } from &#39;redux&#39;</span>
</span><span class='line'><span class="gi">+ import reducer from &#39;./reducer&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="gi">+ const store = createStore(reducer);</span>
</span><span class='line'>
</span><span class='line'><span class="gi">+ import {Provider} from &#39;react-redux&#39;;</span>
</span><span class='line'>
</span><span class='line'>ReactDOM.render(
</span><span class='line'><span class="gi">+  &lt;Provider store={store}&gt;</span>
</span><span class='line'>    &lt;Gallery /&gt;
</span><span class='line'><span class="gi">+  &lt;/Provider&gt;,</span>
</span><span class='line'>  document.getElementById(&#39;root&#39;)
</span><span class='line'>);
</span></code></pre></td></tr></table></div></figure>


<p>We are going to import the <code>createStore</code> function from the Redux library. <code>createStore</code> is used to create the Redux store. For the most part, we don&rsquo;t interact directly with the store, it is something that Redux manages for us behind the scenes.</p>

<p>We also need to import the reducer function that we&rsquo;ve just created so that it can be delivered to the store.</p>

<p>We will use <code>createStore(reducer)</code> to configure the store with our application&rsquo;s reducer. This example only has a single reducer, but <code>createStore</code> can take multiple reducers arguments. More on that a bit later!</p>

<p>Finally we import the higher-order <code>Provider</code> component from <code>react-Redux</code>. This will wrap our <code>Gallery</code> so that we can make easy use of Redux. We need to pass the store we just created to the <code>Provider</code> so that it can use it for us. You could use Redux without <code>Provider</code>, and in fact, React isn&rsquo;t required to use Redux at all! That&rsquo;s wonderful, but we are going to use <code>Provider</code> because it is very convenient.</p>

<p>If you open your developer tools console, you should see a message!</p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/2R3b143J1Y3T400i2c0w/Screen%20Shot%202016-03-20%20at%206.32.23%20PM.png?v=ba488b8e" alt="" /></p>

<p>It may be a bit mysterious, but shows off an interesting point of Redux. <em>All reducers receive all actions that are dispatched in the application.</em> In this case we are seeing an action that Redux itself dispatches.</p>

<h3>Connecting the gallery component</h3>

<p>With Redux, we will use the concept of &ldquo;connected&rdquo; and &ldquo;un-connected&rdquo; components. A connected component is wired into the store, and coordinates and controls action events and the store. Usually a connected component will have children that are &ldquo;pure components&rdquo; that take data as input, and render when that data is updated. These children are unconnected components.</p>

<blockquote><p><strong>note:</strong> While React and Redux play very well together, React is <em>not</em> required for Redux. You can use Redux without React!</p></blockquote>

<p>react-redux provides a convenient wrapper for React components that does most of the heavy lifting required to connect a React component to a Redux store. We will add that to <code>Gallery</code> and make it our primary connected component:</p>

<h3>Gallery.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import React, {Component} from &#39;react&#39;
</span><span class='line'><span class="gi">+import {connect} from &#39;react-redux&#39;;</span>
</span><span class='line'>
</span><span class='line'><span class="gd">-export default class Gallery extends Component {</span>
</span><span class='line'><span class="gi">+export class Gallery extends Component {</span>
</span><span class='line'>  constructor(props) {
</span><span class='line'>    super(props);
</span><span class='line'><span class="gi">+    console.log(props);</span>
</span><span class='line'>    this.state = {
</span><span class='line'>      images: []
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  componentDidMount() {
</span><span class='line'>    const API_KEY = &#39;a46a979f39c49975dbdd23b378e6d3d5&#39;;
</span><span class='line'>    const API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5`;
</span><span class='line'>
</span><span class='line'>    fetch(API_ENDPOINT).then((response) =&gt; {
</span><span class='line'>      return response.json().then((json) =&gt; {
</span><span class='line'>        const images = json.photos.photo.map(({farm, server, id, secret}) =&gt; {
</span><span class='line'>            return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`
</span><span class='line'>        });
</span><span class='line'>
</span><span class='line'>        this.setState({images, selectedImage: images[0]});
</span><span class='line'>      })
</span><span class='line'>    })
</span><span class='line'>  }
</span><span class='line'>  handleThumbClick(selectedImage) {
</span><span class='line'>    this.setState({
</span><span class='line'>      selectedImage
</span><span class='line'>    })
</span><span class='line'>  }
</span><span class='line'>  render() {
</span><span class='line'>    const {images, selectedImage} = this.state;
</span><span class='line'>    return (
</span><span class='line'>      &lt;div className=&quot;image-gallery&quot;&gt;
</span><span class='line'>        &lt;div className=&quot;gallery-image&quot;&gt;
</span><span class='line'>          &lt;div&gt;
</span><span class='line'>            &lt;img src={selectedImage} /&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>        &lt;div className=&quot;image-scroller&quot;&gt;
</span><span class='line'>          {images.map((image, index) =&gt; (
</span><span class='line'>            &lt;div key={index} onClick={this.handleThumbClick.bind(this,image)}&gt;
</span><span class='line'>              &lt;img src={image}/&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>          ))}
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'><span class="gi">+export default connect()(Gallery)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Importing the <code>connect</code> function from react-redux lets us export <code>Gallery</code> by wrapping it in the connect component. Notice that <code>connect()(Gallery)</code> puts <code>Gallery</code> in a second set of parentheses. This is because <code>connect()</code> returns a function that expects a React component as an argument. The call to <code>connect()</code> configures that function. Soon we&rsquo;ll pass in arguments to <code>connect</code> to configure it for our applications specific actions and state structure.</p>

<p>We are also exporting the <code>connect</code> call as the <code>default</code> for this module. This is important! Now, when we <code>import Gallery</code> it will import the connected component and not the basic class.</p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/2k1Y1h3g1b0l1m0w212R/Screen%20Shot%202016-03-20%20at%206.42.19%20PM.png?v=bc54291d" alt="" /></p>

<p>If you look at the console log that we&rsquo;ve added to the constructor, you will see that the <code>Gallery</code> component&rsquo;s properties now include a <code>dispatch</code> function. This is part of what <code>connect</code> has modified for us, and gives us the ability to dispatch our own action objects to the applications reducers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>export class Gallery extends Component {
</span><span class='line'>  constructor(props) {
</span><span class='line'>    super(props);
</span><span class='line'><span class="gi">+    this.props.dispatch({type: &#39;TEST&#39;});</span>
</span><span class='line'>    this.state = {
</span><span class='line'>      images: []
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>[...]
</span></code></pre></td></tr></table></div></figure>


<p>We can test it out by calling dispatch in the constructor. You should see a log statement from our reducer in your developer console. We&rsquo;ve dispatched our first action! <em>Actions are plain old javascript objects</em> that have a required <code>type</code> property. They can have any number of other properties as well to pass along to the reducer, but the <code>type</code> property allows reducers to listen for specific actions that they are interested in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>export default function images(state, action) {
</span><span class='line'><span class="gd">-  console.log(state, action)</span>
</span><span class='line'><span class="gi">+  switch(action.type) {</span>
</span><span class='line'><span class="gi">+    case &#39;TEST&#39;:</span>
</span><span class='line'><span class="gi">+      console.log(&#39;THIS IS ONLY A TEST&#39;)</span>
</span><span class='line'><span class="gi">+  }</span>
</span><span class='line'>  return state;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Generally reducers use a <code>switch</code> block to filter messages they are interested in. The <code>switch</code> uses the action&rsquo;s type, and the reducer does its work when it gets an action that matches one of the <code>case</code>s of the <code>switch</code>.</p>

<p>Our application is now wired to receive actions. Now we need to connect it to the state provided by the Redux store.</p>

<h3>Default application state</h3>

<p>Because we are using <code>connect</code>, we don&rsquo;t need to interact with the Redux store directly. We are going to configure a default application state to provide the Redux store.</p>

<h3>reducer.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>const defaultState = {
</span><span class='line'>  images: []
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>export default function images(state = defaultState, action) {
</span><span class='line'>  switch(action.type) {
</span><span class='line'>    case &#39;TEST&#39;:
</span><span class='line'><span class="gd">-      console.log(&#39;THIS IS ONLY A TEST&#39;)</span>
</span><span class='line'><span class="gi">+      console.log(state, action)</span>
</span><span class='line'><span class="gi">+      return state;</span>
</span><span class='line'><span class="gi">+    default:</span>
</span><span class='line'><span class="gi">+      return state;</span>
</span><span class='line'>  }
</span><span class='line'><span class="gd">-  return state;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve created a <code>defaultState</code> object that has an empty array as its images property. We will set the <code>state</code> to default in the <code>images</code> function parameters. Now, if we log out the <code>state</code> property in our test case, you&rsquo;ll see that it isn&rsquo;t undefined! The reducer <strong>needs to return the current state</strong> of the application. This is important! Right now, we aren&rsquo;t making any changes, so we can just return the state. Note that we added a default case. The reducer should <em>always</em> return an object representing the state.</p>

<p>In the <code>Gallery</code> we can also connect the applications state by mapping it to properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import React, {Component} from &#39;react&#39;
</span><span class='line'>import {connect} from &#39;react-redux&#39;;
</span><span class='line'>
</span><span class='line'>export class Gallery extends Component {
</span><span class='line'>  constructor(props) {
</span><span class='line'>    super(props);
</span><span class='line'>    this.props.dispatch({type: &#39;TEST&#39;});
</span><span class='line'><span class="gi">+    console.log(props);</span>
</span><span class='line'><span class="gd">-    this.state = {</span>
</span><span class='line'><span class="gd">-      images: []</span>
</span><span class='line'><span class="gd">-    }</span>
</span><span class='line'>  }
</span><span class='line'><span class="gd">-  componentDidMount() {</span>
</span><span class='line'><span class="gd">-    const API_KEY = &#39;a46a979f39c49975dbdd23b378e6d3d5&#39;;</span>
</span><span class='line'><span class="gd">-    const API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.-getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5`;-</span>
</span><span class='line'><span class="gd">-</span>
</span><span class='line'><span class="gd">-    fetch(API_ENDPOINT).then((response) =&gt; {</span>
</span><span class='line'><span class="gd">-      return response.json().then((json) =&gt; {</span>
</span><span class='line'><span class="gd">-        const images = json.photos.photo.map(({farm, server, id, secret}) =&gt; { </span>
</span><span class='line'><span class="gd">-            return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`</span>
</span><span class='line'><span class="gd">-        });</span>
</span><span class='line'><span class="gd">-</span>
</span><span class='line'><span class="gd">-        this.setState({images, selectedImage: images[0]});</span>
</span><span class='line'><span class="gd">-      })</span>
</span><span class='line'><span class="gd">-    })</span>
</span><span class='line'><span class="gd">-  }</span>
</span><span class='line'><span class="gd">-  handleThumbClick(selectedImage) {</span>
</span><span class='line'><span class="gd">-    this.setState({</span>
</span><span class='line'><span class="gd">-      selectedImage</span>
</span><span class='line'><span class="gd">-    })</span>
</span><span class='line'><span class="gd">-  }</span>
</span><span class='line'>  render() {
</span><span class='line'><span class="gd">-    const {images, selectedImage} = this.state;</span>
</span><span class='line'><span class="gi">+    const {images, selectedImage} = this.props;</span>
</span><span class='line'>    return (
</span><span class='line'>      &lt;div className=&quot;image-gallery&quot;&gt;
</span><span class='line'>        &lt;div className=&quot;gallery-image&quot;&gt;
</span><span class='line'>          &lt;div&gt;
</span><span class='line'>            &lt;img src={selectedImage} /&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>        &lt;div className=&quot;image-scroller&quot;&gt;
</span><span class='line'>          {images.map((image, index) =&gt; (
</span><span class='line'><span class="gd">-            &lt;div key={index} onClick={this.handleThumbClick.bind(this,image)}&gt;</span>
</span><span class='line'><span class="gi">+            &lt;div key={index}&gt;</span>
</span><span class='line'>              &lt;img src={image}/&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>          ))}
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'><span class="gi">+function mapStateToProps(state) {</span>
</span><span class='line'><span class="gi">+  return {</span>
</span><span class='line'><span class="gi">+    images: state.images</span>
</span><span class='line'><span class="gi">+    selectedImage: state.selectedImage</span>
</span><span class='line'><span class="gi">+  }</span>
</span><span class='line'><span class="gi">+}</span>
</span><span class='line'>
</span><span class='line'><span class="gd">-export default connect()(Gallery)</span>
</span><span class='line'><span class="gi">+export default connect(mapStateToProps)(Gallery)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are going to remove all of the image loading and interaction in the connected component for now. If you look towards the bottom of <code>Gallery</code> you will notice that we created a function called <code>mapStateToProps</code> that takes a <code>state</code> argument and returns an object that puts <code>state.images</code> into a property called <code>images</code>.  <code>mapStateToProps</code> is then passed as an argument to <code>connect</code>.</p>

<p>As the name suggests <code>mapStateToProps</code> is a function that takes the current state, and assigns it to properties of the component. If you <code>console.log(props)</code> in the constructor, you will see that we now have access to the images array that we set as the default state in our reducer!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>const defaultState = {
</span><span class='line'><span class="gd">-  images: []</span>
</span><span class='line'><span class="gi">+  images: [</span>
</span><span class='line'><span class="gi">+    &quot;https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg&quot;,</span>
</span><span class='line'><span class="gi">+    &quot;https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg&quot;,</span>
</span><span class='line'><span class="gi">+    &quot;https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg&quot;,</span>
</span><span class='line'><span class="gi">+    &quot;https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg&quot;,</span>
</span><span class='line'><span class="gi">+    &quot;https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg&quot;</span>
</span><span class='line'><span class="gi">+  ],</span>
</span><span class='line'><span class="gi">+  selectedImage: &quot;https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg&quot;</span>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>export default function images(state = defaultState, action) {
</span><span class='line'>  switch(action.type) {
</span><span class='line'>    case &#39;TEST&#39;:
</span><span class='line'>      console.log(state, action)
</span><span class='line'>      return state;
</span><span class='line'>    default:
</span><span class='line'>      return state;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>If you update the <code>images</code> array in the <code>defaultState</code> you should see some images reappear in the gallery! Now we need to get image selection wired back up with an action that is dispatched when the user clicks a thumbnail.</p>

<h3>Updating the state</h3>

<p>So how do we update the state with a new selected image?</p>

<p>We&rsquo;re going to configure the reducer to listen for an <code>IMAGE_SELECTED</code> action, and update the state with the action&rsquo;s payload.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>const defaultState = {
</span><span class='line'>  images: [
</span><span class='line'>    &quot;https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg&quot;,
</span><span class='line'>    &quot;https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg&quot;,
</span><span class='line'>    &quot;https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg&quot;,
</span><span class='line'>    &quot;https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg&quot;,
</span><span class='line'>    &quot;https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg&quot;
</span><span class='line'>  ],
</span><span class='line'>  selectedImage: &quot;https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg&quot;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>export default function images(state = defaultState, action) {
</span><span class='line'>  switch(action.type) {
</span><span class='line'><span class="gd">-    case &#39;TEST&#39;:</span>
</span><span class='line'>    case &#39;IMAGE_SELECTED&#39;:
</span><span class='line'><span class="gd">-      return state;</span>
</span><span class='line'><span class="gi">+      return {...state, selectedImage: action.image};</span>
</span><span class='line'>    default:
</span><span class='line'>      return state;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Now the reducer is ready to receive the <code>IMAGE_SELECTED</code> action should it be dispatched! Inside of the case, we are returning a <strong>new state object</strong> by &ldquo;spreading&rdquo; the existing state and overwriting the <code>selectedImage</code> property. Checkout more on the <code>...state</code> object spread technique in <a href="https://egghead.io/lessons/javascript-redux-avoiding-array-mutations-with-concat-slice-and-spread">this video</a>. It&rsquo;s excellent.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import React, {Component} from &#39;react&#39;
</span><span class='line'>import {connect} from &#39;react-redux&#39;;
</span><span class='line'>
</span><span class='line'>export class Gallery extends Component {
</span><span class='line'><span class="gd">-  constructor(props) {</span>
</span><span class='line'><span class="gd">-    super(props);</span>
</span><span class='line'><span class="gd">-    this.props.dispatch({type: &#39;TEST&#39;});</span>
</span><span class='line'><span class="gd">-    console.log(props);</span>
</span><span class='line'><span class="gd">-  }</span>
</span><span class='line'>  render() {
</span><span class='line'><span class="gd">-    const {images, selectedImage} = this.props;</span>
</span><span class='line'><span class="gi">+    const {images, selectedImage, dispatch} = this.props;</span>
</span><span class='line'>
</span><span class='line'>    return (
</span><span class='line'>      &lt;div className=&quot;image-gallery&quot;&gt;
</span><span class='line'>        &lt;div className=&quot;gallery-image&quot;&gt;
</span><span class='line'>          &lt;div&gt;
</span><span class='line'>            &lt;img src={selectedImage} /&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>        &lt;div className=&quot;image-scroller&quot;&gt;
</span><span class='line'>          {images.map((image, index) =&gt; (
</span><span class='line'><span class="gd">-            &lt;div key={index}&gt;</span>
</span><span class='line'><span class="gi">+            &lt;div key={index} onClick={() =&gt; dispatch({type:&#39;IMAGE_SELECTED&#39;, image})}&gt;</span>
</span><span class='line'>              &lt;img src={image}/&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>          ))}
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function mapStateToProps(state) {
</span><span class='line'>  return {
</span><span class='line'>    images: state.images,
</span><span class='line'>    selectedImage: state.selectedImage
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>export default connect(mapStateToProps)(Gallery)
</span></code></pre></td></tr></table></div></figure>


<p>In the <code>Gallery</code>, we will use the <code>dispatch</code> function in the component props by calling it <em>inside of the body</em> of the <code>onClick</code> handler function. For now we are just writing it inline for convenience, but once we make that change, we can now click a thumbnail, and it will update the selected image via the reducer!</p>

<p>Using dispatch can be convenient way to quickly create generic actions, but soon we will want to make reusable actions that are well named. To do this, we will make use of &ldquo;action creators&rdquo;.</p>

<h3>Action Creators</h3>

<p>Action creators are functions that return configured action objects. We will add our first action creator to an new file called <code>actions.js</code>.</p>

<h3>actions.js</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">IMAGE_SELECTED</span> <span class="o">=</span> <span class="s1">&#39;IMAGE_SELECTED&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kd">function</span> <span class="nx">selectImage</span><span class="p">(</span><span class="nx">image</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="nx">IMAGE_SELECTED</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">image</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This could now be imported directly into any file that needed to create a <code>selectImage</code> action! <code>selectImage</code> is a pure function that only returns data. It takes an image as an argument, and adds that to the action object it creates and returns.</p>

<blockquote><p><strong>note:</strong> We are returning a plain JavaScript object, but the second property <code>image</code> might be weird if you haven&rsquo;t encountered this style before. Basically, in ES6, if you pass a property to an object like this it expands to <code>image: 'whatever value was held by image'</code> in the resulting object. Super handy.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span>  <span class="o">*</span> <span class="nx">as</span> <span class="nx">GalleryActions</span> <span class="nx">from</span> <span class="s1">&#39;./actions.js&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'><span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">GalleryActions</span><span class="p">.</span><span class="nx">selectImage</span><span class="p">(</span><span class="nx">image</span><span class="p">))}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This isn&rsquo;t much nicer than just using <code>dispatch</code> though.</p>

<p>Luckily for us, this pattern is so common, Redux provides a much nicer way to do this with the <code>bindActionCreators</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import React, {Component} from &#39;react&#39;
</span><span class='line'>import {connect} from &#39;react-redux&#39;;
</span><span class='line'><span class="gi">+ import {bindActionCreators} from &#39;redux&#39;;</span>
</span><span class='line'>
</span><span class='line'><span class="gi">+ import  * as GalleryActions from &#39;./actions.js&#39;;</span>
</span><span class='line'>
</span><span class='line'>export class Gallery extends Component {
</span><span class='line'>  constructor(props) {
</span><span class='line'>    super(props);
</span><span class='line'>    this.props.dispatch({type: &#39;TEST&#39;});
</span><span class='line'>    console.log(props);
</span><span class='line'>  }
</span><span class='line'>  handleThumbClick(selectedImage) {
</span><span class='line'>    this.setState({
</span><span class='line'>      selectedImage
</span><span class='line'>    })
</span><span class='line'>  }
</span><span class='line'>  render() {
</span><span class='line'><span class="gd">-    const {images, selectedImage, dispatch} = this.props;</span>
</span><span class='line'><span class="gi">+    const {images, selectedImage, selectImage} = this.props;</span>
</span><span class='line'>    return (
</span><span class='line'>      &lt;div className=&quot;image-gallery&quot;&gt;
</span><span class='line'>        &lt;div className=&quot;gallery-image&quot;&gt;
</span><span class='line'>          &lt;div&gt;
</span><span class='line'>            &lt;img src={selectedImage} /&gt;
</span><span class='line'>          &lt;/div&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>        &lt;div className=&quot;image-scroller&quot;&gt;
</span><span class='line'>          {images.map((image, index) =&gt; (
</span><span class='line'><span class="gd">-            &lt;div key={index} onClick={() =&gt; dispatch({type:&#39;IMAGE_SELECTED&#39;, image})}&gt;</span>
</span><span class='line'><span class="gi">+            &lt;div key={index} onClick={() =&gt; selectImage(image)}&gt;</span>
</span><span class='line'>              &lt;img src={image}/&gt;
</span><span class='line'>            &lt;/div&gt;
</span><span class='line'>          ))}
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function mapStateToProps(state) {
</span><span class='line'>  return {
</span><span class='line'>    images: state.images,
</span><span class='line'>    selectedImage: state.selectedImage
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'><span class="gi">+function mapActionCreatorsToProps(dispatch) {</span>
</span><span class='line'><span class="gi">+  return bindActionCreators(GalleryActions, dispatch);</span>
</span><span class='line'><span class="gi">+}</span>
</span><span class='line'>
</span><span class='line'><span class="gd">-export default connect(mapStateToProps)(Gallery)</span>
</span><span class='line'><span class="gi">+export default connect(mapStateToProps, mapActionCreatorsToProps)(Gallery)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve added a <code>mapActionCreatorsToProps</code> function that takes the <code>dispatch</code> function as an argument. It returns the result of a call to <code>bindActionCreators</code> with our <code>GalleryActions</code> provided as an argument. Now if you log the props, you&rsquo;ll see that <code>Gallery</code> <em>no longer gets passed the <code>dispatch</code> function</em>, and instead has a function called <code>selectImage</code> that we can use directly!</p>

<p>To review, we&rsquo;ve done several things:</p>

<ul>
<li>created a reducer that contains the initial (default) state of our application and listens for actions</li>
<li>created a store that consumes the reducer and provides a dispatcher that we can use to dispatch actions</li>
<li>connected our Gallery component to the store</li>
<li>mapped the store&rsquo;s state to props that are passed to the Gallery</li>
<li>mapped an action creator function so that the Gallery can simply call <code>selectImage(image)</code> and the application state will update.</li>
</ul>


<p>How do we use these patterns and load data from the remote data source?</p>

<p>This is where it gets interesting! <i class='emoji wink'></i></p>

<h2>Asyncronous activity?</h2>

<p>You may hear the term &ldquo;side effects&rdquo; used when discussing a functional style of programming. Side effects are things that occur outside the boundaries of the application. Within our cozy bubble, side effects aren&rsquo;t really a problem, but when we reach out to a remote service the bubble is pierced. We lose some control, and we have to accept that fact.</p>

<p>In Redux, <strong>reducers don&rsquo;t have side effects</strong>. This means that <strong>reducers don&rsquo;t handle async activity in our application</strong>. We can&rsquo;t use them to load our remote data because <strong>reducers are pure functions with no side effects</strong>.</p>

<p>Redux is wonderful, and if you don’t have and side-effects like asynchronous activity you could stop right here. If you’re creating more than the most trivial example, it is likely that you are loading data from a service, and this is of course async.</p>

<blockquote><p><strong>note:</strong> one of the coolest aspects of Redux is how tiny it is. It does so very little! It is intended to solve a very limited problem scope. Most applications will need to solve <strong>lots</strong> of problems! Luckily Redux provides the concept of &ldquo;middleware&rdquo;, which are basically bits of code that sit in the midel of the action &ndash;> reducer &ndash;> store triangle and provide a mechanism for introducing side effects like async calls to remote servers</p></blockquote>

<p>One approach is to use <strong><a href="https://en.wikipedia.org/wiki/Thunk">thunks</a></strong> with the <a href="https://github.com/gaearon/redux-thunk">redux-thunk</a> middleware. Thunks work great, but can get confusing for sequences of actions and can be challenging to test effectively.</p>

<p>Consider our image gallery application. When the application loads, it needs to:</p>

<ul>
<li>request an array of images from the server</li>
<li>display some notification that the images are loading</li>
<li>select an initial image for display when the results have been received</li>
<li>handle any errors that might occur</li>
</ul>


<p>This is all before the user has clicked anything in the application!</p>

<p>So how do we do it?</p>

<p>This is where <strong>redux-saga</strong> can be of great service to our application!</p>

<h2>redux-saga</h2>

<p>redux-saga is built to handle asynchronous actions in our Redux applications. It provides middleware and a handful of effects methods that make building complex sequences of asynchronous actions a breeze.</p>

<p>A saga is a <strong>generator</strong> function. Generators are an ES2015 addition to JavaScript. This might be your first encounter with generator functions, and if that’s the case, they might be a little weird. If that is the case, take a few minutes to read <a href="http://www.2ality.com/2015/03/es6-generators.html">ES6 Generators in Depth</a> and watch this <a href="https://egghead.io/lessons/ecmascript-6-generators">short generators video</a>. Don’t fret to much if you’re still scratching your head. To use redux-saga you won’t need a PhD in JavaScript Async Programming. Promise.</p>

<p>Because of the way generators work, we are able to create flat sequences of commands describing complex workflows within our application. The entire image loading sequence described above could look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="kd">function</span><span class="o">*</span> <span class="nx">loadImages</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">images</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">call</span><span class="p">(</span><span class="nx">fetchImages</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">put</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;IMAGES_LOADED&#39;</span><span class="p">,</span> <span class="nx">images</span><span class="p">})</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">put</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;IMAGE_SELECTED&#39;</span><span class="p">,</span> <span class="nx">image</span><span class="o">:</span> <span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">]})</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">put</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;IMAGE_LOAD_FAILURE&#39;</span><span class="p">,</span> <span class="nx">error</span><span class="p">})</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kd">function</span><span class="o">*</span> <span class="nx">watchForLoadImages</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">take</span><span class="p">(</span><span class="s1">&#39;LOAD_IMAGES&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">call</span><span class="p">(</span><span class="nx">loadImages</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The first saga</h3>

<p>We&rsquo;ll start with a simple example of a saga, and then we will configure redux-saga to connect it to our application. Create a file called <code>saga.js</code> in the source folder and add the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">export</span> <span class="kd">function</span><span class="o">*</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our saga is simply a generator function. You can tell by the little <code>*</code> after <code>function*</code>. It&rsquo;s called the &ldquo;super star&rdquo; <i class='emoji star'></i>!</p>

<p>Now in <code>main.js</code> we will import our new function and execute it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import &quot;babel-polyfill&quot;;
</span><span class='line'>
</span><span class='line'>import React from &#39;react&#39;;
</span><span class='line'>import ReactDOM from &#39;react-dom&#39;;
</span><span class='line'>
</span><span class='line'>import Gallery from &#39;./Gallery&#39;;
</span><span class='line'>
</span><span class='line'>import { createStore } from &#39;redux&#39;
</span><span class='line'>import {Provider} from &#39;react-redux&#39;;
</span><span class='line'>import reducer from &#39;./reducer&#39;
</span><span class='line'>
</span><span class='line'><span class="gi">+import {sayHello} from &#39;./sagas&#39;;</span>
</span><span class='line'><span class="gi">+sayHello();</span>
</span><span class='line'>
</span><span class='line'>const store = createStore(reducer);
</span><span class='line'>
</span><span class='line'>ReactDOM.render(
</span><span class='line'>  &lt;Provider store={store}&gt;
</span><span class='line'>    &lt;Gallery /&gt;
</span><span class='line'>  &lt;/Provider&gt;,
</span><span class='line'>  document.getElementById(&#39;root&#39;)
</span><span class='line'>);
</span></code></pre></td></tr></table></div></figure>


<p>No matter how long you stare at the console, your &ldquo;hello&rdquo; will never arrive <i class='emoji cry'></i></p>

<p>This is because <code>sayHello</code> is a <strong>generator</strong>! Generators don&rsquo;t execute immediately. If you changed the line to <code>sayHello().next();</code> your greating will appear. Don&rsquo;t worry, we won&rsquo;t call <code>next</code> all the time. Like Redux, redux-saga is built to remove pain and bolierplate and make our development experience more pleasurable.</p>

<h2>Configure redux-saga</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import &quot;babel-polyfill&quot;;
</span><span class='line'>
</span><span class='line'>import React from &#39;react&#39;;
</span><span class='line'>import ReactDOM from &#39;react-dom&#39;;
</span><span class='line'>
</span><span class='line'>import Gallery from &#39;./Gallery&#39;;
</span><span class='line'>
</span><span class='line'><span class="gd">-import { createStore } from &#39;redux&#39;</span>
</span><span class='line'><span class="gi">+import { createStore, applyMiddleware } from &#39;redux&#39;</span>
</span><span class='line'><span class="gi">+import createSagaMiddleware from &#39;redux-saga&#39;</span>
</span><span class='line'>import {Provider} from &#39;react-redux&#39;;
</span><span class='line'>import reducer from &#39;./reducer&#39;
</span><span class='line'>
</span><span class='line'>import {sayHello} from &#39;./sagas&#39;;
</span><span class='line'><span class="gd">-sayHello()</span>
</span><span class='line'>
</span><span class='line'><span class="gd">-const store = createStore(reducer);</span>
</span><span class='line'><span class="gi">+const store = createStore(</span>
</span><span class='line'><span class="gi">+  reducer,</span>
</span><span class='line'><span class="gi">+  applyMiddleware(createSagaMiddleware(sayHello))</span>
</span><span class='line'><span class="gi">+);</span>
</span><span class='line'>
</span><span class='line'>ReactDOM.render(
</span><span class='line'>  &lt;Provider store={store}&gt;
</span><span class='line'>    &lt;Gallery /&gt;
</span><span class='line'>  &lt;/Provider&gt;,
</span><span class='line'>  document.getElementById(&#39;root&#39;)
</span><span class='line'>);
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve imported the <code>applyMiddleware</code> function from Redux, and the  <code>createSagaMiddleware</code> from <code>redux-saga</code>. When we create the store, we need to supply Redux with the middleware that we want to use. In this case we call <code>applyMiddleware</code> and send it the result of <code>createSagaMiddleware(sayHello)</code>. Behind the scenes redux-saga loads in the <code>sayHello</code> function, and politely calls the initial <code>next</code> for us.</p>

<p>It should greet you in the console!</p>

<p>Now let&rsquo;s build a saga for loading images.</p>

<h2>Loading Images with a Saga</h2>

<p>We&#8217;ill get rid of the <code>sayHello</code> saga and replace it with a <code>loadImages</code> saga in <code>sagas.js</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">-export function* sayHello() {</span>
</span><span class='line'><span class="gd">-  console.log(&#39;hello&#39;);</span>
</span><span class='line'><span class="gd">-}</span>
</span><span class='line'>
</span><span class='line'><span class="gi">+export function* loadImages() {</span>
</span><span class='line'><span class="gi">+  console.log(&#39;load some images please&#39;)</span>
</span><span class='line'><span class="gi">+}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can&rsquo;t forget to update <code>main.js</code> as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import &quot;babel-polyfill&quot;;
</span><span class='line'>
</span><span class='line'>import React from &#39;react&#39;;
</span><span class='line'>import ReactDOM from &#39;react-dom&#39;;
</span><span class='line'>
</span><span class='line'>import Gallery from &#39;./Gallery&#39;;
</span><span class='line'>
</span><span class='line'>import { createStore, applyMiddleware } from &#39;redux&#39;
</span><span class='line'>import {Provider} from &#39;react-redux&#39;;
</span><span class='line'>import createSagaMiddleware from &#39;redux-saga&#39;
</span><span class='line'>import reducer from &#39;./reducer&#39;
</span><span class='line'>
</span><span class='line'><span class="gd">-import {sayHello} from &#39;./sagas&#39;;</span>
</span><span class='line'><span class="gi">+import {loadImages} from &#39;./sagas&#39;;</span>
</span><span class='line'>
</span><span class='line'>const store = createStore(
</span><span class='line'>  reducer,
</span><span class='line'><span class="gd">-  applyMiddleware(createSagaMiddleware(sayHello))</span>
</span><span class='line'><span class="gi">+  applyMiddleware(createSagaMiddleware(loadImages))</span>
</span><span class='line'>);
</span><span class='line'>
</span><span class='line'>ReactDOM.render(
</span><span class='line'>  &lt;Provider store={store}&gt;
</span><span class='line'>    &lt;Gallery /&gt;
</span><span class='line'>  &lt;/Provider&gt;,
</span><span class='line'>  document.getElementById(&#39;root&#39;)
</span><span class='line'>);
</span></code></pre></td></tr></table></div></figure>


<p>And now the saga is loading. Let&rsquo;s add our <code>fetchImages</code> method we used earlier inside of <code>sagas.js</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">API_KEY</span> <span class="o">=</span> <span class="s1">&#39;a46a979f39c49975dbdd23b378e6d3d5&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">API_ENDPOINT</span> <span class="o">=</span> <span class="err">`</span><span class="nx">https</span><span class="o">:</span><span class="c1">//api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5`;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">fetchImages</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">API_ENDPOINT</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">json</span><span class="p">.</span><span class="nx">photos</span><span class="p">.</span><span class="nx">photo</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span>
</span><span class='line'>        <span class="p">({</span><span class="nx">farm</span><span class="p">,</span> <span class="nx">server</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">secret</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">https</span><span class="o">:</span><span class="c1">//farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kd">function</span><span class="o">*</span> <span class="nx">loadImages</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">images</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">fetchImages</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">images</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>fetchImages</code> method returns a promise. We are going to call <code>fetchImages</code>, but we are going to use the <code>yield</code> keyword. By dark arts and sorcery, generators <em>understand promises</em>, and as the console log will show, we&rsquo;ve yielded an array of image urls. Looking at <code>loadImages</code>, it looks like typical syncronous code. The <code>yield</code> keyword is the secret sauce that lets us code in this syncronous style for asyncronous activity.</p>

<h3>Encapsulating our async API requests</h3>

<p>Let&rsquo;s define the api we want to use in its own file. It is nothing special. In fact, it&rsquo;s the same code we used earlier to load Flickr images. We&rsquo;re going to create a file called <code>flickr.js</code> in the src folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">API_KEY</span> <span class="o">=</span> <span class="s1">&#39;a46a979f39c49975dbdd23b378e6d3d5&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">API_ENDPOINT</span> <span class="o">=</span> <span class="err">`</span><span class="nx">https</span><span class="o">:</span><span class="c1">//api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5`;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">fetchImages</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">API_ENDPOINT</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">json</span><span class="p">.</span><span class="nx">photos</span><span class="p">.</span><span class="nx">photo</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span>
</span><span class='line'>        <span class="p">({</span><span class="nx">farm</span><span class="p">,</span> <span class="nx">server</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">secret</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">https</span><span class="o">:</span><span class="c1">//farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This isn&rsquo;t strictly required, but it makes a lot of sense to me. We are at the very <strong>boundaries of our application</strong>, where things are a bit messy. By encapsulating the mechanics of the interaction with the remote API, our code will be cleaner and easier to update. It also makes it dead simple to <em>completely swap out</em> the image service provider! Nice.</p>

<p>Our <code>saga.js</code> should now look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">fetchImages</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./flickr&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kd">function</span><span class="o">*</span> <span class="nx">loadImages</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">images</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">fetchImages</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">images</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We still need to get data out of our saga and into the application state. To handle this, we will utilize &ldquo;effects&rdquo; provided by redux-saga.</p>

<h3>Update the application from a saga</h3>

<p>We could probably call our saga with the <code>dispatch</code> function or store as an argument, but that approach would be unpleasant and perhaps a tad confusing over time. Instead, we&rsquo;ll rely on a method provided by redux-saga called <code>put</code>.</p>

<p>First we will update <code>reducer.js</code> to handle a new action type <code>IMAGES_LOADED</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>const defaultState = {
</span><span class='line'><span class="gi">+  images: []</span>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>export default function images(state = defaultState, action) {
</span><span class='line'>  switch(action.type) {
</span><span class='line'>    case &#39;IMAGE_SELECTED&#39;:
</span><span class='line'>      return {...state, selectedImage: action.image};
</span><span class='line'><span class="gi">+    case &#39;IMAGES_LOADED&#39;:</span>
</span><span class='line'><span class="gi">+      return {...state, images: action.images};</span>
</span><span class='line'>    default:
</span><span class='line'>      return state;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>We added the case, and also deleted the hard coded URLs from the <code>defaultState</code>. The <code>IMAGES_LOADED</code> case now returns an updated state that includes images delivered by the action.</p>

<p>Next we will update the saga:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import {fetchImages} from &#39;./flickr&#39;;
</span><span class='line'><span class="gi">+import {put} from &#39;redux-saga/effects&#39;;</span>
</span><span class='line'>
</span><span class='line'>export function* loadImages() {
</span><span class='line'>  const images = yield fetchImages();
</span><span class='line'><span class="gi">+  yield put({type: &#39;IMAGES_LOADED&#39;, images})</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>After importing <code>put</code>, we add another line to <code>loadImages</code>. It <code>yield</code>s the result of the call the <code>put</code> which sends along an action object. Behind the scenes redux-saga dispatches that for us, and the reducer receives the message!</p>

<p>What if we don&rsquo;t want to loadImages implicitly like this, simply because we have wired up a saga? How do we trigger a saga with a specific type of action?</p>

<h3>Triggering saga workflows with actions</h3>

<p>Sagas become much more useful if we have the ability to trigger their workflows with Redux actions. When we do this, we can leverage the power of sagas from any component in our app. First we will create a new saga called <code>watchForLoadImages</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import {fetchImages} from &#39;./flickr&#39;;
</span><span class='line'><span class="gd">-import {put} from &#39;redux-saga/effects&#39;;</span>
</span><span class='line'><span class="gi">+import {put, take} from &#39;redux-saga/effects&#39;;</span>
</span><span class='line'>
</span><span class='line'>export function* loadImages() {
</span><span class='line'>  const images = yield fetchImages();
</span><span class='line'>  yield put({type: &#39;IMAGES_LOADED&#39;, images})
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'><span class="gi">+export function* watchForLoadImages() {</span>
</span><span class='line'><span class="gi">+  while(true) {</span>
</span><span class='line'><span class="gi">+    yield take(&#39;LOAD_IMAGES&#39;);</span>
</span><span class='line'><span class="gi">+    yield loadImages();</span>
</span><span class='line'><span class="gi">+  }</span>
</span><span class='line'><span class="gi">+}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This new saga uses a <code>while</code> loop so that it is always active and ready. Inside of the loop we are yielding a call to a new method from redux-saga called <code>take</code>. Take listens for actions of a given type, and when they occur, it advances the saga to the next yield. In this case, we are yielding a call to <code>loadImages</code>, which initiates the loading of images.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import &quot;babel-polyfill&quot;;
</span><span class='line'>
</span><span class='line'>import React from &#39;react&#39;;
</span><span class='line'>import ReactDOM from &#39;react-dom&#39;;
</span><span class='line'>
</span><span class='line'>import Gallery from &#39;./Gallery&#39;;
</span><span class='line'>
</span><span class='line'>import { createStore, applyMiddleware } from &#39;redux&#39;
</span><span class='line'>import {Provider} from &#39;react-redux&#39;;
</span><span class='line'>import createSagaMiddleware from &#39;redux-saga&#39;
</span><span class='line'>import reducer from &#39;./reducer&#39;
</span><span class='line'>
</span><span class='line'><span class="gd">-import {loadImages} from &#39;./sagas&#39;;</span>
</span><span class='line'><span class="gi">+import {loadImages} from &#39;./watchForLoadImages&#39;;</span>
</span><span class='line'>
</span><span class='line'>const store = createStore(
</span><span class='line'>  reducer,
</span><span class='line'><span class="gd">-  applyMiddleware(createSagaMiddleware(loadImages))</span>
</span><span class='line'><span class="gi">+  applyMiddleware(createSagaMiddleware(watchForLoadImages))</span>
</span><span class='line'>);
</span><span class='line'>
</span><span class='line'>ReactDOM.render(
</span><span class='line'>  &lt;Provider store={store}&gt;
</span><span class='line'>    &lt;Gallery /&gt;
</span><span class='line'>  &lt;/Provider&gt;,
</span><span class='line'>  document.getElementById(&#39;root&#39;)
</span><span class='line'>);
</span></code></pre></td></tr></table></div></figure>


<p>After updating <code>main.js</code>, the application is no longer loading images. We can add a <code>loadImages</code> action to our action creators.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>export const IMAGE_SELECTED = &#39;IMAGE_SELECTED&#39;;
</span><span class='line'><span class="gi">+const LOAD_IMAGES = &#39;LOAD_IMAGES&#39;;</span>
</span><span class='line'>
</span><span class='line'>export function selectImage(image) {
</span><span class='line'>  return {
</span><span class='line'>    type: IMAGE_SELECTED,
</span><span class='line'>    image
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'><span class="gi">+export function loadImages() {</span>
</span><span class='line'><span class="gi">+  return {</span>
</span><span class='line'><span class="gi">+    type: LOAD_IMAGES</span>
</span><span class='line'><span class="gi">+  }</span>
</span><span class='line'><span class="gi">+}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we have already bound the action creators, all we need to do is call the action from the <code>Gallery</code> component.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>export class Gallery extends Component {
</span><span class='line'><span class="gi">+  componentDidMount() {</span>
</span><span class='line'><span class="gi">+    this.props.loadImages();</span>
</span><span class='line'><span class="gi">+  }</span>
</span><span class='line'>  render() {
</span></code></pre></td></tr></table></div></figure>


<h3>Blocking and non-blocking effects</h3>

<p>This works fine for our application, but there is a broader issue that we should be concerned with. The <code>watchForLoadImages</code> sage contains <strong>blocking</strong> effects. What does that mean? Well, it means that we can only execute a single <code>LOAD_IMAGES</code> workflow at a time! It isn&rsquo;t obvious with a simple example like this, because we actually only load images once, but it is definitely a consideration. In fact, the general practice when listening for action evens is to use the <code>fork</code> effect instead of <code>yield loadImages()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>export function* watchForLoadImages() {
</span><span class='line'>  while(true) {
</span><span class='line'>    yield take(&#39;LOAD_IMAGES&#39;);
</span><span class='line'><span class="gd">-    yield loadImages();</span>
</span><span class='line'><span class="gi">+    yield fork(loadImages); //be sure to import it!</span>
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>fork</code> helper will convert our <code>watchForLoadImages</code> into a non-blocking saga that can be executed regardless of whether or not a previous call is in progress. redux-saga <a href="http://yelouafi.github.io/redux-saga/docs/basics/UsingSagaHelpers.html">provides two helpers</a>, <code>takeEvery</code> and <code>takeLatest</code> that assist in these situations.</p>

<h3>Selecting the default image</h3>

<p>Sagas are sequences of actions, so we can add more aspects to a saga easily.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import {fetchImages} from &#39;./flickr&#39;;
</span><span class='line'>import {put, take, fork} from &#39;redux-saga/effects&#39;;
</span><span class='line'>
</span><span class='line'>export function* loadImages() {
</span><span class='line'>  const images = yield fetchImages();
</span><span class='line'>  yield put({type: &#39;IMAGES_LOADED&#39;, images})
</span><span class='line'><span class="gi">+  yield put({type: &#39;IMAGE_SELECTED&#39;, image: images[0]})</span>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>export function* watchForLoadImages() {
</span><span class='line'>  while(true) {
</span><span class='line'>    yield take(&#39;LOAD_IMAGES&#39;);
</span><span class='line'>    yield fork(loadImages);
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>As part of the <code>loadImages</code> workflow, we can yield another call to <code>put</code> with the <code>IMAGE_SELECTED</code> action type and send along the image we want to select when images are loaded.</p>

<h3>Handling errors</h3>

<p>If something goes wrong inside of the saga, we might want to notify the application so that it can respond accordingly. Do do this, we simply wrap the workflow in a try/catch block, and yield a <code>put</code> with a nitification that has the error as the payload.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import {fetchImages} from &#39;./flickr&#39;;
</span><span class='line'>import {put, take, fork} from &#39;redux-saga/effects&#39;;
</span><span class='line'>
</span><span class='line'>export function* loadImages() {
</span><span class='line'><span class="gi">+  try {</span>
</span><span class='line'>    const images = yield fetchImages();
</span><span class='line'>    yield put({type: &#39;IMAGES_LOADED&#39;, images})
</span><span class='line'>    yield put({type: &#39;IMAGE_SELECTED&#39;, image: images[0]})
</span><span class='line'><span class="gi">+  } catch(error) {</span>
</span><span class='line'><span class="gi">+    yield put({type: &#39;IMAGE_LOAD_FAILURE&#39;, error})</span>
</span><span class='line'><span class="gi">+  }</span>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>export function* watchForLoadImages() {
</span><span class='line'>  while(true) {
</span><span class='line'>    yield take(&#39;LOAD_IMAGES&#39;);
</span><span class='line'>    yield fork(loadImages);
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>Testing Sagas</h2>

<p>Using Redux makes testing most of our app a breeze. Check out <a href="https://egghead.io/series/react-testing-cookbook">this egghead course</a> for lots of techniques for testing React in general.</p>

<p>One of the awesome aspects of redux-saga is how easy it makes testing these bits of asynchronous code. Testing async javascript can be a real chore. With sagas, we don&rsquo;t need to jump through hoops to test this core functionality of our application.  Sagas take the pain out of aync tests! Which means we will write more tests. Right?</p>

<p>We&rsquo;re going to use <a href="https://github.com/substack/tape">tape</a>. Let&rsquo;s set up a few tests for our saga.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import test from &#39;tape&#39;;
</span><span class='line'>import {put, take} from &#39;redux-saga/effects&#39;
</span><span class='line'>import {watchForLoadImages, loadImages} from &#39;./sagas&#39;;
</span><span class='line'>import {fetchImages} from &#39;./flickr&#39;;
</span><span class='line'>
</span><span class='line'>test(&#39;watchForLoadImages&#39;, assert =&gt; {
</span><span class='line'>  const generator = watchForLoadImages();
</span><span class='line'>
</span><span class='line'>  assert.end();
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll go ahead and import everything we need for now, and add a single test. The test function takes a name and a function as arguments. Inside of the function, we create an instance of the sage generator. Armed with that instance, we can start advancing the saga to test each step.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import test from &#39;tape&#39;;
</span><span class='line'>import {put, take} from &#39;redux-saga/effects&#39;
</span><span class='line'>import {watchForLoadImages, loadImages} from &#39;./sagas&#39;;
</span><span class='line'>import {fetchImages} from &#39;./flickr&#39;;
</span><span class='line'>
</span><span class='line'>test(&#39;watchForLoadImages&#39;, assert =&gt; {
</span><span class='line'>  const generator = watchForLoadImages();
</span><span class='line'>
</span><span class='line'><span class="gi">+  assert.deepEqual(</span>
</span><span class='line'><span class="gi">+    generator.next().value,</span>
</span><span class='line'><span class="gi">+    false,</span>
</span><span class='line'><span class="gi">+    &#39;watchForLoadImages should be waiting for LOAD_IMAGES action&#39;</span>
</span><span class='line'><span class="gi">+  );</span>
</span><span class='line'>
</span><span class='line'>  assert.end();
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>The <code>assert.deepEqual</code> method takes two values and checks to see if they are equal (deeply!). The first is a call <code>generator.next().value</code> which advances the generator and gets the value. The next value is simple <code>false</code>. We want to see it fail! The final argument is a description of the expected behavior.</p>

<p>Run <code>npm test</code> in the project folder to see the result.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>✖ watchLoadImages should be waiting for LOAD_IMAGES action
</span><span class='line'><span class="gd">-----------------------------------------------------------</span>
</span><span class='line'>  operator: deepEqual
</span><span class='line'>  expected: |-
</span><span class='line'>    false
</span><span class='line'>  actual: |-
</span><span class='line'>    { TAKE: &#39;LOAD_IMAGES&#39; }
</span></code></pre></td></tr></table></div></figure>


<p>The test fails as expected and the results are interesting. The actual result is <code>{ TAKE: 'LOAD_IMAGES' }</code>, which is the output we receive when we call <code>take('LOAD_IMAGES');</code>. In fact, our saga could yield an object instead of calling <code>take</code>, but <code>take</code> gives us a little sugar and eliminates annoying keystrokes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import test from &#39;tape&#39;;
</span><span class='line'>import {put, take} from &#39;redux-saga/effects&#39;
</span><span class='line'>import {watchForLoadImages, loadImages} from &#39;./sagas&#39;;
</span><span class='line'>import {fetchImages} from &#39;./flickr&#39;;
</span><span class='line'>
</span><span class='line'>test(&#39;watchForLoadImages&#39;, assert =&gt; {
</span><span class='line'>  const generator = watchForLoadImages();
</span><span class='line'>
</span><span class='line'>  assert.deepEqual(
</span><span class='line'>    generator.next().value,
</span><span class='line'><span class="gd">-    false</span>
</span><span class='line'><span class="gi">+    take(&#39;LOAD_IMAGES&#39;),</span>
</span><span class='line'>    &#39;watchForLoadImages should be waiting for LOAD_IMAGES action&#39;
</span><span class='line'>  );
</span><span class='line'>
</span><span class='line'>  assert.end();
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>We can simply call <code>take</code> in our test and get the result we need!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import test from &#39;tape&#39;;
</span><span class='line'>import {put, take} from &#39;redux-saga/effects&#39;
</span><span class='line'>import {watchForLoadImages, loadImages} from &#39;./sagas&#39;;
</span><span class='line'>import {fetchImages} from &#39;./flickr&#39;;
</span><span class='line'>
</span><span class='line'>test(&#39;watchForLoadImages&#39;, assert =&gt; {
</span><span class='line'>  const generator = watchForLoadImages();
</span><span class='line'>
</span><span class='line'>  assert.deepEqual(
</span><span class='line'>    generator.next().value,
</span><span class='line'>    take(&#39;LOAD_IMAGES&#39;),
</span><span class='line'>    &#39;watchForLoadImages should be waiting for LOAD_IMAGES action&#39;
</span><span class='line'>  );
</span><span class='line'>
</span><span class='line'><span class="gi">+  assert.deepEqual(</span>
</span><span class='line'><span class="gi">+    gen.next().value,</span>
</span><span class='line'><span class="gi">+    false,</span>
</span><span class='line'><span class="gi">+    &#39;watchForLoadImages should call loadImages after LOAD_IMAGES action is received&#39;</span>
</span><span class='line'><span class="gi">+  );</span>
</span><span class='line'>
</span><span class='line'>  assert.end();
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>Our next test makes sure that the <code>loadImages</code> saga is called as the next step in the workflow. We&rsquo;ll add a false value here to see the result.</p>

<p>For a brief moment, let&rsquo;s update our saga code to yield the <code>loadImages</code> saga:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>export function* watchForLoadImages() {
</span><span class='line'>  while(true) {
</span><span class='line'>    yield take(&#39;LOAD_IMAGES&#39;);
</span><span class='line'><span class="gi">+    yield loadImages();</span>
</span><span class='line'><span class="gd">-    yield fork(loadImages); //be sure to import it!</span>
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Now when you run the tests, you will see.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received
</span><span class='line'><span class="gd">---------------------------------------------------------------------------------</span>
</span><span class='line'>  operator: deepEqual
</span><span class='line'>  expected: |-
</span><span class='line'>    false
</span><span class='line'>  actual: |-
</span><span class='line'>    { _invoke: [Function: invoke] }
</span></code></pre></td></tr></table></div></figure>


<p>Hmm, <code>{ _invoke: [Function: invoke] }</code> is <em>definitely</em> not as obvious as the simple object that we got when yeilding <code>take</code>.</p>

<p>This is a problem. Luckily it&rsquo;s one that redux-saga has solved in a nice way with effects like <code>fork</code>. <code>take</code>, <code>fork</code>, and other effect methods return and easily testable simple object. The object is a <em>set of instructions</em> for redux-saga to execute. This is beautiful for testing because we don&rsquo;t have to worry about the actual side effects (like remote service calls). All we care about are the commands we are requesting to be executed.</p>

<p>Let&rsquo;s update the saga to use <code>fork</code> again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>export function* watchForLoadImages() {
</span><span class='line'>  while(true) {
</span><span class='line'>    yield take(&#39;LOAD_IMAGES&#39;);
</span><span class='line'><span class="gd">-    yield loadImages();</span>
</span><span class='line'><span class="gi">+    yield fork(loadImages);</span>
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>We will go back to <code>yield fork(loadImages)</code> instead of yielding <code>loadImages</code> directly. Note that we aren&rsquo;t executing <code>loadImages</code>. Instead we are *passing the function <code>loadImages</code> as an argument to <code>fork</code></p>

<p>Run <code>npm test</code> again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received
</span><span class='line'><span class="gd">---------------------------------------------------------------------------------</span>
</span><span class='line'>  operator: deepEqual
</span><span class='line'>  expected: |-
</span><span class='line'>    false
</span><span class='line'>  actual: |-
</span><span class='line'>    { FORK: { args: [], context: null, fn: [Function: loadImages] } }
</span></code></pre></td></tr></table></div></figure>


<p>Instead of a function invocation, we get a plain object. That object has the <code>loadImages</code> function embedded in it. The application loads exactly the same in the browser, but now we can easily test this step in the saga workflow.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>import test from &#39;tape&#39;;
</span><span class='line'>import {put, take} from &#39;redux-saga/effects&#39;
</span><span class='line'>import {watchForLoadImages, loadImages} from &#39;./sagas&#39;;
</span><span class='line'>import {fetchImages} from &#39;./flickr&#39;;
</span><span class='line'>
</span><span class='line'>test(&#39;watchForLoadImages&#39;, assert =&gt; {
</span><span class='line'>  const generator = watchForLoadImages();
</span><span class='line'>
</span><span class='line'>  assert.deepEqual(
</span><span class='line'>    generator.next().value,
</span><span class='line'>    take(&#39;LOAD_IMAGES&#39;),
</span><span class='line'>    &#39;watchForLoadImages should be waiting for LOAD_IMAGES action&#39;
</span><span class='line'>  );
</span><span class='line'>
</span><span class='line'>  assert.deepEqual(
</span><span class='line'>    generator.next().value,
</span><span class='line'><span class="gd">-    false,</span>
</span><span class='line'><span class="gi">+    yield fork(loadImages),</span>
</span><span class='line'>    &#39;watchForLoadImages should call loadImages after LOAD_IMAGES action is received&#39;
</span><span class='line'>  );
</span><span class='line'>
</span><span class='line'>  assert.end();
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>Testing the <code>loadImages</code> saga is similar. We need to update <code>yield fetchImages</code> to <code>yield fork(fetchImages)</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;loadImages&#39;</span><span class="p">,</span> <span class="nx">assert</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nx">loadImages</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">call</span><span class="p">(</span><span class="nx">fetchImages</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;loadImages should call the fetchImages api&#39;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">images</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">images</span><span class="p">).</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">put</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;IMAGES_LOADED&#39;</span><span class="p">,</span> <span class="nx">images</span><span class="p">}),</span>
</span><span class='line'>    <span class="s1">&#39;loadImages should dispatch an IMAGES_LOADED action with the images&#39;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">images</span><span class="p">).</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">put</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;IMAGE_SELECTED&#39;</span><span class="p">,</span> <span class="nx">image</span><span class="o">:</span> <span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">]}),</span>
</span><span class='line'>    <span class="s1">&#39;loadImages should dispatch an IMAGE_SELECTED action with the first image&#39;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">error</span> <span class="o">=</span> <span class="s1">&#39;error&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">gen</span><span class="p">.</span><span class="k">throw</span><span class="p">(</span><span class="nx">error</span><span class="p">).</span><span class="nx">value</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">put</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;IMAGE_LOAD_FAILURE&#39;</span><span class="p">,</span> <span class="nx">error</span><span class="p">}),</span>
</span><span class='line'>    <span class="s1">&#39;loadImages should dispatch an IMAGE_LOAD_FAILURE if an error is thrown&#39;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take note of the last <code>assert</code>. It&rsquo;s testing the <code>catch</code> by using <code>throw</code> instead of <code>next</code> on the generator. Another cool feature is the ability to send values in. Notice that we&rsquo;ve created an <code>images</code> constant, and we pass that into <code>next</code>. The saga <em>uses the value we pass in</em> for the next step in the sequence.</p>

<p>It&rsquo;s awesome, and this level of control is a dream when it comes to testing async activity!</p>

<h2>What&rsquo;s next?</h2>

<p>You can <a href="https://github.com/joelhooks/egghead-react-redux-image-gallery">check out the full code for this example on github</a>. I&rsquo;m considering making a course on egghead to cover this. Would you be interested? <a href="https://twitter.com/jhooks">Let me know on twitter</a>!</p>

<p>If you wanted to expand the example a bit, you might:</p>

<ul>
<li>make it a slide show where the image advances to the next image on a timer</li>
<li>allow the user to search Flickr with keywords</li>
<li>drop in another API that delivers images</li>
<li>allow the user to select what APIs to search</li>
</ul>


<p>We&rsquo;ve only touched the surface of generators, but even at this level, hopefully you can see how useful they can be when coupled with the redux-saga library, Redux, and React.</p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/2s2q3B3x0Q04131p3V0C/jhooks_2016-Mar-20.jpg?v=db21427c" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015 Year in Review]]></title>
    <link href="http://joelhooks.com/blog/2015/12/31/2015-year-in-review/"/>
    <updated>2015-12-31T00:18:00-08:00</updated>
    <id>http://joelhooks.com/blog/2015/12/31/2015-year-in-review</id>
    <content type="html"><![CDATA[<h1>It’s been two years since I woke up dreading a workday.</h1>

<p>And I work almost every day.</p>

<p>When we first set out to build egghead, I told my parter John that all he had to do was make amazing content, and that <strong>I would do the rest</strong>.</p>

<p> <i class='emoji flushed'></i></p>

<p>For the most part, I took that very seriously, and wore all of the hats for a long time.</p>

<ul>
<li>Systems engineering</li>
<li>Front end development</li>
<li>Back end development</li>
<li>Quality Assurance</li>
<li>Developer Operations (DevOps)</li>
<li>Customer Support</li>
<li>Marketing</li>
<li>Search Engine Optimization</li>
<li>Copy Writer</li>
<li>Enterprise Sales</li>
<li>Talent Scout</li>
<li>Evangelist</li>
</ul>


<p>So many hats.</p>

<p>When you bootstrap a business, meaning you build a business from the profits of the business, and not with debt or outside investment, it creates an interesting situation. How do you get all of those things done, if you don’t have the money to pay somebody to do them?</p>

<p>The answer is, do them yourself. The <strong>reason</strong> I learned how to write software was so that I could apply it to my own business.</p>

<p>But wearing all those hats eventually gets tiring, believe it or not ;)</p>

<p>There are two hats I’ve never worn with this business, and that is bookkeeper and accountant. From <strong>day one</strong> I’ve had somebody that has taken care of that, and our compliance is spot on and the source of exactly 0 stress.</p>

<p>Outside of the books, 2015 has been the year of slowly relinquishing control by bringing in awesome people to help.</p>

<p>First and foremost, is my partner John. Sure, our deal was that he’d be in charge of making content. And that still the case, except he’s in charge of making sure the content is amazing for the <strong>33 instructors</strong> we’ve added to the roster since egghead became a business.</p>

<p>We’ve paid out almost <strong>$500,000 in royalties to date</strong>.</p>

<p>I’m so proud of what John and I have built, and out of all the metrics (and I track EVERYTHING), that is the one that fills me with the most joy.</p>

<h3>The inbox fills me with pain.</h3>

<p>So, a confession, I’m not very good at a lot of the jobs in the list above. In particular, I make a horrible customer service representative. I’m short tempered. I’m a smartass. I’ve got a low tolerance for repetition. My brevity can come across as rude&hellip; the list goes on.</p>

<p>And my inbox is the primary target for all incoming communication from thousands of paying customers and tens of thousands of potential customers.</p>

<p>It was crushing my soul.</p>

<p>Until Gina, this amazing woman who seems to genuinely love interacting with people and helping to make them happy. Who has sympathy for their problems, and works to make it right.</p>

<p>Who filters my inbox into a tidy list of things that I need to take care of.</p>

<p>Inbox 0. Twice a day.</p>

<p> <i class='emoji emoji1f496'></i></p>

<p>It was a game changer, and lifted a massive weight from my shoulders.</p>

<p>We also started using intercom.io heavily, and that has been wonderful as well as a way to take the conversation out of the inbox, and into something that is simply easier to manage and more pleasant for everybody involved.</p>

<h3>Working directly with those that inspire</h3>

<p>As egghead has steadily grown, we’ve seen more revenue over time. In 2015 this reached the point that we could hire some amazingly brilliant consultants to help us push the accelerator down a bit further.</p>

<p>Brennan Dunn is a friend and mentor, that was integral in the origin story of egghead. His books and classes inspired me, and directly led to the tipping point where I said “fuck this” and started my own business.</p>

<p>For the first 6 months of 2015, I had the pleasure of working with Brennan on marketing egghead.io, and it was awesome. Brennan helped to double our email list size, and taught me some killer techniques that I will use for years to come.</p>

<h3>Hunting Unicorns</h3>

<p>This summer we found ourselves in an interesting position. We could hire somebody full-time to work with me developing the egghead platform.</p>

<p>Leonard Souza started working with us on July 1st, 2015. About 10 days later, I basically went on vacation for 3 months. hah</p>

<p>Leonard held it together and started shipping amazing features for our users without a lot of direct interaction with me.</p>

<p>That is wonderful and amazing.</p>

<h3>Cherry on top</h3>

<p>Towards the end of the year, we engaged Nick Disabato to help us with some targeted testing and revisions for the egghead.io website. That has gone extremely well, and we’ve doubled down and brought nickd on for a more in depth longer term engagement.</p>

<p>I’m so excited about this, because nickd is fantastic to work with, and the project is exciting and fun.</p>

<p>Instead of waking up dreading my workday, I wake up pinching myself, exciting to go to work with an amazing team filled with people that challenge me and are excited to work on this business that we’ve built from the ground up.</p>

<h3>Building a community</h3>

<p>One of the most interesting outcomes of building egghead has been the community. We invite our instructors and potential instructors into a Slack chat room. We do this so we can discuss lessons and courses, and mentor people that haven’t published a lesson yet get a lesson published.</p>

<p>The result of this is an amazing chat filled with smart and inspiring people from around the world.</p>

<p>It’s precious to me, and like many aspects of this adventure, fills me with amazement that it even exists!</p>

<h3>What’s next in 2016</h3>

<p><em>Publish lessons from our first women instructors.</em></p>

<p>It is frustrating. We are working on it. The ratio of women to men in technology is already embarrassingly low. Add “screen casting” as a requirement to that, and the barrier to entry gets very tall.</p>

<p>It will happen! Soon.</p>

<p><em>Expand past JavaScript.</em></p>

<p>We love JS! It’s been tricky, growing the content that we offer without alienating the core base of customers. It has been a goal since the beginning, but this year you will see egghead lessons on Elm, ClojureScript, CSS, and perhaps other interesting emerging technologies.  Fun times.</p>

<p><em>Double down (again) investing in smart people.</em></p>

<p>We want to evolve our platform into something amazing that empowers people across the globe to learn new skills and achieve a better life for themselves and their families. We want to continue delivering content in an aggressively free manner, and carve learning paths through the confusing jungle that is programming computers.</p>

<h2>Beyond work</h2>

<p>Well, one thing I didn’t do in 2015 was blog. The last post here was my year in review for 2014. I don’t know if that will change much in 2016, we will see. I actually have a lot of things to say about building a business, running a business, online learning, programming computers, raising kids… I just keep it to myself.</p>

<p>We had some amazing travel. We road tripped to Portland through Zion National Park (amazing). Unfortunately on the <strong>first morning</strong> in our Portland rental house I slipped on the stairs and slammed down into my ribs. Broken ribs take a long, long time to heal. They still hurt after 7 months. Needless to say, it put a damper on the trip. I limped through it and powered through some light hiking.</p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/3c392w0q3Z252B0S3634/Screen%20Shot%202015-12-31%20at%2012.21.23%20AM.png?v=ed8c5e7f" alt="pain" /></p>

<p>In July, I spent the week in the mountains of Colorado near Aspen creating art on computers and using LASERS with Joshua Davis. Seriously, fuck ya. It was awesome. I brought my oldest kid (17) to the class, and we had a great time making art for a week. Definitely going back again in 2016.</p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/2S2j151M143e2p2n2b3b/Screen%20Shot%202015-12-31%20at%2012.13.13%20AM.png?v=01b61796" alt="" /></p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/0o1T3g3j2w1v2d3H3I11/Screen%20Shot%202015-12-31%20at%2012.13.52%20AM.png?v=3c9ab9d4" alt="" /></p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/1h1b1l0q0K0S190y3S47/Screen%20Shot%202015-12-31%20at%2012.19.35%20AM.png?v=cb19ca61" alt="" /></p>

<p>In August we set out on our longest family trip to date spending a full month on Lake Champlain in Vermont. It was amazing. Hiking, boating, laying about… A really wonderful time.</p>

<p><img src="https://farm1.staticflickr.com/666/21139340466_207b33dd92_b.jpg" alt="The Family with “Adventure Dad”" /></p>

<p><img src="https://farm1.staticflickr.com/565/20932223601_e99d5e3f9f_b.jpg" alt="A month of this…" /></p>

<p>My friend Jon tricked me into slaughtering and butchering a pig for a whole hog dinner.</p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/2X0y1c3f1g2Y410p181c/Screen%20Shot%202015-12-31%20at%2012.07.47%20AM.png?v=8346758c" alt="Let’s do this." /></p>

<p>It was quite the experience. As we are using a knife to scrape the fur off the pig’s skin, we ask his brother the hog farmer, “How do you usually do this?”</p>

<p>“I’ve never done that. I just pay a guy $40.”</p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/100J0B2v1w3g3D0W3g2j/Screen%20Shot%202015-12-31%20at%2012.08.47%20AM.png?v=b076bb38" alt="Killing it myself didn’t make it taste better." /></p>

<p>Fuck you Jon. I love you, lol.</p>

<p>Kristina and I spent a week in London, that was great.</p>

<p><img src="https://s3.amazonaws.com/f.cl.ly/items/0T1S3U2l3h1C1j2n0e0p/Screen%20Shot%202015-12-31%20at%2012.12.01%20AM.png?v=23fcb13e" alt="hello large clock!" /></p>

<h2>Eating well</h2>

<p>Last year I was super proud to report that I lost 50 pounds. I found 25 of it! hah. I’d like to blame it on the rib injury, but mostly candy is delicious.</p>

<h2>Cigarettes smoked</h2>

<p><strong>0</strong></p>

<p>0mg of nicotine since October 2014.</p>

<p>It’s <em>wonderful</em>.</p>

<h2>Professional Skills</h2>

<p>I spent the year working with React and learning RxJS. I focused on functional programming, and the last two months of the year I’ve been shouldering into Clojure. It’s been great, and I feel like I’m finally making progress. This is going to continue to be my goal for 2016. I’d like to get good at Clojure, and deploy my first real piece of software (for egghead) built on Clojure!</p>

<p>A nice side effect of wearing all the hats. I get to make zany tech decisions based on what I think is cool at the time! ;)</p>

<h2>Move</h2>

<p>2016 is going to be the year we leave Texas. It’s been a long time coming and I’m stoked that the wheels are in motion. 35 years in North Texas is baffling to me. I’ve wanted to leave for 23 of those!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrapping egghead.io to feed my family: 2014 in Review]]></title>
    <link href="http://joelhooks.com/blog/2014/12/24/bootstrapping-egghead-dot-io-to-feed-my-family-2014-in-review/"/>
    <updated>2014-12-24T11:12:00-08:00</updated>
    <id>http://joelhooks.com/blog/2014/12/24/bootstrapping-egghead-dot-io-to-feed-my-family-2014-in-review</id>
    <content type="html"><![CDATA[<h1>2014 Year in Review</h1>

<p>It&rsquo;s that time of the year. People dusting off the blog and endeavoring to capture the past 12 months of their life in a wordy nutshell. It&rsquo;s something that I&rsquo;ve never participated in, but I thought I&rsquo;d give it a try.</p>

<h2>I quit my job.</h2>

<p>This still frightens me. In February I quit a job that paid very well and provided a steady stream of work. This goes against the very core of my being, but it had to happen. It was killing my focus on what I truly wanted to do.</p>

<h2>Building egghead.io</h2>

<p>In late 2013 I partnered up with my friend John Lindquist to convert his <a href="https://egghead.io">egghead.io website</a> from a list of YouTube videos into a subscription service providing short topical video lessons to web developers several times per week.</p>

<p>One of my first orders of business was to introduce additional content producers to teach material, as burning John out is something I plan to avoid. Initially I produced some lessons, but through the course of the year I&rsquo;ve tapered that off to focus on the business side of the business.</p>

<p>This has turned out very well, and we&rsquo;ve had many instructors contribute content throughout the year. It is surprisingly difficult to produce a 2-10 minute concise lesson in screencast form, so the instructors tend to work in bursts.</p>

<p>To date, <strong>we&rsquo;ve paid just over $100,000 in royalties to our instructors</strong>.</p>

<p>This makes me so freaking proud. It&rsquo;s amazing, and when I looked at the numbers and saw that, it was hard to believe.</p>

<p>In May, John was able to leave his (beloved) job to work on egghead fulltime as well.</p>

<p>&ldquo;I&rsquo;m leaving my dream job to work at my dream dream job,&rdquo; is what he told me.</p>

<p>We&rsquo;ve built a platform that allows smart people to teach other smart people what they know and receive non-trivial compensation for their work.</p>

<p>This. More of this.</p>

<h2>Improving egghead.io</h2>

<p>While my initial &ldquo;design&rdquo; for egghead was OK, it was plain-old-boostrap, and generally kind of meh. But, they call <strong>bootstrap</strong> bootstrap for a reason. We are bootstrapping a business, spending just what we have to and delivering value.</p>

<p>As revenues have increased, I&rsquo;ve been able to slowly build a team. This has been wonderful, because building something by yourself gets very very lonely.</p>

<p>Our team is modular. We hire consultants, and pay them monthly retainers for blocks of work. The first was the wonderful <a href="http://uibreakfast.com/">Jane Portman</a> to start refreshing the overall design.</p>

<p>Because I&rsquo;m terrible at it, and hate it, we hired Evgeniy Nagalskiy to take Jane&rsquo;s designs and convert them to HTML and SCSS for me. This has allowed the designs to actually see the light of day, instead of being a constant source of dread for me.</p>

<p>We&rsquo;ve also been able to engage Pete Keen, who wrote the book on <a href="https://www.masteringmodernpayments.com/">Stripe payments with Rails</a> that saved my ass when building the initial Stripe integration. He&rsquo;s been a huge help on the Rails side, considering I have no idea what I&rsquo;m doing most of the time ;)</p>

<p>We also got some help from Matt Jaynes, who built a killer <a href="https://devopsu.com/">Vagrant/Ansible VM</a> for egghead local development.</p>

<p>This is fun and exciting, and 2015 is going to be awesome.</p>

<h2>Teaching AngularJS on-location</h2>

<p>By February, egghead.io revenue was nowhere near the level to match my consulting income and feed my family. To supplement the missing income, I started doing <a href="https://egghead.io/angularjs-enterprise-training-workshop">in-person training of web developers</a> for companies. This has been a lot of fun, keeping me engaged with lots of smart people around the country. I&rsquo;ve tried to keep it at a sane level, but I&rsquo;ve hit the 2nd tier of airline status for the first time ever&hellip; lots of travel!</p>

<p>The first few times were very tough. I&rsquo;ve done workshops, but they were free conference workshops. These companies pay me a very high rate to teach their staff the ins-and-outs of AngularJS in 2 to 3 days.</p>

<p>It is hard work, and I&rsquo;ll likely wind it down through 2015 as I focus on egghead.</p>

<h2>Writing&hellip;</h2>

<p>For most of the year I&rsquo;ve been slowly writing a book on <a href="https://egghead.io/essential-angularjs-grunt-build">AngularJS Automation with Grunt</a>. By the end of this year it will be complete, and I will start on the Gulp version.</p>

<p>For the most part, it serves as a source of guilt. Something I should be working on, but I&rsquo;m not. I should take this as a sign?</p>

<p>I&rsquo;ve neglected my blog and email list as well. I&rsquo;ve been totally engrossed with building the egghead business, that I&rsquo;ve kind of let this space fizzle.</p>

<p>Writing is something I enjoy, so I will get back at it. I&rsquo;m in a weird middle space where I feel like I&rsquo;ve got interesting things to say about bootstrapping a business over technical topics. The problem is I lack confidence, which isn&rsquo;t rational, because by any measure I&rsquo;ve got some experience in the area now.</p>

<h2>Travel</h2>

<p>I was all over the US in 2014 for the training. My favorite trips were probably to San Francisco. Love the energy and concentrated intelligence in that city.</p>

<p>John and I got to deliver workshops in Paris for ng-europe. This was very exciting for me, as I&rsquo;ve never been to France. Paris is amazing, and I will definitely go back. The highlight was a culinary tour by the awesome <a href="http://www.uteinparis.com/WELCOME.html">Ute Biefang</a>. If you like food and are heading to Paris, you should book a tour. It was <strong>fantastic</strong>.</p>

<p><img src="http://joelhooks.com/images/best_meal_2015.jpg" alt="best meal of 2015, hands down" /></p>

<p>This summer we went on a cross-country road trip with our 4 children. It was an epic journey to Vermont via Tennesee, NYC, and Boston.</p>

<p><img src="http://joelhooks.com/images/times_square.jpg" alt="apparently a cricket lives here" /></p>

<p>In NYC my 7 year old daughter saw a &ldquo;family&rdquo; of rats in Central Park and exclaimed, &ldquo;It&rsquo;s a dream come true!&rdquo;</p>

<p>One of her favorite books, A Cricket in Times Square, feature a mouse that gets his meals in Central Park. heh</p>

<p><img src="http://joelhooks.com/images/lake_view.jpg" alt="lovely..." /></p>

<p>This was our morning view for two weeks. Lake Champlain is awesome. We are going back next year.</p>

<h2>Driving fast!</h2>

<p>I spent a weekend at a High Performance Driver Education track event. It was <strong>freaking amazing</strong>. So much fear. So much fun.</p>

<p><img src="http://joelhooks.com/images/racing_2015.jpg" alt="vrroooooom" /></p>

<p>It was very challenging to drive into corners at speeds your mind <strong>knows</strong> are not &ldquo;safe&rdquo;, pushing the car to the limits. Highly recommended to anybody, with any vehicle. I love to drive, and thought I was good at it. I learned how little I actually know, even after 25 years of driving. The weekend improved my driving skills immensely, making me more aware of both my vehicle and the road around me.</p>

<h2>Stopped smoking for good&hellip;</h2>

<p>I&rsquo;ve had a love hate relationships with nicotine for many years. It&rsquo;s done. No vaping, no gum, no sneaking, just done. If you want to quit, I highly recommend <a href="http://www.amazon.com/exec/obidos/ASIN/0718194551/joehoobuiblo-20/ref=nosim/">Allen Carrs Easy Way to Stop Smoking</a>. It is a great book that uses cognitive behavior therapy in an effective way.</p>

<p><strong>Fuck you cigarettes.</strong></p>

<h2>Lost 50 pounds&hellip;</h2>

<p>I lost 50 pounds, which is awesome. I&rsquo;ve slacked off a bit and am back up 10, but haven&rsquo;t regressed fully into old habits. This is something I&rsquo;d definitely like to keep up through 2015 and beyond, as it sure is nice to not have that extra weight. I used the <a href="http://www.amazon.com/exec/obidos/ASIN/0982207778/joehoobuiblo-20/ref=nosim/">Primal Blueprint</a> approach, and found it to be a moderate paleo that is sustainable.</p>

<p><img src="http://joelhooks.com/images/smaller_joel.jpg" alt="smaller joel" /></p>

<p>For a brief period I was lifting weights too, and enjoying it. I was using bad form and did something to my elbow. It&rsquo;s hurt for many months, and I dread seeing a doctor because it will probably require cutting. Need to bite the bullet and just get it taken care of.</p>

<h2>What&rsquo;s next?</h2>

<p>2015 is going to be awesome. I&rsquo;ve got big plans for egghead, and look forward to many technical challenges alongside the business and marketing aspects that are fun too.</p>

<p>I plan on digging deep on reactive programming with React and RxJS while honing my functional programming skills at the same time. I&rsquo;d love to have a working knowledge of Clojure.</p>

<p>There will be more driving in my future as well. I plan on attending several HPDE events, as well as a 3-day off-road rally course at DirtFish. The latter I am particularly excited about!</p>

<p>Bring it New Year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's Make Full-Ass AngularJS Directives]]></title>
    <link href="http://joelhooks.com/blog/2014/02/11/lets-make-full-ass-angularjs-directives/"/>
    <updated>2014-02-11T15:45:00-08:00</updated>
    <id>http://joelhooks.com/blog/2014/02/11/lets-make-full-ass-angularjs-directives</id>
    <content type="html"><![CDATA[<p><em>With best intentions we set forth to create the mighty directive. The steepest slope of the dreaded AngularJS learning curve.</em></p>

<h3>The &ldquo;place where the jQuery goes.&rdquo;</h3>

<p>So what is a directive? We&rsquo;ve <a href="http://www.joelhooks.com/blog/2013/07/27/using-angularjs-stop-using-jquery-as-a-crutch/">talked about this before</a>, and decided that they are <strong>not</strong> where the jQuery goes&hellip; usually&hellip; if you <strong>are</strong> going to use jQuery, directives are <strong>definitely</strong> where it should go.</p>

<p>It&rsquo;s easy to say &ldquo;OMG, NO JQUERY&rdquo; &ndash; but what does that actually mean? What does a <strong>really kickass directive</strong> look like?</p>

<h3>The Anatomy of a Good Directive.</h3>

<p>The <a href="https://github.com/angular-ui/bootstrap">ui-bootstrap</a> library is the best singular resource on what a good directive should look like. They are solving multiple common problems in varied ways, with generally solid patterns and practices. It&rsquo;s a robust open-source project, with a constant flurry of activity.</p>

<p>When you start to dig through the library&rsquo;s src, you can see how many different styles and solutions have solved the various problem. Some are extremely complex, while some are relatively simple.</p>

<p>While the solutions <strong>are</strong> varied, there are also some common traits the ui-boostrap directives share across the library.</p>

<h4>Minimal use of the link function</h4>

<p>How many of your project&rsquo;s link functions contain <strong>all the things</strong>?</p>

<p><em>me: raises guilt hand sheepishly</em></p>

<p>Down and dirty, just toss it in the <code>link</code> function.</p>

<p>When you start to browse the ui-bootstrap code, pay attention to the <code>link</code> functions on the directives themselves.</p>

<h5>dropdown</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;dropdown&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;CA&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;DropdownController&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">isOpen</span><span class="o">:</span> <span class="s1">&#39;=?&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">onToggle</span><span class="o">:</span> <span class="s1">&#39;&amp;&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">dropdownCtrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dropdownCtrl</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span> <span class="nx">element</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong>Dropdown</strong> directive has a link function, but its sole purpose in life is to associate the directive with a controller.</p>

<p><strong>This is a good thing</strong></p>

<p>Why? Well, to be honest, directives can be a real pain in the ass to unit test. How do you make a directive easy to unit test? Don&rsquo;t give it any functionality.</p>

<p>Controllers, on the other hand, are easy to unit test, so we can avoid the headache of even thinking about unit testing a directive by offloading the logical bits to a controller.</p>

<h4>The directive&rsquo;s controller</h4>

<p>What does it look like? Basically, it looks like a normal controller.</p>

<h5>DropdownController</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;DropdownController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$attrs</span><span class="p">,</span> <span class="nx">dropdownConfig</span><span class="p">,</span> <span class="nx">dropdownService</span><span class="p">,</span> <span class="nx">$animate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span> <span class="nx">openClass</span> <span class="o">=</span> <span class="nx">dropdownConfig</span><span class="p">.</span><span class="nx">openClass</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">init</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">element</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">$element</span> <span class="o">=</span> <span class="nx">element</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">isOpen</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">isDefined</span><span class="p">(</span><span class="nx">$attrs</span><span class="p">.</span><span class="nx">isOpen</span><span class="p">)</span> <span class="o">?</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">$parent</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="nx">$attrs</span><span class="p">.</span><span class="nx">isOpen</span><span class="p">)</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">toggle</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">open</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">isOpen</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">?</span> <span class="o">!!</span><span class="nx">open</span> <span class="o">:</span> <span class="o">!</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">isOpen</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Allow other directives to watch status</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">isOpen</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">isOpen</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;isOpen&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$animate</span><span class="p">[</span><span class="nx">value</span> <span class="o">?</span> <span class="s1">&#39;addClass&#39;</span> <span class="o">:</span> <span class="s1">&#39;removeClass&#39;</span><span class="p">](</span><span class="nx">self</span><span class="p">.</span><span class="nx">$element</span><span class="p">,</span> <span class="nx">openClass</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">value</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dropdownService</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span> <span class="nx">$scope</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dropdownService</span><span class="p">.</span><span class="nx">close</span><span class="p">(</span> <span class="nx">$scope</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">onToggle</span><span class="p">({</span> <span class="nx">open</span><span class="o">:</span> <span class="o">!!</span><span class="nx">value</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;$locationChangeSuccess&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">isOpen</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s obviously <strong>much</strong> bulkier than the actual directive, but it&rsquo;s also crystal clear what the controller is doing. Normal controller stuff!</p>

<p>One particular item of note is the <code>init</code> function. In the directive above, you probably noticed that the link function did exactly one thing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">dropdownCtrl</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span> <span class="nx">element</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since you can&rsquo;t get at the element in the controller, this allows us to still have access to the element, but in a clean, testable, injected way.</p>

<p>If we were going to critique the controller, it might be about its access to <code>$element</code> at all. Is the controller the right place to be doing <em>any</em> DOM manipulation, even if it is ever so slight? Where else would we do that if we aren&rsquo;t going to do it in the <code>link</code> function or the controller?</p>

<p>It needs to go someplace, and pedantic nitpicking is just a hobby.</p>

<h4>Out at the boundaries</h4>

<p>This facet of this clean gem of a directive sparkles bright:</p>

<h5>dropdownService</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;dropdownService&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$document</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span> <span class="nx">openScope</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">open</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">dropdownScope</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">openScope</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$document</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">closeDropdown</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$document</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;keydown&#39;</span><span class="p">,</span> <span class="nx">escapeKeyBind</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">openScope</span> <span class="o">&amp;&amp;</span> <span class="nx">openScope</span> <span class="o">!==</span> <span class="nx">dropdownScope</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">openScope</span><span class="p">.</span><span class="nx">isOpen</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">openScope</span> <span class="o">=</span> <span class="nx">dropdownScope</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">close</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">dropdownScope</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">openScope</span> <span class="o">===</span> <span class="nx">dropdownScope</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">openScope</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">$document</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">closeDropdown</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$document</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="s1">&#39;keydown&#39;</span><span class="p">,</span> <span class="nx">escapeKeyBind</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">closeDropdown</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">openScope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">openScope</span><span class="p">.</span><span class="nx">isOpen</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">escapeKeyBind</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">evt</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">which</span> <span class="o">===</span> <span class="mi">27</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">closeDropdown</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The AngularJS &lsquo;service&rsquo; is where the boundaries of our applications live.</p>

<ul>
<li>connections to the outside world</li>
<li>domain/data models</li>
<li>core logic</li>
<li>&hellip;</li>
<li>the DOM?</li>
</ul>


<p>This actor is wonderful. It connects <strong>all the dropdowns</strong> and manages their shared state. In this case, we can only have one open drop down on the page. <code>dropdownService</code> keeps track of who that is, and if another drop down is opened, it snaps the current one shut before allowing the next to open.</p>

<p>Additionally, the service listens for events on the <code>document</code> to close the open drop down if the user clicks the page or hits the <code>esc</code> key.</p>

<p>One central place to encapsulate what would otherwise be confusing spaghetti logic on line 342 of a typical directive&rsquo;s <code>link</code> function.</p>

<h3>Pause and study</h3>

<p>It really pays to take pause and review a little code when you sit down to write a complex directive. For one, ui-bootstrap covers a lot of ground. The entire point of Bootstrap (proper) is to provide a robust set of <em>typical</em> components. Meaning, odds are the component you are building (at least the soul of it) is likely covered by the Boostrap component set.</p>

<p>ui-bootstrap conveniently provides this world class reference implementation of the most common web application components&hellip; the Angular Way™.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop writing For loops. Start using underscore.]]></title>
    <link href="http://joelhooks.com/blog/2014/02/06/stop-writing-for-loops-start-using-underscorejs/"/>
    <updated>2014-02-06T00:33:00-08:00</updated>
    <id>http://joelhooks.com/blog/2014/02/06/stop-writing-for-loops-start-using-underscorejs</id>
    <content type="html"><![CDATA[<p>How many for loops did you write today? This week?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">someArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">someThing</span> <span class="o">=</span> <span class="nx">someArray</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">doSomeWorkOn</span><span class="p">(</span><span class="nx">someThing</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure. That&rsquo;s harmless enough. Ugly and weird, but not something to really complain about. But this is all too common:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">someArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">someThing</span> <span class="o">=</span> <span class="nx">someArray</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">someThing</span><span class="p">.</span><span class="nx">stuff</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">doSomeWorkOn</span><span class="p">(</span><span class="nx">someThing</span><span class="p">.</span><span class="nx">stuff</span><span class="p">[</span><span class="nx">j</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which on the scale of bad code, isn&rsquo;t even <strong>that</strong> bad, but you start throwing some <code>if</code>s in there and the insanity really starts.</p>

<h2>I haven&rsquo;t written a For loop in two years.</h2>

<p>&ldquo;The hell you say?&rdquo;</p>

<p>It&rsquo;s true. Cold turkey. Not a single one (ok, you caught me, I just wrote a couple above), and my code is easier to understand because of my abstinence.</p>

<p>How&rsquo;d I do it?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">someArray</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">someThing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doSomeWorkOn</span><span class="p">(</span><span class="nx">someThing</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, even better:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">someArray</span><span class="p">,</span> <span class="nx">doSomeWorkOn</span><span class="p">);</span> <span class="c1">//thanks paulmcpazzi!</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s <a href="http://underscorejs.org/">underscorejs</a> in action. Clean, easy to read, short, no variables, stacks of semi-colons&hellip; just plain nice.</p>

<p>Here&rsquo;s another example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">someArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">someThing</span> <span class="o">=</span> <span class="nx">someArray</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">// my hand already hurts from all this damn typing</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">someThing</span><span class="p">.</span><span class="nx">isAwesome</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">someArray</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, a typical use case for the time honored <code>for</code> loop. Meh. Like an ex-smoker or a recently converted vegan, even the sight of the thing fills me with righteous indignation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">someArray</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">someThing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">someThing</span><span class="p">.</span><span class="nx">isAwesome</span> <span class="o">===</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the underscore method name <code>filter</code> suggests, this handy 3 lines of easy to parse code gives me a new array of <strong>awesome things</strong>.</p>

<p>Or maybe I&rsquo;d like to do some work on the things and get a new array of the results?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">someArray</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">someThing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">trasformTheThing</span><span class="p">(</span><span class="nx">someThing</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those three functions are insanely useful on a daily basis, and don&rsquo;t even scratch the surface of what underscore brings to the table.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">grandTotal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">somePercentage</span> <span class="o">=</span> <span class="mf">1.07</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">severalNumbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">33</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">42</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">i</span><span class="p">;</span> <span class="c1">// don&#39;t forget to hoist those indices;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">severalNumbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">aNumber</span> <span class="o">=</span> <span class="nx">severalNumbers</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">grandTotal</span> <span class="o">+=</span> <span class="nx">aNumber</span> <span class="o">*</span> <span class="nx">somePercentage</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">somePercentage</span> <span class="o">=</span> <span class="mf">1.07</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">severalNumbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">33</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">42</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">grandTotal</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">grandTotal</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">severalNumbers</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">runningTotal</span><span class="p">,</span> <span class="nx">aNumber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">runningTotal</span> <span class="o">+</span> <span class="p">(</span><span class="nx">aNumber</span> <span class="o">*</span> <span class="nx">somePercentage</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems a little weird at first, and I <strong>still</strong> hit the docs for methods like <strong>reduce</strong> above. Knowing they exist, and a flat refusal to use for loops is my primary weapon. The above methods are really just scratching the surface. The underscorejs library is filled with awesome utilities like this that can be combined together to create new and wonderful things.</p>

<h2>The 30 day no-loop challenge</h2>

<p>Stop.</p>

<p>For the next 30 days, don&rsquo;t write any for loops. If you see a nasty pile of those gnarly things, replace them with an <strong>each</strong> or a <strong>map</strong>. Do a little <strong>reducing</strong>. And let me know how it goes!</p>

<p>Beware. Underscore is the gateway to functional programming. What has been seen, can&rsquo;t be unseen. In a good way!</p>

<p>If you&rsquo;re wanting to dig a little deeper, you should jump over to this tutorial on <a href="http://reactive-extensions.github.io/learnrx/">functional programming in javascript</a>. It&rsquo;s great and only takes about &frac12; hour to work through. It is &ldquo;how the sausage is made&rdquo; fundamentals for the underscore functions I used above. Lot&rsquo;s of wholesome nerd fun!</p>

<p><strong>note</strong>: <em>As a more performant alternative to underscore, you might check out <a href="http://lodash.com/benchmarks">lodash</a></em></p>

<p><strong>note</strong>: <em>it should also be noted that modern browsers support the above methods natively. <code>Array.forEach</code>, <code>Array.reduce</code>, and <code>Array.map</code> exist, but to use them you likely need to create shims to fallback for cases when they don&rsquo;t exist. For me, having the consistent underscore (lodash) API is much more convenient. YMMV</em></p>

<p><strong>note</strong>: <em>Yes, for loops <strong>are</strong> faster. I optimize for readability and ease of use for my team before squeezing performance out of CPUs. I don&rsquo;t write games, or rich animated consumer experiences. Big projects, 10s of developers, code that already trends towards sprawling and messy.</p>

<p>The &ldquo;clean readable code&rdquo; optimization pays huge dividends, even if it comes at the cost of (very) marginal performance hits.</p>

<p>Now, if we are doing a big list of items in Angular, we focus on performance in terms of CPU, but even then, the only time we hit a wall with an unoptimized datagrid was on last-gen Android phones.</p>

<p>Clean first! ;)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build a Subscription Service on Rails: A Noob's Guide]]></title>
    <link href="http://joelhooks.com/blog/2013/10/30/how-to-build-a-subscription-service-on-rails-a-noobs-guide/"/>
    <updated>2013-10-30T11:19:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/10/30/how-to-build-a-subscription-service-on-rails-a-noobs-guide</id>
    <content type="html"><![CDATA[<p>There are few things as nerve-wracking as pushing your first subscription
website into production. Am I covering all the bases? Will everything break and
leave me in a pit of customer support sadness? How do I even take payments? Are
they just going to laugh at me?</p>

<h3>Some Background</h3>

<p>My friend John makes <a href="http://egghead.io">awesome AngularJS training videos</a>. They are short, topical, and
presented clearly. He loves making training videos, but has very little interest
in building out a website and marketing the content. &ldquo;Selling things on the
internet&rdquo; can be a chore. If you&rsquo;re just selling one off digital things, it is
fairly straight forward, but if you are looking to build out a website, allow
users to register, and charge them on a recurring basis it can be anything but.</p>

<p>As it happens, I&rsquo;m very interested in these problems. For the last couple of
years I&rsquo;ve been <a href="http://www.joelhooks.com/blog/2013/06/07/what-i-learned-from-brennan-dunns-consultancy-masterclass-w-slash-sketchnotes/">taking
classes</a>
and <a href="http://www.joelhooks.com/blog/2013/06/06/my-sketchnotes-and-thoughts-from-baconbizconf-2013/">going to
conferences</a>
that boil down to selling things on the internet. Recurring revenue is alluring.
My gurus are <strong>all about</strong> finding pain and providing immense value to people in
exchange for money. This is what I want to do too.</p>

<p>Wonder Twin powers; activate!</p>

<h3>Digging in: The Stack</h3>

<p>We have content, traffic, and a solid reputation. What&rsquo;s the next step?</p>

<p>To actually build something, of course. <a href="http://www.joelhooks.com/blog/2013/09/15/why-i-built-an-angularjs-training-site-on-rails/">Rails was the clear
choice</a>
when it came time to decide what framework to use. It is mature, easy (enough)
to use, and has a metric shit-ton of resources for building this type of thing.</p>

<p>It is also astonishingly easy to deploy Rails apps to Heroku. This has been a
huge win. Using the free Heroku tier has allowed me to have a production and
staging environment a few keystrokes away. For production, Heroku quickly becomes not free as you add in background workers, SSL, and other essential pieces, but you can go a <strong>long</strong> way with free.</p>

<h3>ZOMG There is so much to learn!</h3>

<p>I&rsquo;ve been developing software professionally for a few years. My roles are
primarily on the UI side of things, but I&rsquo;ve built a few full-stack solutions in
the past with Django. Over the years I&rsquo;ve always <em>wanted</em> to learn Rails, I just
never had anything real to build. Tutorials and books can be boring, especially
with no context of something &ldquo;real&rdquo; that you actually care about to build. That
said, there were a few excellent resources that helped me on the way:</p>

<p><a href="http://ruby.railstutorial.org/">Michael Hartl&rsquo;s Rub on Rails Tutorial</a>: Outside
of basic Ruby syntax, this is where you want to start. The web version is free,
and he guides you through building a &ldquo;real&rdquo; app with Rails in a clear, easy to
understand manner.</p>

<p><a href="http://railsapps.github.io/">Daniel Kehoe&rsquo;s RailsApp Project</a>: This was a huge
boost for me. It covered all the bases. I wanted to build an app with Rails.
Check. I wanted to use Twitter Boostrap with Rails. Check. I wanted to have
authentication and authorization in the app. Check. I wanted to integrate
recurring subscription payments. Check.</p>

<p><a href="http://www.petekeen.net/mastering-modern-payments">Peter Keen&rsquo;s Mastering Modern
Payments</a>: If you are going
to sell stuff via a Rails app, <strong>buy this book today</strong>. It saved me <strong>so much
time</strong> and instilled a confidence that I might never have had without it.
RailsApp is pretty good, but for me it started to break down when I wanted to
add payment. I needed deeper understanding and control, and Pete&rsquo;s book
delivered the knowledge I needed in a concise 120 page guide. I&rsquo;d recommend
getting the verion with the code, because it was a huge help to me.</p>

<p><a href="http://gilesbowkett.blogspot.com/2013/10/new-ebook-software-as-disservice-fixing.html">Giles Bowkett&rsquo;s Software as a
Disservice</a>
is a direct critique of RailsApp. It is harsh, but constructive. It addresses
code smells that I had noticed, enforced some of what I learned in Pete&rsquo;s book,
and lays out some solid practices that a Rails noob like me won&rsquo;t learn in 1000
searches that result in a Stack Overflow answer. It&rsquo;s an opinionated style and
practices guide. <em>note: RailsApp has its flaws, and it was extremely useful to
me. Daniel is passionate and has put out a lot of excellent material, but
charging people real money for a product or service is terrifying. I <strong>needed</strong>
this critique to plug some serious holes in the implementation. It is important
to recognize that Giles is critiquing the <strong>code</strong> and not the developer that
wrote it.</em></p>

<p>These four sources were keys to the successful launch of egghead.io&rsquo;s Pro
subscription service. Along with countless posts, Stack Overflow answers, and
documentation written by the Ruby/Rails community. It is amazing. Now is a
<strong>very</strong> good time to be a nerd.</p>

<h3>Taking Payments: *scared face*</h3>

<p>It really is terrifying. Maybe it isn&rsquo;t as scary if you&rsquo;ve done it before and
know what you are doing. I didn&rsquo;t qualify.</p>

<p>Luckily we live in a fantastic age of modern convenience.</p>

<p><strong>Stripe</strong>.</p>

<p>What an amazing service.</p>

<ul>
<li>No complicated merchant accounts or setup</li>
<li>By developers, for developers</li>
<li>Wonderful API</li>
<li>Excellent resources for testing</li>
<li>Solid documentation</li>
<li>Easy integration</li>
</ul>


<p>They handle a huge amount of the drudgery invloved with taking payments from
people on the internet. They remove the horrors of PCI compliance by providing
an implementation that allows you to take credit cards without ever actually
having the actual credit card numbers touch your system. They travel over
secure-socket-layer directly to Stripe, who responds with a token that allows
you to initiate an authorized charge. It is beautiful. Once you&rsquo;ve authorized a
subscription, Stripe manages the recurring billing for you.</p>

<p>To help with the subscriptions, I found the <a href="https://github.com/andrewculver/koudoku">Koudoku
gem</a> to be a great resource. While I
had to fork it and manipulate it to some extent for my specific needs, it does a
lot of the heavy lifting. I&rsquo;m on the fence about using a gem to handle all of
this. On one hand, it is <strong>very</strong> easy. On the other, having your subscription
implementation tucked away in a &ldquo;black box&rdquo; can bite you when the shit hits the
fan. Give and take.</p>

<h3>What would I do differently?</h3>

<p><strong>Testing</strong></p>

<p><strong>Testing</strong></p>

<p><strong>Testing</strong></p>

<p>It is tough, as a noob, to get in and write proper tests. <strong>All</strong> of the
resources I listed above discuss testing. I skipped it. You know what is
<strong>really hard</strong>? Going back through a non-trivial system and writing a solid
test suite.</p>

<p>This can&rsquo;t be said enough. Tests should <strong>guide design of code</strong> and when they
are tacked on later, they lose a big chunk of value. This isn&rsquo;t to say they
don&rsquo;t still provide immense value, but &ldquo;test later&rdquo; often means &ldquo;test never&rdquo; and
this isn&rsquo;t a good situation to be in.</p>

<p>I&rsquo;m working on retrofitting tests, but it is a chore. Test early, test often.</p>

<h3>Summary</h3>

<p>Building a subscription service is scary. Luckily the internet is stuffed full
of open source projects, examples, and helpful people sharing knowledge. Some of
it is free, but some of the best resources cost a few dollars. Worth every
penny.</p>

<p>Rails is a great framework for this sort of thing. I&rsquo;d recommend it highly, if
you are trying to build an application that requires recurring billing for your
users.</p>

<p><strong>Test early, test often</strong>. It&rsquo;s an additional thing to learn and understand if
you are just starting out, but it is worth the effort. If I could go back and do
anything differently, it would be to write solid tests along the way. Don&rsquo;t make
the same mistake with your apps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Built an AngularJS Training Site on Rails]]></title>
    <link href="http://joelhooks.com/blog/2013/09/15/why-i-built-an-angularjs-training-site-on-rails/"/>
    <updated>2013-09-15T11:24:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/09/15/why-i-built-an-angularjs-training-site-on-rails</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re into AngularJS at all, you are probably familiar with the kickass <a href="http://egghead.io/">AngularJS video training</a> from egghead.io. If you haven&rsquo;t seen egghead.io, it is a collection of 50+ short &ldquo;bite-sized&rdquo; training videos, largely focused on the AngularJS framework. <div style="float: right; padding:5px;"><a class="nofancybox" href="http://egghead.io"><div style=" height: 191px; width: 150px; background-image: url(/images/egghead_logo.png);"></div></a></div>The videos are created by (and feature) my friend <a href="https://twitter.com/johnlindquist">John Lindquist</a> playing Webstorm like a violin while explaining basic AngularJS concepts.</p>

<p>Over the last few months John and I have been discussing egghead.io, and what its future holds. Is it an AngularJS training site? Is John going to be the only presenter? Is the donation model the best approach for keeping the lights on?</p>

<h2>The Problem</h2>

<p>egghead.io was a static site, built on AngularJS. It was using the YouTube API to grab a list of videos from a playlist, and list them out in a simple list. It had a permanent &ldquo;in progress, fixing stuff&rdquo; message in the top left, and a request (plea?) for donations in the top right. When you would click on of the videos, it would display the embedded video in the page.</p>

<p><img src="http://joelhooks.com/images/egghead_before.jpg" alt="egghead.io on AngularJS" /></p>

<p>Frankly, this was adequate for John&rsquo;s needs. He just wants to create content and teach people. He didn&rsquo;t want to think about:</p>

<ul>
<li>SEO</li>
<li>Content pipelines</li>
<li>Information architecture</li>
<li>Server maintenance</li>
<li>Marketing</li>
</ul>


<p>Set it and forget it.</p>

<p>As it happens, I&rsquo;m really interested in all of those topics.</p>

<h2>The Solution Part 1: <strong>Ruby on Rails</strong></h2>

<p>I was asked, &ldquo;Why would you build an AngularJS training site with Ruby on Rails?!&rdquo;</p>

<p>This was the first time I&rsquo;ve used Rails, outside of tutorial type projects. It has been floating at the top of my &ldquo;to learn&rdquo; list for several years. Aside from basic nerd compulsion to explore cool technology, it became rapidly apparent that this was the <em>right tool for the job</em>.</p>

<p>One of the drawbacks of a single page app, built with AngularJS or another similar framework, is that SEO become extremely tricky. There are approaches for overcoming this, but it is beyond trivial. egghead.io is a web <strong>page</strong> with the purpose of delivering content. Web pages need to searchable, so people hunting Google will actually be able to find them. Egghead had a bit of search traffic. It actually does fairly well (2nd page) in a search for &ldquo;AngularJS&rdquo;. What wasn&rsquo;t getting search hits was the video lessons themselves.</p>

<p><img src="http://joelhooks.com/images/egghead_after.jpg" alt="egghead.io gets a facelift" /></p>

<p>By rendering the pages on the server, and delivering them to the browser, Google can now crawl the pages and actually show the pages to searchers interested in the content. It didn&rsquo;t take long to see a bump in organic search traffic.</p>

<p><img src="http://cl.ly/image/2e2p422t2f2R/Screen%20Shot%202013-09-15%20at%2012.29.01%20PM.png" alt="A nice spike in search traffic for egghead.io" /></p>

<p>I was also able to get authentication squared away with Devise and CanCan. It was a bit tricky, since I chose Rails 4 and Bootstrap 3. Many of the gems required using git branches, but after some trial and error it all dialed in very nicely.</p>

<p>Rails wasn&rsquo;t the only choice for this. I also considered Django and a Node stack, but ultimately the &ldquo;convention over configuration&rdquo; nature of Rails won my heart. It is <strong>so freaking easy</strong> and pleasant to work with. After a month, it has earned a well-deserved slot in my web development toolbelt.</p>

<h2>The Solution Part 2: <strong>Heroku</strong></h2>

<p>You want to talk about <strong>freaking easy</strong>? Heroku. Frictionless. Magic. Amazing. Awesome. Kickass. Incredible. ZOMG WOW.</p>

<p>If it isn&rsquo;t obvious, I really love Heroku.</p>

<p>Even with a fair bit of traffic, I&rsquo;m able to comfortably get away with the free plan. Through the use of strategic caching and CloudFront to serve static content, the server itself doesn&rsquo;t have to do much heavy lifting.</p>

<p><code>git push heroku master</code></p>

<p><i class='emoji emoji1f493'></i></p>

<p>I&rsquo;m not scared of managing my own VPS, but there is enough work to do without getting into SYSOP tasks. Heroku ftw.</p>

<h2>The Solution Part 3: <strong>Wistia</strong></h2>

<p>TIL: <strong>video seo</strong> is a thing.</p>

<p>You ever notice your search results that show a preview thumbnail of a video with the little &ldquo;play&rdquo; icon? Usually these are for YouTube results. This is because, and is no shocker, Google is <em>really good at video SEO</em>. For YouTube. Try as you might, if you are hosting your videos on YouTube, you will <strong>never</strong> see these &ldquo;rich snippets&rdquo; on your own pages where you embed the videos.</p>

<p>Video SEO is black magic voodoo. It involves creating a specific sitemap XML that correlates media to a URL. It looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;url&gt;</span>
</span><span class='line'>  <span class="nt">&lt;loc&gt;</span>http://egghead.io/lessons/bower-introduction-and-setup<span class="nt">&lt;/loc&gt;</span>
</span><span class='line'>  <span class="nt">&lt;video:video&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:content_loc&gt;</span>http://embed.wistia.com/deliveries/4f239fa48f86dd8854a707fa6384de5aa3c54db7/file.mp4<span class="nt">&lt;/video:content_loc&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:thumbnail_loc&gt;</span>http://embed.wistia.com/deliveries/3df06507df5589c130ceb906a59d8f04f9a5f034/file.png<span class="nt">&lt;/video:thumbnail_loc&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:title&gt;</span>Bower - Introduction to Bower<span class="nt">&lt;/video:title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:description&gt;</span>Bower is a package manager for Javascript libraries that allows you to define, version, and retrieve your dependencies. In this tutorial, John gives a quick introduction to Bower and will show you how to get started.<span class="nt">&lt;/video:description&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:publication_date&gt;</span>2013-09-05T14:27:26+00:00<span class="nt">&lt;/video:publication_date&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:family_friendly&gt;</span>yes<span class="nt">&lt;/video:family_friendly&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:duration&gt;</span>168<span class="nt">&lt;/video:duration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:tag&gt;</span>bower tutorial<span class="nt">&lt;/video:tag&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:tag&gt;</span>bower setup<span class="nt">&lt;/video:tag&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:tag&gt;</span>bower angularjs<span class="nt">&lt;/video:tag&gt;</span>
</span><span class='line'>    <span class="nt">&lt;video:tag&gt;</span>bower screencast<span class="nt">&lt;/video:tag&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/video:video&gt;</span>
</span><span class='line'><span class="nt">&lt;/url&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You <strong>can</strong> associate your YouTube videos with a video sitemap, but it is fruitless. Given the same video, Google will <strong>always</strong> favor YouTube.</p>

<p>That&rsquo;s where <a href="http://wistia.com/">Wistia</a> comes in.</p>

<p>Wistia offers &ldquo;Professional video hosting built specifically for business.&rdquo; They host and stream videos, give awesome analytics, embedding, and (perhaps most importantly) <strong>easy to use video SEO tools</strong>.</p>

<p>Videos on the egghead.io domain are embedded via Wistia, and not YouTube. John is still posting to YouTube, but on the site we are able to take advantage of Wistia and take back some of the &ldquo;Google juice&rdquo; that would otherwise be delivered solely to YouTube.</p>

<p><img src="http://cl.ly/image/0X2C2443413h/Screen%20Shot%202013-09-11%20at%208.05.26%20AM.png" alt="rich snippets for the egghead.io domain" /></p>

<p>I&rsquo;ll admit to being overly excited when I saw the first &ldquo;rich snippet&rdquo; attached to an egghead.io domain. Maybe I&rsquo;m a nerd?</p>

<h2>The Solution Part 4: <strong>General SEO</strong></h2>

<p>Wistia has the video SEO covered, but an interesting aspect of video is that while you can tell Google the video exists, their robots aren&rsquo;t smart enough (yet) to analyze the video for keywords. To get over this hurdle, you can use transcripts of the video and provide the spiders the words they crave.</p>

<p>For this we used <a href="https://castingwords.com/">CastingWords</a>. I was amazed, despite the videos technical nature, the transcripts we got back were very accurate.</p>

<p>Transcripts are a win/win/win. Lots of people would rather just read a block of text for speed. There are people that can&rsquo;t hear at all, so audio content is useless to them. Search spiders love text.</p>

<p>Along with the transcripts we&rsquo;ve been going through the backlog of videos adding summary descriptions to each. It is a chore, but it is worth the effort.</p>

<h2>The Solution Part 5: <strong>Open Source isn&rsquo;t Charity</strong></h2>

<p>The donation model in open-source software is flawed. It is not charity. It takes a lot of <strong>work</strong> to build high quality open source software. It takes a lot of <strong>work</strong> to write documentation and provide training.</p>

<p><img src="http://joelhooks.com/images/programmer.jpg" alt="Ain't too proud to beg." /></p>

<p>We can do better than asking for hand-outs.</p>

<p>While lots of generous visitors (~500) have donated to egghead.io over the last year, we decided to take a different approach. Instead of simply asking for a donation, what if we <a href="http://egghead.io/first-50-video-download-offline-bundle">bundled up the first 50 AngularJS videos and offered an &ldquo;offline HD bundle&rdquo;</a> of all the videos instead? This way we aren&rsquo;t accepting charity, and giving supporters something tangible for their hard-earned $$.</p>

<p>This approach has some limitations. All of the videos are streaming for free a back click away, but having the full resolution copies on your hard drive is something people want. It also gives a people a way to &ldquo;donate&rdquo; and get a receipt that can be expensed or deducted as a training cost.</p>

<p>It&rsquo;s been a huge success. The lights will be on at egghead.io for quite some time. We will be able to expand the site, and explore a wider range of high quality content.</p>

<h2>Conclusion and Next Steps</h2>

<p>I love AngularJS. It is an amazing tool. It isn&rsquo;t always the right tool for the job. If you are building web applications it might be a perfect fit. If you are building web <strong>pages</strong> the &ldquo;single page application&rdquo; approach has some severe flaws. Ruby on Rails solves these nicely.</p>

<p>Video provides many distinct challenges from a delivery and SEO perspective. YouTube makes it incredibly easy to share your content online, but the &ldquo;cost of free&rdquo; is that Google will leverage your content to take your audience away from your site and into their ecosystem. They give YouTube search priority, and squeeze your content for every drop of juice they can. By moving to a commercial hosting service like Wistia, you can regain a lot of control over the hard work you&rsquo;ve put into your content.</p>

<p>We aren&rsquo;t running a charity, and asking for donations is a habit I&rsquo;d like to see broken in OSS. There are clearly better ways to be compensated for our efforts, and I know that I <strong>love</strong> supporting OSS. It makes my day to send a content producer $$ for a high-quality book, workshop, or other training. I get smarter, they get paid. Everybody wins.</p>

<p><img src="http://joelhooks.com/images/egghead_before_after.jpg" alt="the before and after of egghead.io" /></p>

<p>Working on the relaunch of egghead.io has been a lot of fun. It has allowed me to put to use a lot of the things I&rsquo;ve been learning over the last year in regards to SEO, conversion rate optimization, and generally building a modern web page. It is <strong>extremely awesome</strong> to have a project that I care deeply about, and can work on lovingly in my free time. I love my enterprise clients, but having a little techno proto-baby to feed and care for fills my heart with joy. Again, I might be a nerd ;)</p>

<p>Now I&rsquo;m looking forward to publishing my first screencast to the site! It should be soon, so be on the lookout :></p>

<p>P.S. If you&rsquo;re looking to build an AngularJS site <strong>on</strong> Rails, I highly recommend <a href="http://www.fullstack.io/edu/angular/rails/">this book</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Dependency Injection in AngularJS]]></title>
    <link href="http://joelhooks.com/blog/2013/08/18/configuring-dependency-injection-in-angularjs/"/>
    <updated>2013-08-18T12:45:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/08/18/configuring-dependency-injection-in-angularjs</id>
    <content type="html"><![CDATA[<p>Dependency injection is the act of supplying values or object instances (dependencies) to target objects
from outside of the target object. In many (most?) cases this is automated
by a framework, such as AngularJS.</p>

<p>This means that a given target object does <strong>not</strong> create its own dependencies,
through the use of the <code>new</code> keyword or other creation methods.</p>

<p>By creating and managing dependencies
outside of an object, it makes it much easier to switch out that dependency as
needed. This is very useful when you are writing your unit tests, and can have
many advantages in larger systems.</p>

<p>There are only three ways for an object to resolve its dependencies:</p>

<ul>
<li>internally, via the <code>new</code> operator</li>
<li>lookup via a global variable (requirejs is an example)</li>
<li>the dependency is passed to the object</li>
</ul>


<p>The third option is <em>dependency injection</em>, and it is the preferred approach in
AngularJS apps.</p>

<h2>Defining your dependencies</h2>

<p>Dependency injection is a core feature of AngularJS. There are 3 approaches to
defining your dependencies, ordered by complexity from least to most:</p>

<ul>
<li>module.service</li>
<li>module.factory</li>
<li>module.provider</li>
</ul>


<p><strong>note:</strong> <em>AngularJS also provides <code>value</code> and <code>constant</code> dependencies. We aren&rsquo;t
going to get into those two today.</em></p>

<p>Both <code>service</code> and <code>factory</code> are abstractions that sit on top of <code>provider</code>.
Using <code>factory</code> and <code>provider</code> will give you more flexibility, but are more
verbose.</p>

<p>Before we look at how to use these tools, let&rsquo;s take a look at the AngularJS
source code and understand how they work.</p>

<h3>Interlude into the AngularJS internals</h3>

<p>If you&rsquo;re a geek like me, you might be curious as to what is going on under the hood
when you declare dependencies.</p>

<p>I mentioned earlier that <code>service</code> and <code>factory</code> were abstractions on top of <code>provider</code>.
To show you exactly how that works, we need to open up <code>injector.js</code> in <code>src/auto/</code>
folder in the AngularJS source code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">function</span> <span class="nx">provider</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">provider_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">provider_</span><span class="p">)</span> <span class="o">||</span> <span class="nx">isArray</span><span class="p">(</span><span class="nx">provider_</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">provider_</span> <span class="o">=</span> <span class="nx">providerInjector</span><span class="p">.</span><span class="nx">instantiate</span><span class="p">(</span><span class="nx">provider_</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">provider_</span><span class="p">.</span><span class="nx">$get</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nx">$injectorMinErr</span><span class="p">(</span><span class="s1">&#39;pget&#39;</span><span class="p">,</span> <span class="s2">&quot;Provider &#39;{0}&#39; must define $get factory method.&quot;</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">providerCache</span><span class="p">[</span><span class="nx">name</span> <span class="o">+</span> <span class="nx">providerSuffix</span><span class="p">]</span> <span class="o">=</span> <span class="nx">provider_</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">factory</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">factoryFn</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">provider</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="p">{</span> <span class="nx">$get</span><span class="o">:</span> <span class="nx">factoryFn</span> <span class="p">});</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">service</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">constructor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">factory</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$injector&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$injector</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$injector</span><span class="p">.</span><span class="nx">instantiate</span><span class="p">(</span><span class="nx">constructor</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see at a glance, <code>service</code> calls <code>factory</code> which calls <code>provider</code>. So, when it
gets right down to it, these three methods are the exact same thing. Convenient!</p>

<p>Almost the exact same thing.</p>

<p>There is a subtle difference. The AngularJS <code>service</code> uses
<code>$injector.instantiate</code> on the constructor function that you pass in. This means
that internally the <code>service</code> creates an instance of your function with the
<code>new</code> operator. This will provide the resulting object a valid &lsquo;this&rsquo; scope.</p>

<p>Using <strong><code>factory</code> doesn&rsquo;t call <code>new</code> on the function that is passed in</strong>.
When using <code>factory</code>, the function that is passed in is called directly, and an
object is expteded to be returned.</p>

<p>Hat tip to
<a href="http://twitter.com/ThomasBurleson">@ThomasBurleson</a> for pointing this
out. This can be confusing if encountered in the wild. Now you know.
Half the battle.</p>

<p>Let&rsquo;s start with the simplest use case. The <code>service</code>.</p>

<h3>Defining a service in AngularJS</h3>

<p>A service instantiates a constructor function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;myApp.myModel&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">MyModel</span><span class="p">(</span><span class="nx">asyncService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">someApi</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">asyncService</span><span class="p">.</span><span class="nx">getStuff</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;myModel&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;asyncService&#39;</span><span class="p">,</span> <span class="nx">MyModel</span><span class="p">]);</span> <span class="c1">//simple option</span>
</span><span class='line'><span class="p">}(</span><span class="nx">angular</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example we are creating a module that will store a model that grabs data from some asynchronous
service. The <code>myModel</code> service will return an instance of <code>MyModel</code> when it is requested
for injection by other objects. The instance of <code>MyModel</code> is a singleton, and only one instance will
ever be created and used by the application.</p>

<p>This example could actually be even simpler if the injectable doesn&rsquo;t require any additional
dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">&#39;myModel&#39;</span><span class="p">,</span>  <span class="nx">MyModel</span><span class="p">);</span> <span class="c1">//most simple option</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>module.service</code> requires only two arguments. A string for its unique name, and a constructor
to create an instance of. This approach is useful, and most of the time is probably all you need
for your application.</p>

<p>When you need more flexibility than the <code>service</code> provides, it is time to look at <code>factory</code>.</p>

<h3>Defining a factory in AngularJS</h3>

<p>A factory returns an object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;myApp.myModel&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">MyModel</span><span class="p">(</span><span class="nx">asyncService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">someApi</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">asyncService</span><span class="p">.</span><span class="nx">getStuff</span><span class="p">();</span> <span class="c1">//promise?</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">module</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myModel&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;asyncService&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">asyncService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//could do some stuff here</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">(</span><span class="nx">asyncService</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}]);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}(</span><span class="nx">angular</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using a <code>factory</code> provides additional flexibility. By providing a factory function
over a straight constructor, you are provided with the opportunity to do some work
prior to returning the object. You are also in charge of creating the
instance that you want returned, unlike <code>service</code>, which creates the
instance for the constructor function you provide.</p>

<p>The above example is obviously not
doing anything interesting, but when you need to do some work prior to resolving a
dependency, a factory can be a good choice.</p>

<p>In the real world, I&rsquo;ve used <code>factory</code> to provide a configurable mock data &ldquo;mode&rdquo;. The
factory function would check to see which mode the app was in, and dynamically switch
between mock and real data. This can be incredibly handy when you want to work with out
depending on external services.</p>

<p>Note that the factory function will be called exactly <strong>one time</strong>. Any work you do
will only be done once, and <code>myModel</code> will be whatever your factory function returns.
In this case, we are simply returning an instance of <code>MyModel</code>, but a factory can return
objects <em>and</em> functions. Use that to your advantage.</p>

<p>The last way to define dependencies is with <code>provider</code>. Let&rsquo;s look at that next.</p>

<h3>Defining a provider with AngularJS</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">angular</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;myApp.myModel&quot;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">MyModel</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">MyModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">asyncService</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">someApi</span><span class="o">:</span> <span class="kd">function</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">asyncService</span><span class="p">.</span><span class="nx">getStuff</span><span class="p">();</span> <span class="c1">//promise?</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">myModelProvider</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">model</span><span class="o">:</span> <span class="k">new</span> <span class="nx">MyModel</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$get</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;asyncService&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">asyncService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">asyncService</span> <span class="o">=</span> <span class="nx">asyncService</span><span class="p">;</span> <span class="c1">//&quot;manual&quot; dependency injection</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">;</span> <span class="c1">//resolved for the lifetime of app</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">modules</span><span class="p">.</span><span class="nx">provider</span><span class="p">(</span><span class="s1">&#39;myModel&#39;</span><span class="p">,</span> <span class="nx">myModelProvider</span><span class="p">);</span>
</span><span class='line'><span class="p">}(</span><span class="nx">angular</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, <code>provider</code> is lower level. Explicit and verbose. The <code>$get</code> function
is used by AngularJS internally for the injector. A provider is <strong>required</strong> to have a <code>$get</code>
function. When using <code>factory</code> (and <code>service</code> as well) the <code>$get</code> function is defined for
you.</p>

<p>For all practical purposes you will likely never need to use <code>provider</code> unless you are a
control freak. In most circumstances a <code>factory</code> or <code>service</code> will suffice, but it is nice
to know that <code>provider</code> is there, if you needed that level of explicit control for some reason.</p>

<p>One thing to note about providers is that the provider is <em>available during <strong>configuration phase</strong> of a module</em>. While I haven&rsquo;t found a specific use case for this, it is something to have in your toolbox.</p>

<h3>A little trick for dynamic dependencies</h3>

<p>I mentioned before that with a <code>factory</code> (or <code>provider</code>) you can return an object or a function.
As it turns out, this can be very useful if you need to dynamically update a resolved dependency.
Here&rsquo;s a simple example using a factory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;myDynamicInjectable&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">count</span> <span class="o">=</span> <span class="nx">count</span> <span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is an extremely trivial example, but now when you inject <code>myDynamicInjectable</code> and call it,
it will return the freshly incremented <code>count</code>.</p>

<p><strong>warning:</strong> <em>don&rsquo;t do this. There are two things wrong with this example. It is storing state
with the count variable, and then it is manipulating state. This isn&rsquo;t the appropriate location
for either of those activities! A better solution would be to create an object that stored
that state and provided a nice API for manipulating it.</em></p>

<p>A more realistic (useful) use of this might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;getCurrentShoppingCart&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;getCurrentAccount&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">getCurrentAccount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//getCurrentAccount is also a factory that returns a function</span>
</span><span class='line'>        <span class="c1">//perhaps a user can have multiple accounts?</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">getCurrentAccount</span><span class="p">().</span><span class="nx">shoppingCart</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a ton of dynamic flexibility you can take advantage of when returning functions from
both the <code>provider</code> and <code>factory</code> approaches. I&rsquo;d proceed with caution. You could easily abuse this
flexibility. Don&rsquo;t use this approach to manipulate and/or store state in the providers! The
job of these tools is to <strong>resolve dependencies</strong>, and should be used only to <strong>resolve dependencies</strong>.</p>

<h2>Conclusion</h2>

<p>AngularJS provides several ways to configure dependency injection. From the simple <code>service</code> to the more flexible
<code>factory</code> and <code>provider</code> approaches. You should have a solid understanding of how these work
under the hood, and what situations are appropriate for each method.</p>

<p>P.S. This article is the expansion of the answer to a question that was emailed to me.
If you have any questions, I&rsquo;d love to help you out. My email and twitter can be found below, and I
answer them all.</p>

<p><strong>Related:</strong></p>

<ul>
<li><a href="http://joelhooks.com/blog/2013/05/01/when-is-a-singleton-not-a-singleton/">AngularJS, Dependency Injection, and When Is a Singleton Not a Singleton?</a></li>
<li><a href="http://joelhooks.com/blog/2013/04/24/modeling-data-and-state-in-your-angularjs-application/">Modeling Data and State in Your AngularJS Application</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn AngularJS this Weekend]]></title>
    <link href="http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend/"/>
    <updated>2013-08-03T23:36:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend</id>
    <content type="html"><![CDATA[<p>AngularJS has a reputation for a steep learning curve. It&rsquo;s definitely complex, but follows the 80/20 rule. <strong>20% of the features are what you will use 80% of the time</strong>. If you are new to AngularJS and have a weekend to study, there are some very high quality resources that will let you <strong>start Monday with a strong working knowledge of AngularJS</strong>.</p>

<p>Already know AngularJS? Feel free to skip ahead. These resources are excellent, and you&rsquo;re bound to learn something.</p>

<h2>The Official Tutorial ~4hrs</h2>

<p>Start with <a href="http://docs.angularjs.org/tutorial">the official tutorial</a>. It provides a very straight forward overview of AngularJS and walks step by step through building a simple app. When you&rsquo;re done, you should have <strong>a solid understanding of the basics</strong> and the vocabulary you will need to move on to the next step.</p>

<p>The official tutorial is <em>very</em> well put together. Unfortunately it utilizes the angular-seed project as a template. The angular-seed project is fine for quickly throwing together a working AngularJS app, but it doesn&rsquo;t provide a structure that scales well in a production application.</p>

<p><strong>Don&rsquo;t use the angular-seed to start your real projects!</strong> It&rsquo;s a learning tool only.</p>

<h2>Kickass (<strong>free!</strong>) Video Tutorials on Egghead.io ~3hrs</h2>

<div style="float: left; padding:10px;"><a class="nofancybox" href="http://egghead.io"><div style=" height: 191px; width: 150px; background-image: url(/images/egghead_logo.png);"></div></a></div>


<p>You&rsquo;ve done the tutorial, and should have a good grasp of the basics. Your next stop is John Lindquist&rsquo;s <a href="http://www.egghead.io/">egghead.io for free AngularJS videos</a>. This series of bite-sized videos will deliver a ton of great information. John has gone through almost all of the &ldquo;hard&rdquo; concepts, and presented them in an easy to understand way.</p>

<p><em>All</em> of the videos are great, but the <strong>series on directives is extra fantastic</strong>. Transclusion? No problem. Even after using AngularJS for over a year, I was able to solidify some of the concepts that were confusing for me.</p>

<p>Watch them all and <strong>take some notes</strong>. When you come out of the other side your AngularJS-fu will be starting to take shape.</p>

<p><img src="http://joelhooks.com/images/lemonade.jpg" alt="ahhhhhhh Learning AngularJS is refreshing - Photo Credit: chotda" /></p>

<p>That will take you through Saturday evening, and you deserve a rest. <strong>Send John a donation for his hard work</strong>, pour a tall glass of lemonade, and relax as you reflect on the your new-found knowledge of an awesome framework. Nice work!</p>

<h2>Things get real with angular-app ~4hrs</h2>

<p>Sunday morning.</p>

<p>At this point you should understand the core AngularJS concepts and terminology. Time to brew a fresh pot and get to work.</p>

<p><img src="http://joelhooks.com/images/french_press.jpg" alt="AngularJS Fuel - Photo Credit: Bjørn Giesenbauer" /></p>

<p>If you are anything like me, by now you&rsquo;re ready to dig into a <strong>proper example application</strong>. Luckily we have the excellent <a href="https://github.com/angular-app/angular-app">angular-app</a> project to explore. This non-trivial example focuses on best practices for:</p>

<ul>
<li>Folder structure (important!)</li>
<li>Modules (very important!)</li>
<li><strong>Testing</strong> (super important!)</li>
<li>RESTful services</li>
<li>Navigation</li>
<li>Security</li>
</ul>


<p>angular-app combines a solid AngularJS UI with a node.js backend. It is non-trivial, and studying this app will give you a realistic sense of a proper AngularJS app.</p>

<p>One killer aspect of this example is the build system. It <strong>demonstrates a fantastic Grunt.js build with an integrated Karma Test Runner</strong>.</p>

<p>Peter Bacon Darwin and Pewel Kozlowski have done a great job. Front to back, this project is worth your study time. You could spend several days investigating the nooks and crannies of this example, but we&rsquo;ve only got the weekend. Set angular-app to the side for now, but keep it handy. It will serve as valuable reference in the future.</p>

<h2>Start building your own app with ng-boilerplate ~4hrs</h2>

<p>At this point you should have a solid knowledge to start building something. The <a href="https://github.com/joshdmiller/ng-boilerplate">ng-boilerplate</a> project will get you started. <strong>This is the seed you should use</strong>. It takes the lessons you learned studying angular-app, and provides the foundation upon which to build something substantial.</p>

<p><img src="http://joelhooks.com/images/engine.jpg" alt="a strong engine for your AngularJS app" /></p>

<p>ng-boilerplate, unlike the angular-seed project, is <strong>suitable as a starting point for building a production app</strong>. It&rsquo;s a solid shortcut, and worth study.</p>

<p>Spend some time getting to know ng-boilerplate through its excellent README. The READMEs don&rsquo;t stop at the root of the project. Josh has sprinkled them throughout the project to help you understand what is going on.</p>

<p>Once you have your head around ng-boilerplate, you can delete all of the placeholder views, and <strong>start trying things out for yourself</strong>.</p>

<p>Need some ideas?</p>

<ul>
<li>PRISM:Refract &ndash; NSA Dashboard</li>
<li>FlySwatter &ndash; A simple bug tracker</li>
<li>GeekTalk &ndash; Multiroom Chat</li>
<li>OctoStats &ndash; Ranked Github Users with Clever D3 Visuals</li>
<li>1000words &ndash; Writing app that sets target of 1000 words per day and graphs your success</li>
<li>GetItDone &ndash; Yup, a todo list.</li>
<li>&hellip;?</li>
</ul>


<p>The sky is the limit. Using the reference material you&rsquo;ve studied all weekend, combined with the official AngularJS docs, you should be well on the way to AngularJS mastery. You&rsquo;ll be over the hump, having defeated that infamous curve. Build something cool and tell me about it.</p>

<p>If you&rsquo;ve hit any road blocks, <a href="https://mail.google.com/mail/?view=cm&amp;fs=1&amp;tf=1&amp;to=joelhooks@gmail.com&amp;su=Hello,%can%I%20get%20some%20help?">send me an email</a> and I&rsquo;ll help you out.</p>

<h2>Congrats! You&rsquo;ve leveled up.</h2>

<p>The fun isn&rsquo;t over. There is <strong>plenty left to learn</strong>. The weekend <em>is</em> over though, and you&rsquo;ve worked hard. Take a break and relax.</p>

<p>You&rsquo;ve earned it.</p>

<p><img src="http://joelhooks.com/images/yellow_belt.jpg" alt="You've Leveled up your AngularJS! - Photo Credit: Cayusa" /></p>

<p>P.S. Initial project setup is one of the most critical factors to a project&rsquo;s success. Using templates is a great way to get a head start, but using a template without solid understanding of all the moving parts can be dangerous. I&rsquo;m working on <strong>step-by-step guide to building your own best practices AngularJS project template</strong>. If you want to get notified of its progress, as well as launch-day discounts, sign up to my newsletter below.</p>

<p>You might also enjoy: <a href="http://joelhooks.com/blog/2013/05/22/lessons-learned-kicking-off-an-angularjs-project/"><strong>Lessons Learned: A Year with a Large AngularJS Project</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AngularJS? Stop using jQuery as a crutch.]]></title>
    <link href="http://joelhooks.com/blog/2013/07/27/using-angularjs-stop-using-jquery-as-a-crutch/"/>
    <updated>2013-07-27T11:30:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/07/27/using-angularjs-stop-using-jquery-as-a-crutch</id>
    <content type="html"><![CDATA[<p>Have you ever heard (or said!) this:</p>

<p>&ldquo;Directives? That&rsquo;s where the jQuery goes.&rdquo;</p>

<p>I definitely have.</p>

<p>In an effort to better understand
<a href="https://twitter.com/joshdmiller">@joshdmiller</a>&rsquo;s excellent
<a href="https://github.com/joshdmiller/ng-boilerplate">ng-boilerplate</a>, I
wanted to understand its dependency on Boostrap. More specifically, I wanted to
see if I could swap out Twitter Bootstrap for Zurb Foundation. Bootstrap is
great, but I really love using SCSS.</p>

<h2>Down the rabit hole&hellip;</h2>

<p>Up until this point, I&rsquo;ve completely ignored
<a href="https://github.com/angular-ui/bootstrap">angular-ui-bootstrap</a>, which is a wrapper for
Twitter Bootstrap that you can use with AngularJS. It hasn&rsquo;t been on my radar,
simply because I prefer Foundation. That was a mistake. This wonderful little
library is amazing. On many levels, it expresses the power and flexibility of
AngularJS like nothing else I have seen.</p>

<p>From the <a href="https://github.com/angular-ui/bootstrap#native-lightweight-directives">angular-ui-bootstrap
README</a>:</p>

<blockquote><p>We are aiming at providing a set of AngularJS directives based on Twitter
Bootstrap&rsquo;s markup and CSS. The goal is to provide native AngularJS directives
without any dependency on jQuery or Bootstrap&rsquo;s JavaScript. It is often better
to rewrite an existing JavaScript code and create a new, pure AngularJS
directive. Most of the time the resulting directive is smaller as compared to
the orginal JavaScript code size and better integrated into the AngularJS
ecosystem.</p></blockquote>

<p>This struck me.</p>

<p>The only dependency that ui-bootstrap has on Twitter Bootstrap is the CSS style
sheets. All of the widgets work because they have been implemented with
AngularJS directives.</p>

<p>I was reading through some posts on the Google groups in my earlier quest to
find out how to integrate Foundation into ng-boilerplate (I&rsquo;m stubborn!) and was
very interested in what Josh had to say:</p>

<blockquote>You can wire up some callbacks and $apply calls to make a jQuery
plugin work but as Pawel said, rewriting something in AngularJS often takes less
work. jQuery doesn&#8217;t have any of the binding or scope magic. When we cut out all
of the jQuery code that makes up for that, we&#8217;re often left with very little
code. And when we put those few lines of code in an AngularJS directive,
everything will work out of the box. So in balancing levels of effort, rewriting
makes sense more often than it doesn&#8217;t.<cite><br>- <a
href="https://groups.google.com/d/msg/angular/Htkzt7Fsaog/TeFm5l4snTwJ">Josh
David Miller</a></cite></blockquote>


<p><strong>Mind blown.</strong></p>

<p>In the post quoted above Josh also links to his <a href="http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-emberjsor-other-client-mvc-framework-if-i-have-a/15012542#15012542">excellent Stack
Overflow</a>
post that expands on this viewpoint. You may have seen this already, but if you
haven&rsquo;t, go take 10 minutes to read through it.</p>

<blockquote><p>Don&rsquo;t even use jQuery. Don&rsquo;t even include it. It will hold you back. And when
you come to a problem that you think you know how to solve in jQuery already,
before you reach for the $, try to think about how to do it within the confines
the AngularJS. If you don&rsquo;t know, ask! 19 times out of 20, the best way to do
it doesn&rsquo;t need jQuery and to try to solve it with jQuery results in more work
for you.</p></blockquote>

<p>Bold words.</p>

<p>I&rsquo;m convinced.</p>

<p><strong>jQuery is a crutch if you are writing AngularJS applications.</strong></p>

<p>If you&rsquo;re starting an AngularJS app, take a good look at
ng-boilerplate. Then take a look at <a href="https://github.com/angular-ui/bootstrap/tree/master/src">ui-bootstrap&rsquo;s directives</a>. They are a living
example of how you can do &ldquo;jQuery things&rdquo; with a fraction of the code, and build
an app that is easier to maintain, way more testable, and generally nicer to
work with.</p>

<p>P.S. If you were wondering, it is theoretically possible to simply use the
Foundation CSS with ui-bootstrap. There is some work being done in that regard,
and I&rsquo;m looking forward to pitching in on it. I don&rsquo;t know that it will ever get
to &ldquo;drop in replacement&rdquo; status, but from the discussions I&rsquo;ve read the future
looks promising on this front.</p>

<p>P.P.S This isn&rsquo;t a critique of jQuery. I think jQuery is awesome and has moved
the web forward considerably. Even within Angular, they use what is called
&ldquo;jqLite&rdquo; to give the core essentials of jQuery&rsquo;s functionality. In that sense,
just using Angular in the Angular way uses jQuery, but a minimal subset of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The basics of using ui-router with AngularJS]]></title>
    <link href="http://joelhooks.com/blog/2013/07/22/the-basics-of-using-ui-router-with-angularjs/"/>
    <updated>2013-07-22T10:55:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/07/22/the-basics-of-using-ui-router-with-angularjs</id>
    <content type="html"><![CDATA[<p>URL routing is a popular approach to matching the contents of a URL to specific
functionality within a web application. URL routes programatically present
specific content to users based on the URL that they are visiting. It is a
popular approach that has proven to be very effective.</p>

<p>Something that might not be obvious is that URL routing is also a <a href="https://en.wikipedia.org/wiki/Finite-state_machine">finite state
machine</a>. When you configure
the routing for an app, you are laying out the various states the application
can be in, and informing the application what to display and do when a specific
route is encountered.</p>

<p>AngularJS supplies <a href="http://docs.angularjs.org/tutorial/step_07">URL routing</a> by default.
It is adequate, but also has some limitations.</p>

<p><img src="http://joelhooks.com/images/app-layout.png" alt="A resonable application structure" /></p>

<h2>So what&rsquo;s the problem?</h2>

<p>Looking at the structure above, imagine an application where interacting with
items on the header or the sidebar causes the main content to load completely
different HTML. AngularJS provides a mechanism for this with <code>ng-switch</code>. You
can see a (very simple) example of this below.</p>

<iframe width="100%" height="300"
  src="http://jsfiddle.net/joelhooks/Swm48/4/embedded/result,js,html"
  allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>In this case, <code>ng-switch</code> is swapping out <code>div</code> elements, but you can also use
this approach to swap out templates using <code>ng-include</code>.</p>

<p>I&rsquo;m not going to explore this option. I&rsquo;m not particularly fond of it.</p>

<p><strong>Why not?</strong></p>

<ul>
<li>The <code>ng-switch</code> adds markup that could be confusing</li>
<li>The state of the main content area is captured and stored on a model</li>
<li>It feels like &ldquo;logic in markup&rdquo;, which I try to avoid</li>
<li>If you go down the <code>ng-include</code> road, you need to remember to always put
single quotes around your template names. I always forget. ;&lt;</li>
</ul>


<h2>ui-router</h2>

<p><a href="https://github.com/angular-ui/ui-router">ui-router</a> fully embraces the
state-machine nature of a routing system. It allows you to define states, and
transition your application to those states. The real win is that it allows you
to decouple nested states, and do some very complicated layouts in an elegant
way.</p>

<p>You need to think about your routing a bit differently, but once you get your
head around the state-based approach, I think you will like it.</p>

<iframe width="100%" height="300"
  src="http://jsfiddle.net/SvUjA/1/embedded/result,js,html"
  allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This example is functionally very similar to the <code>ng-switch</code> approach. The main
difference is that the main content area is populated with templated HTML for
each of the states, without using switching or <code>ng-include</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ui.compat&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$stateProvider&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$stateProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">home</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;home&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;content.html&#39;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">red</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/red&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">parent</span><span class="o">:</span> <span class="nx">home</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;content.red.html&#39;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">blue</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/blue&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">parent</span><span class="o">:</span> <span class="nx">home</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;content.blue.html&#39;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">green</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/green&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">parent</span><span class="o">:</span> <span class="nx">home</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;content.green.html&#39;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="nx">home</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="nx">red</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="nx">green</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="nx">blue</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code is the configuration for the router. We are defining the <code>module</code>, but instead
of injecting <code>$routeProvider</code> as we would with stock AngularJS, we are injecting
a <code>$stateProvider</code> that is used to define the states. We are defining 4 states.</p>

<ul>
<li><code>home</code> is the parent state of the next 3. It defines the header, siderbar, and
the <code>ui-view</code> element that will be populated with the child states.</li>
<li><code>red</code> is the first child state. It references the <code>home</code> as its parent, as
well as targeting its own template.</li>
<li><code>blue</code> and <code>green</code> are identical to <code>red</code>, but use different templates.</li>
</ul>


<p>After the states are defined, they are added to the <code>$stateProvider</code>. They are
now ready to be navigated to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">run</span><span class="p">([</span><span class="s1">&#39;$state&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">$state</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="s1">&#39;home&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure>


<p>the <code>run</code> method is a great place to navigate to your intial state. You are able to
inject the now-resolved <code>$state</code> object and use its <code>transitionTo</code> method to set <code>home</code>
as the current state.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;SidebarCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">setPage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">page</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$state</span><span class="p">.</span><span class="nx">transitionTo</span><span class="p">(</span><span class="nx">page</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>SidebarCtrl</code> lists contains a simple array called content on its <code>$scope</code> which
is used in a <code>ng-repeat</code> to give us a simple menu. When one of those items is clicked
the <code>setPage</code> function is called with the item that was clicked. In this case, the
content items correspond to the names of the states that we&rsquo;ve defined, so we simply
<code>transitionTo</code> the selected state to display the content of that state.</p>

<h2>Next steps with ui-router</h2>

<p>This only really scratches the very surface of what you can pull off with
ui-router. There are a ton of options and the
<a href="https://github.com/angular-ui/ui-router/wiki">wiki</a> is well put together. Some
things I didn&rsquo;t explore, but that are available:</p>

<ul>
<li>Passing data between states</li>
<li>Listening for state events</li>
<li>Named views (love this, it deserves its own post)</li>
<li>URL Routing</li>
</ul>


<p><strong>The ui-router README warns that the utility is still in active early
development</strong>. The API is still subject to change, so if you choose ui-router for
your next project, that is something to be aware of.</p>

<p>Let me know if you&rsquo;d like me to explore ui-router a bit deeper in future posts.
I think it is an excellent approach to routing, and look forward to using it
more.</p>

<p><strong>Update:</strong> I&rsquo;ve recorded a <a href="http://egghead.io/lessons/angularjs-introduction-ui-router">screencast about ui-router</a> for egghead.io.</p>

<p><strong>Update 2:</strong> Here&rsquo;s a <a href="https://egghead.io/lessons/angularjs-ui-router-named-views">screencast about ui-router&rsquo;s named views</a> that I recorded for egghead.io. (note: it is paid/subscription content)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Directives That Override Standard HTML Tags]]></title>
    <link href="http://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags/"/>
    <updated>2013-07-15T13:22:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags</id>
    <content type="html"><![CDATA[<p>Directives are the heart and soul of AngularJS. They are incredibly powerful.
AngularJS sets out to extend the grammar of the browser to supply semantics that
facilitate the creation of web applications, going beyond the standard
hyper-linked web page. The primary weapon to accomplish this is the directive.</p>

<p>Creating your own directives is an awesome way to create composed, reusable
behaviors in your applications. This article isn&rsquo;t about making your own
directives, instead I wanted to take a closer look at the internal directives of
AngularJS. Specifically, we will be looking at how and why AngularJS extends the
functionality of native HTML tags like <code>&lt;input&gt;</code> and <code>&lt;a&gt;</code> to make the magic
happen.</p>

<h2>A is for Anchor</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">htmlAnchorDirective</span> <span class="o">=</span> <span class="nx">valueFn</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">compile</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">attr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">msie</span> <span class="o">&lt;=</span> <span class="mi">8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// turn &lt;a href ng-click=&quot;..&quot;&gt;link&lt;/a&gt; into a stylable link in IE</span>
</span><span class='line'>      <span class="c1">// but only if it doesn&#39;t have name attribute, in which case it&#39;s an anchor</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">attr</span><span class="p">.</span><span class="nx">href</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">attr</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">attr</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// add a comment node to anchors to workaround IE bug that causes element content to be reset</span>
</span><span class='line'>      <span class="c1">// to new attribute content if attribute is updated with value containing @ and element also</span>
</span><span class='line'>      <span class="c1">// contains value with @</span>
</span><span class='line'>      <span class="c1">// see issue #1949</span>
</span><span class='line'>      <span class="nx">element</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createComment</span><span class="p">(</span><span class="s1">&#39;IE fix&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">element</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">// if we have no href url, then don&#39;t navigate anywhere.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">element</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://github.com/angular/angular.js/blob/master/src/ng/directive/a.js"><code>htmlAnchorDirective</code></a> has a simple job. It is there to prevent navigation and page reloading. Typically this is in conjunction with <code>ng-click</code>, which is used to actually capture the click and navigate the user within the application. Every <code>&lt;a&gt;</code> in your application is effectively extended by AngularJS. The functionality is primarily the <code>event.preventDefault()</code> that is applied if the anchor tag doesn&rsquo;t have an <code>href</code> attribute.</p>

<p>One thing to note, and this is typical throughout the AngularJS internals, is that this directive requires special attention for IE 7. When I&rsquo;m digging around in the internals, I&rsquo;m always appreciative of this effort made by the AngularJS contributors. These aren&rsquo;t fun problems to solve, and it is nice that somebody has made the effort to solve them for us :></p>

<h2>Digging into &lt;form></h2>

<p><a href="https://github.com/angular/angular.js/blob/master/src/ng/directive/form.js">AngularJS overrides <code>&lt;form&gt;</code></a> to provide some important functionality. The core of this extension of <code>&lt;form&gt;</code> is to prevent any page refresh that would occur with an unmodified <code>&lt;form&gt;</code> tag. Lets have a look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">formDirectiveFactory</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">isNgForm</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="s1">&#39;$timeout&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$timeout</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">formDirective</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;form&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">controller</span><span class="o">:</span> <span class="nx">FormController</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">compile</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">pre</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">formElement</span><span class="p">,</span> <span class="nx">attr</span><span class="p">,</span> <span class="nx">controller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">attr</span><span class="p">.</span><span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// we can&#39;t use jq events because if a form is destroyed during submission the default</span>
</span><span class='line'>              <span class="c1">// action is not prevented. see #1238</span>
</span><span class='line'>              <span class="c1">//</span>
</span><span class='line'>              <span class="c1">// IE 9 is not affected because it doesn&#39;t fire a submit event and try to do a full</span>
</span><span class='line'>              <span class="c1">// page reload if the form was destroyed by submission of the form via a click handler</span>
</span><span class='line'>              <span class="c1">// on a button in the form. Looks like an IE9 specific bug.</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">preventDefaultListener</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span>
</span><span class='line'>                  <span class="o">?</span> <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class='line'>                  <span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">returnValue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// IE</span>
</span><span class='line'>              <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>              <span class="nx">addEventListenerFn</span><span class="p">(</span><span class="nx">formElement</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s1">&#39;submit&#39;</span><span class="p">,</span> <span class="nx">preventDefaultListener</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">// unregister the preventDefault listener so that we don&#39;t not leak memory but in a</span>
</span><span class='line'>              <span class="c1">// way that will achieve the prevention of the default action.</span>
</span><span class='line'>              <span class="nx">formElement</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;$destroy&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$timeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">removeEventListenerFn</span><span class="p">(</span><span class="nx">formElement</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s1">&#39;submit&#39;</span><span class="p">,</span> <span class="nx">preventDefaultListener</span><span class="p">);</span>
</span><span class='line'>                <span class="p">},</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">parentFormCtrl</span> <span class="o">=</span> <span class="nx">formElement</span><span class="p">.</span><span class="nx">parent</span><span class="p">().</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">),</span>
</span><span class='line'>                <span class="nx">alias</span> <span class="o">=</span> <span class="nx">attr</span><span class="p">.</span><span class="nx">name</span> <span class="o">||</span> <span class="nx">attr</span><span class="p">.</span><span class="nx">ngForm</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">alias</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">scope</span><span class="p">[</span><span class="nx">alias</span><span class="p">]</span> <span class="o">=</span> <span class="nx">controller</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">parentFormCtrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">formElement</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;$destroy&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">parentFormCtrl</span><span class="p">.</span><span class="nx">$removeControl</span><span class="p">(</span><span class="nx">controller</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">alias</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">scope</span><span class="p">[</span><span class="nx">alias</span><span class="p">]</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="nx">extend</span><span class="p">(</span><span class="nx">controller</span><span class="p">,</span> <span class="nx">nullFormCtrl</span><span class="p">);</span> <span class="c1">//stop propagating child destruction handlers upwards</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">isNgForm</span> <span class="o">?</span> <span class="nx">extend</span><span class="p">(</span><span class="nx">copy</span><span class="p">(</span><span class="nx">formDirective</span><span class="p">),</span> <span class="p">{</span><span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;EAC&#39;</span><span class="p">})</span> <span class="o">:</span> <span class="nx">formDirective</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above function is a factory that creates a form directive. The directive itself does several things. Aside from some memory management it also serves to prevent the default behavior of the form action. Typically with an AngularJS application, you will want to capture the user&rsquo;s input it a form, and feed that data into a controller to send it to the server. This is different from the standard <code>action</code> attribute of a form that will perform a POST operation and typically redirect the user to a new page. This behavior is probably not what you want in your single-page JavaScript application, so AngularJS is working to help prevent that. You probably still want to be able to submit your form, and the <code>ngSubmit</code> directive placed as an attribute on the <code>&lt;form&gt;</code> tag will execute an expression when your designated submit input is clicked.</p>

<p>If you&rsquo;re paying close attention, you&rsquo;ll notice that the form directive above has a <code>FormController</code> assigned to it. The <code>FormController</code> is the brains of all the forms within an AngularJS application, and every <code>&lt;form&gt;</code> gets one. The <code>FormController</code> tracks all of the controls within a form and manages the validity of the form.</p>

<h2>The Input Directive</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">inputDirective</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;$browser&#39;</span><span class="p">,</span> <span class="s1">&#39;$sniffer&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$browser</span><span class="p">,</span> <span class="nx">$sniffer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">require</span><span class="o">:</span> <span class="s1">&#39;?ngModel&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attr</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">(</span><span class="nx">inputType</span><span class="p">[</span><span class="nx">lowercase</span><span class="p">(</span><span class="nx">attr</span><span class="p">.</span><span class="nx">type</span><span class="p">)]</span> <span class="o">||</span> <span class="nx">inputType</span><span class="p">.</span><span class="nx">text</span><span class="p">)(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attr</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">,</span> <span class="nx">$sniffer</span><span class="p">,</span>
</span><span class='line'>                                                            <span class="nx">$browser</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow! It&rsquo;s so simple ;)</p>

<p>It is. This is because <a href="https://github.com/angular/angular.js/blob/master/src/ng/directive/input.js">the actual <code>&lt;input&gt;</code> tag</a> is only the entry point. The real work is done based on the <strong>type</strong> of input that is being used. AngularJS is looking for the following input types:</p>

<ul>
<li>text</li>
<li>number</li>
<li>url</li>
<li>email</li>
<li>radio</li>
<li>checkbox</li>
</ul>


<p>With the URL, email, and number types, AngularJS provides some basic validation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">URL_REGEXP</span> <span class="o">=</span> <span class="sr">/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&amp;%@!\-\/]))?$/</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">EMAIL_REGEXP</span> <span class="o">=</span> <span class="sr">/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">NUMBER_REGEXP</span> <span class="o">=</span> <span class="sr">/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the code for the URL type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">urlInputType</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attr</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">,</span> <span class="nx">$sniffer</span><span class="p">,</span> <span class="nx">$browser</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">textInputType</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attr</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">,</span> <span class="nx">$sniffer</span><span class="p">,</span> <span class="nx">$browser</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">urlValidator</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">||</span> <span class="nx">URL_REGEXP</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$formatters</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">urlValidator</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$parsers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">urlValidator</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple stuff. It is using the REGEX above and setting the validity on the <code>FormController</code>, which you can then use to display feedback to the user. Email and number validation works in a similar fashion.</p>

<p>With text-type inputs AnglularJS also provides <strong>data-binding</strong> via <code>ngModel</code>, which is an extremely convenient solution to capturing user input and displaying it in the form. We should look at <code>ngModel</code> a bit closer in a future post.</p>

<h2>Just the beginning.</h2>

<p>It wasn&rsquo;t immediately obvious to me when I started using AngularJS that the framework was overriding these default HTML tags to add the secret sauce on top. Once the realization dawned on me, it opened my eyes to the power and potential that directives hold. You aren&rsquo;t restricted to the extensions that AngularJS provides with these built-in directives. You can further extend the capabilities of HTML by creating your own directives that override and extend the native HTML elements.</p>

<p>Digging into the guts of the <a href="https://github.com/angular/angular.js/tree/master/src">AngularJS source code</a> is a great way to learn the hows and whys of the framework, and can reveal techniques that can be applied to your own applications. The AngularJS source is well documented, cleanly written, and well tested. If you&rsquo;re working with AngularJS, I highly recommend diving into these internals and discovering this for yourself. It won&rsquo;t be time wasted.</p>

<p>You might also enjoy: <a href="http://joelhooks.com/blog/2013/05/22/lessons-learned-kicking-off-an-angularjs-project/"><strong>Lessons Learned: A Year with a Large AngularJS Project</strong></a></p>

<p>or maybe: <a href="http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend/"><strong>Learn AngularJS this Weekend</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Doesn't My Photography Studio Website Appear in Search Results?]]></title>
    <link href="http://joelhooks.com/blog/2013/06/25/why-doesnt-my-photography-studio-website-appear-in-search-results/"/>
    <updated>2013-06-25T20:04:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/06/25/why-doesnt-my-photography-studio-website-appear-in-search-results</id>
    <content type="html"><![CDATA[<p>This is a series of post examining why our <a href="http://www.visualempathy.com">Fort Worth photography
studio</a> website performs poorly in Google search
results, and why it fails to convert the visitors it does get into new clients.
The first post sought to <a href="http://joelhooks.com/blog/2013/06/22/optimizing-a-photography-studio-website-for-converstion-and-seo-the-analysis/">analyze Google Analytics
data</a>
and get a clue as to how users arrive to the site via search. The short story is
that they typically arrive via image searches for very generic terms such as &ldquo;4
month old baby&rdquo; and other similar searches. Even amongst these searches, actual
clicks through to the site are abysmally low. I&rsquo;m working on a <a href="http://studioigniter.com/">book about
conversion optimization for photographers</a>, and our
studio is the first case study in the process.</p>

<p><img src="http://joelhooks.com/images/ve/ve-home.jpg" alt="VE Home Page" /></p>

<p>Let&rsquo;s start at the top, with the page title:</p>

<p><em>Visual Empathy Portrait Photography, Dallas Fort Worth | Modern Lifestyle
Portraiture | Fine portrait photography | Children&rsquo;s Portraits | Portrait
Photographer</em></p>

<p>These are some interesting phrases. I can almost remember writing them.
First, the business name. The site does really
well when searching for &ldquo;Visual Empathy&rdquo;, which of course nobody does. It has
&ldquo;Dallas Fort Worth&rdquo; in the title, which is definitely where we are at, but they
are in isolation. I thought these two were interesting:</p>

<ul>
<li>Fine portrait photography</li>
<li>Modern Lifestyle Portraiture</li>
</ul>


<p>Why are they interesting? Because they&rsquo;ve both been searched for by <strong>nobody
ever</strong>. &ldquo;Children&rsquo;s Portraits&rdquo; and &ldquo;Portrait Photographer&rdquo; are ok, but it is a
bunch of disjointed keywords that gives Google&rsquo;s robots no specifics to hone in
on. Robots <em>really</em> like specifics.</p>

<p>Walking down the page, we get to the header. The logo is actually a background
image, which misses an opportunity to use the alt text to let the robots know
what the page is about. Image alt text is actually important, and was something
that I never even considered when I put this page together in 2007. Sliding
across the header is the navigation, which isn&rsquo;t egregious, but is also
extremely generic and vague, targeting pages that have extremely generic and
vague titles. Again, missed opportunity to turn on the bright blinking lights
about what this page is for Google.</p>

<p>Next down the page is the gallery. My wife takes truly wonderful pictures of
people. The photography is beautiful, but it is
also hidden behind now dated Flash image gallery. While this isn&rsquo;t really
hurting us in terms of SEO, it probably isn&rsquo;t helping either. We are
<em>definitely</em> missing another opportunity to use the alt tags on the images. The
worst part about this presentation is that it totally excludes mobile phones.
Visit the page on an iPhone and you get a big white field of <strong>nothing</strong>. Not
cool.</p>

<p>Down below the fold is a mishmash. To the left is an area that uses a special
catagory of blog post to show a special. It isn&rsquo;t helping with SEO at all. No
keyword phrases, no image alt text. The picture is nice, but otherwise&hellip;</p>

<p>Now to the right. 6 paragraphs of me being &ldquo;clever&rdquo;, using flowery phrases and a
smattering of keywords. The last paragraph has the potential to actually harm
our SEO. Google robots <em>hate</em> keyword packing. The same word, photographer in
this case, repeated over and over again.</p>

<h2>Digging into the blog&hellip;</h2>

<p>Blogs have a ton of potential for capturing the <strong>long tail of SEO</strong>. This is
where we can really produce some content, using keywords that highlight specific
terms and phrases that potential customers might search for. For a photographer
the blog can also serve as a gallery that uses posts as a way for clients to
pin, like, and share their pictures with family and friends.</p>

<p>I&rsquo;ll use the latest post at the time of this writing that highlights some
beautiful wedding photos. The title is <em>J&amp;J Wedding- Dallas/ Fort Worth Wedding
Photographer</em>. Looking down the page, they all follow this pattern. <em>Client
Name- Dallas/ Fort Worth _________ Photographer</em>. This is where we start to see
the origins of the image search results we talked about above. The post titles
are definitely affecting search results, but not a way that is useful for the
site&rsquo;s SEO. I suspect the repeated use of the exact same <em>Dallas/ Fort Worth
Photographer</em> in the titles is adversely affecting search results too. That is
just a suspicion, but given the objective results (or lack of results), the post
titles aren&rsquo;t <em>helping</em>. The image alt tags are also not contributing here. They
are the filenames. Nobody is searching for specific filenames when they search
for a local portrait photographer.</p>

<p>Kristina also got into a &ldquo;blog circle&rdquo; this year. This is a good idea. Their
implementation of the concept could use some work, but it could be a good thing.
The drawback here is that it effectively turned the blog into a personal blog,
akin to a Tumblr. I love my children, but rule number one of your photography
website has to be <strong>only post your best</strong>, and these once a week posts border
on snapshots at times.</p>

<h2>And in conclusion.</h2>

<p>The only redeeming aspect of the website is the photography. Period. Which is
great news. Given awesome photography, we can build something on top of that.
These first two posts are a little boring, but I wanted to deconstruct the site
to understand exactly what was wrong.</p>

<p>The really interesting bits are in the fixing, and that is what is coming next.
I&rsquo;m terribly excited to start the process. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing a Photography Studio Website for Converstion and SEO: The Analysis]]></title>
    <link href="http://joelhooks.com/blog/2013/06/22/optimizing-a-photography-studio-website-for-converstion-and-seo-the-analysis/"/>
    <updated>2013-06-22T08:32:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/06/22/optimizing-a-photography-studio-website-for-converstion-and-seo-the-analysis</id>
    <content type="html"><![CDATA[<p>The internet is a competitive place for small businesses, and this is especially
true when we are talking about portrait photographers. My lovely wife is a
<a href="http://visualempathy.com">family photographer in Fort Worth</a>, Texas. She&rsquo;s been
doing portrait photography professionally since 2007, and being the good nerd
husband I am, she&rsquo;s had a web presence the entire time. By this I mean she&rsquo;s had
a website that I built in 2007 (prior to my own shift in careers from 3d
animation to web development), and haven&rsquo;t really touched since. She&rsquo;s been
left to her own devices, outside of my intervention when her Wordpress
installation was &ldquo;hacked&rdquo; to be used for nefarious purposes (this is an entirely
different post, ugh).</p>

<p>Fast forward to 2013. This year has been interesting for me professionally. I&rsquo;ve
become extremely passionate about conversion optimization and search engine
optimization. Conversion optimization simply means converting website visitors
into paying clients, and search engine optimization (SEO) is the art of climbing
the Google ranks for organic search results. Our photography site is the polar
opposite of being optimized for either of those things.
My research on conversion optimization and SEO wasn&rsquo;t focused on our photography
business, at all. It is a weird instance of the &ldquo;cobblers son has no shoes&rdquo;
where I wasn&rsquo;t even considering our own business and how it might benefit from
the techniques that I&rsquo;ve been learning. In fact, in my moment of epiphany it
occured to me that other photographer&rsquo;s websites suffer in a similar fashion, so
I decided to write a <a href="http://studioigniter.com">guidebook on conversion optimization and SEO for
photographers</a>.</p>

<p>I&rsquo;m going to use my wife&rsquo;s site as a case study, breaking it down and rebuilding
it into a useful asset that not only attracts potential clients, but converts
those visitors into high quality clients. Of the two, SEO and converstion
optimization, the latter is infinitely more important. Even if you have killer
placement in search results, or spend piles of cash to buy top placement with
AdWords, if those visitors aren&rsquo;t contacting you in some way, then your website
is effectively useless. It is also a possibility that your website is
<strong>attracting the wrong clients</strong>, like bargain hunters looking for discount
photographs on the cheap. Visual Empathy&rsquo;s website doesn&rsquo;t do either, and the
first step is to take a look at why this might be the case.</p>

<p><img src="http://joelhooks.com/images/search_fort_worth_photographer.png" alt="No SEO for this website, that much is
obvious" /></p>

<p>The above is a search for &ldquo;Fort Worth photographer&rdquo;, which is fairly generic.
More specific searches don&rsquo;t yield better results, unless you search for &ldquo;Visual
Empathy&rdquo;. Thankfully we land at number 1 there, but anybody searching for your
businesses name directly already knows about you.</p>

<p>We <strong>do</strong> have Google Analytics installed, so I can get some insight into what
searches are actually displaying the website. If you are curious, I&rsquo;ve put a
full month of analytics data in <a href="https://docs.google.com/spreadsheet/ccc?key=0AhmOjcD8YdT6dHQtS29vSW8tb1Bwb1hBd3AzZHM4LUE&amp;usp=sharing">this
spreadsheet</a>,
but the top searches are:</p>

<ul>
<li>4 month old baby</li>
<li>6 week old baby</li>
<li>rubys</li>
<li>12 month old baby</li>
<li>summer time photography</li>
</ul>


<p>And the list goes on. Ugh. And to rub salt in the wound:</p>

<p><img src="https://docs.google.com/spreadsheet/oimg?key=0AhmOjcD8YdT6dHQtS29vSW8tb1Bwb1hBd3AzZHM4LUE&amp;oid=3&amp;zx=lohft0ss9c73" alt="What kinds of searches are we showing up
for" /></p>

<p>Normal web searches account for a <strong>tiny sliver</strong> of the pie. Images account for
the overwhelming amount of search results where VE actually shows up.
Searchers are looking for pictures of babies at certain ages. Only <strong>0.75%</strong> of the
total search results actually end up getting clicked through. I actually think
this might be on the <strong>high</strong> side because there were some weird things in the
data. The items that were clicked all showed 5 clicks. That seems strange, but
the important thing is that <strong>nobody</strong> is coming to Visual Empathy&rsquo;s website
because they are looking for a local photographer. Of those that
click through, exactly <strong>0%</strong> actually convert to paying customers.</p>

<p>The silver lining? There is <strong>a lot</strong> of room for improvement.</p>

<p>In the next post in this series we will tear down Visual Empathy&rsquo;s website and
try to understand why we are getting these results on Google, and attempt to
identify ways of improving them. As part of the series, Visual Empathy is going
to get a complete web makeover. Top to bottom, back to front.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coming to Terms With Enterprise JavaScript]]></title>
    <link href="http://joelhooks.com/blog/2013/06/17/coming-to-terms-with-enterprise-javascript/"/>
    <updated>2013-06-17T13:19:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/06/17/coming-to-terms-with-enterprise-javascript</id>
    <content type="html"><![CDATA[<h2>What is enterprise javascript?</h2>

<p>Good question. One that might even make you chuckle[1] a little bit on the inside.
The word &ldquo;enterprise&rdquo; is definitely a loaded term. It could be considered by
some to be a buzzword. Others might say &ldquo;Why are we talking about starships?&rdquo;</p>

<p>When I use the term &ldquo;enterprise&rdquo; to describe software, I typically mean
&ldquo;software that helps people get work done more efficiently.&rdquo; In this sense,
Angry Birds and your favorite Twitter client are not enterprise applications. A
Twitter client that has additional features to facilitate and track a company&rsquo;s
social engagement, on the other hand, might fall into the enterprise category.</p>

<p>An application that is used in a call center to track incoming support requests
is definitely &ldquo;enterprise&rdquo;. A system that connects several &ldquo;legacy&rdquo; systems and
presents employees with a unified interface and saves 1000s of man-years every
month of application context switching? Enterprise.</p>

<p>Enterprise software is software that is sold to a business or government agency,
and not to individuals. Content management, billing, point of sale, payment
processing, customer relations, help desk, project management, enterprise
application integrations, time tracking, business intelligence&hellip; you get the
idea.</p>

<p>This is software for <strong>getting things done</strong>. This is software that <strong>makes a business
money</strong>. Because of this, it is software that businesses will invest heavily in.</p>

<h2>Enterprise isn&rsquo;t cool.</h2>

<p>Maybe. It certainly evokes thoughts of ugly user interfaces with huge J2EE
backends. Developers working on Saturdays to get their TPS reports filed.
Enterprise software certainly can be that. It doesn&rsquo;t have to be.</p>

<p>Today&rsquo;s software users, even enterprise software users, are more sophisticated.
They are used to using applications like Facebook and Gmail on a daily basis.
They have iPhones that present beautiful easy to use interfaces and excellent
user experience (UX). They want more.</p>

<p>More importantly, perhaps, is that software that provides excellent UX makes it
easier to get work done. Using software that sucks, is slow, is ugly, or
generally misbehaves is counter-productive. Bad software represents lost revenue
and increased overhead. Employees that are forced into bad software are forced
to focus their energy on wrestling the software. Not only does this make them
miserable, but it saps a business&rsquo;s most valuable resource &ndash; the brain-power and
energy of their employees.</p>

<h2>Enterprise can be cool.</h2>

<p>It can! It largely depends on how you define &ldquo;cool.&rdquo; For me, my biggest thrill
in software development is eliminating cognitive overhead for people that are
trying to get work done. I want to make their working lives better. I want them
to be mentally free to concentrate on harder problems. I want their businesses
to make more money. I want them to see real value in their software, so that
they will keep hiring developers to build more software. Achieving these goals
is definitely cool.</p>

<h2>Where does JavaScript fit in?</h2>

<p>In today&rsquo;s world, savvy enterprise customers demand rich experiences. They want
to be able to access their data anytime and anywhere. They carry smart phones
and tablets and expect their software to function on these devices as well as it
does on their desktop computers.
Arguably the quickest way to achieve this multi-screen approach is through web
applications. Applications that run, and run well, in any modern browser. You
don&rsquo;t have negotiate walled-garden app stores to deploy a web app.</p>

<p>HTML pages originated as a format for linking scientific documents. This was a
great achievement, but soon users wanted more interactivity. JavaScript was
introduced, and now we could begin to see richer experiences, right in the
browser. This eventually brought us to DHTML, or dynamic HTML. The next
evolution in web pages was AJAX, or asynchronous JavaScript and XML. This is a
huge step, allowing us to hit the server for additional data without moving to
an entirely new page.</p>

<p>These days we&rsquo;ve gone a step further with single-page web applications. A
single-page app isn&rsquo;t a brochure-like web page for strictly delivering content.
It is a real application, built to do work. A single-page application is a
&ldquo;thick&rdquo; client that is more similar to a desktop application than a web page.</p>

<p>JavaScript has matured. HTML has matured. CSS has matured. All of these
technologies continue to see growth as their standards are updated to match
modern technology, and the demands of users.</p>

<p>Enterprises want to leverage these advances and build robust applications to
facilitate commerce. JavaScript is uniquely qualified as a programming language
to help with this. It allows us to harness the the computing power of modern
computers directly in the browser. In the past, we were forced to offload much
of the work for displaying a web page on to the server. A request was made and
the server generated a page that was displayed in the browser.</p>

<p>With modern JavaScript we are able to query the server for data via its
application programming interface (API) and use that data to dynamically update
content in the browser without actually changing URLs or reloading a page. The
client side application has its own templates and logic and can manage itself
tidily. The server is now a caretaker for data, while the application running in
the browser is entirely in charge of presentation and interaction with the data
that is provided.</p>

<p>JavaScript has been used in enterprise applications for many years. It is almost
as if we&rsquo;ve come full circle. The major difference in modern applications is
that presentation concerns can now be completely offloaded to the client. We
aren&rsquo;t beholden to a JSP or other server-side page template for rendering
content for our users. After the initial payload of the web application is
delivered, the server&rsquo;s job is now reduced to handling requests for data. This
is still a big job, but the separation of concerns opens up a lot of
opportunity. Because the server&rsquo;s boundaries are clearly separated from
presentation and focused on data, we are able to build APIs that can support
infinite possibilities in terms of how we present and interact with the data
that is flowing from the server.
This is awesome. This is opportunity. We are going to take advantage of this.</p>

<h2>So what is enterprise JavaScript?</h2>

<p>Enterprise JavaScript is used for building web applications that facilitate
commerce is some form or another. Enterprise JavaScript is likely going to be
larger and more complicated than a simple web page. Enterprise JavaScript is
probably going to be developed by a team, perhaps a large team or even several
teams, and will require stronger standards and practices than smaller
non-enterprise use cases.</p>

<p>Is it useful to tack on this &ldquo;enterprise&rdquo; label to JavaScript? Sometimes. When
you say that you are building an enterprise application, it definitely evokes a
mental image of what you are dealing with. Good or bad. You could say
&ldquo;large-scale&rdquo; JavaScript instead, but it wouldn&rsquo;t be as specific. I&rsquo;m an
enterprise developer, and I use JavaScript. Enterprise JavaScript.</p>

<p>[1] <a href="http://enterprise-js.com/">http://enterprise-js.com/</a> is hilarious. Hint:
don&rsquo;t follow its advice!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Paralyzing Grip of Fear]]></title>
    <link href="http://joelhooks.com/blog/2013/06/10/the-paralyzing-grip-of-fear/"/>
    <updated>2013-06-10T17:21:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/06/10/the-paralyzing-grip-of-fear</id>
    <content type="html"><![CDATA[<p>My sons love playing basketball. After a certain age
(around 12), youth sports change. The court or field is no longer filled with
kids that were dragged to the game by their parents. These kids are here because
they love playing the game. So what do you do if your kid loves the game, but
just isn&rsquo;t very good? What if he just can&rsquo;t make the team?</p>

<p>Being a &ldquo;best practices&rdquo; loving software developer, I started scouring the
internet for the best ways to train. We hired a coach to work with him one on
one. We found the &ldquo;gurus&rdquo; on the internet and bought their materials. The boy
<strong>put in the work</strong>, practicing and working out on a daily basis.</p>

<p>He made the team.</p>

<p>Another year passes, and more training ensues. He&rsquo;s gotten <strong>strong</strong> through
consistent exercise and training. He is doing ridiculously
complicated two-ball dribbling drills in the driveway. He&rsquo;s sinking 3s, and even
dunked a women&rsquo;s regulation ball.</p>

<p>In the driveway.</p>

<p>Then comes game time. He won&rsquo;t dribble. He won&rsquo;t shoot a three. <strong>He won&rsquo;t
dribble</strong>.</p>

<p>What&rsquo;s going on?</p>

<p>Fear. The fear of messing up. The fear of shame. This horrible, crippling
paralysis that comes when it is time to execute. This memory of the 9 year old
you, that couldn&rsquo;t do anything right, and spent most of your time on the bench.</p>

<p>Don&rsquo;t get me wrong, there has been improvement. Massive improvement, but this
fear of messing up on the dribble persists. It persists through hours of weekly
practice. It persists through objectivity. It is the <strong>lizard brain</strong> disallowing
us to open up to the vulnerability of potential failure.</p>

<p>No amount of coaching is going to break through this wall. This is something
that we humans have to dig deep and overcome. We have to go ahead. We have to
expose ourselves to the potential for failure. We have to fail, and learn that
failing isn&rsquo;t the end. Failing is <strong>the beginning</strong>.</p>

<p>The quickest way to ensure continued failure is to never make the attempt in the
first place. Abstinence is safety. When we let go of the fear of failure, and
open our minds to the vulnerability that comes along with <strong>doing</strong>, we start to
chisel away at the paralysis. Every attempt becomes slightly easier. Fear can be
pushed aside, and replaced with the muscle memory that comes from practice. We
can have a chance for success.</p>

<p><strong>JFDI</strong> &ndash; Just F&#8217;n Do it.</p>

<p><img src="http://farm5.staticflickr.com/4124/5050135544_97d67cd23c_o.png" alt="Alex Hillman's Awesome
Tattoo" /></p>
]]></content>
  </entry>
  
</feed>
