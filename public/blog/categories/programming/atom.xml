<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming, | Joel Hooks]]></title>
  <link href="http://joelhooks.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://joelhooks.com/"/>
  <updated>2018-02-15T14:37:26-08:00</updated>
  <id>http://joelhooks.com/</id>
  <author>
    <name><![CDATA[Joel Hooks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stop writing For loops. Start using underscore.]]></title>
    <link href="http://joelhooks.com/blog/2014/02/06/stop-writing-for-loops-start-using-underscorejs/"/>
    <updated>2014-02-06T00:33:00-08:00</updated>
    <id>http://joelhooks.com/blog/2014/02/06/stop-writing-for-loops-start-using-underscorejs</id>
    <content type="html"><![CDATA[<p>How many for loops did you write today? This week?</p>

<p>``` javascript
var i;</p>

<p>for(i = 0; i &lt; someArray.length; i++) {</p>

<pre><code>var someThing = someArray[i];
doSomeWorkOn(someThing);
</code></pre>

<p>}
```</p>

<p>Sure. That&rsquo;s harmless enough. Ugly and weird, but not something to really complain about. But this is all too common:</p>

<p>``` javascript
var i,</p>

<pre><code>j;
</code></pre>

<p>for(i = 0; i &lt; someArray.length; i++) {</p>

<pre><code>var someThing = someArray[i];
for(j = 0; j &lt; someThing.stuff.length; j++) {
    doSomeWorkOn(someThing.stuff[j]);
}
</code></pre>

<p>}
```</p>

<p>Which on the scale of bad code, isn&rsquo;t even <strong>that</strong> bad, but you start throwing some <code>if</code>s in there and the insanity really starts.</p>

<h2>I haven&rsquo;t written a For loop in two years.</h2>

<p>&ldquo;The hell you say?&rdquo;</p>

<p>It&rsquo;s true. Cold turkey. Not a single one (ok, you caught me, I just wrote a couple above), and my code is easier to understand because of my abstinence.</p>

<p>How&rsquo;d I do it?</p>

<p>``` javascript
_.each(someArray, function(someThing) {</p>

<pre><code>doSomeWorkOn(someThing);
</code></pre>

<p>})
```</p>

<p>Or, even better:</p>

<p><code>javascript
_.each(someArray, doSomeWorkOn); //thanks paulmcpazzi!
</code></p>

<p>That&rsquo;s <a href="http://underscorejs.org/">underscorejs</a> in action. Clean, easy to read, short, no variables, stacks of semi-colons&hellip; just plain nice.</p>

<p>Here&rsquo;s another example:</p>

<p>``` javascript
var i,</p>

<pre><code>result = [];
</code></pre>

<p>for(i = 0; i &lt; someArray.length; i++) {</p>

<pre><code>var someThing = someArray[i];
// my hand already hurts from all this damn typing
if(someThing.isAwesome === true) {
    result.push(someArray[i]);
}
</code></pre>

<p>}
```</p>

<p>Again, a typical use case for the time honored <code>for</code> loop. Meh. Like an ex-smoker or a recently converted vegan, even the sight of the thing fills me with righteous indignation.</p>

<p>``` javascript
var result = _.filter(someArray, function(someThing) {</p>

<pre><code>return someThing.isAwesome === true;
</code></pre>

<p>})
```</p>

<p>As the underscore method name <code>filter</code> suggests, this handy 3 lines of easy to parse code gives me a new array of <strong>awesome things</strong>.</p>

<p>Or maybe I&rsquo;d like to do some work on the things and get a new array of the results?</p>

<p>``` javascript
var result = _.map(someArray, function(someThing) {</p>

<pre><code>return trasformTheThing(someThing);
</code></pre>

<p>})
```</p>

<p>Those three functions are insanely useful on a daily basis, and don&rsquo;t even scratch the surface of what underscore brings to the table.</p>

<p>``` javascript
var grandTotal = 0,</p>

<pre><code>somePercentage = 1.07,
severalNumbers = [33, 54, 42],
i; // don't forget to hoist those indices;
</code></pre>

<p>for(i = 0; i &lt; severalNumbers.length; i++) {</p>

<pre><code>var aNumber = severalNumbers[i];
grandTotal += aNumber * somePercentage;
</code></pre>

<p>}
```</p>

<p>Oy.</p>

<p>``` javascript
var somePercentage = 1.07,</p>

<pre><code>severalNumbers = [33, 54, 42],
grandTotal; 
</code></pre>

<p>grandTotal = _.reduce(severalNumbers, function(runningTotal, aNumber) {</p>

<pre><code>return runningTotal + (aNumber * somePercentage);
</code></pre>

<p>}, 0)
```</p>

<p>It seems a little weird at first, and I <strong>still</strong> hit the docs for methods like <strong>reduce</strong> above. Knowing they exist, and a flat refusal to use for loops is my primary weapon. The above methods are really just scratching the surface. The underscorejs library is filled with awesome utilities like this that can be combined together to create new and wonderful things.</p>

<h2>The 30 day no-loop challenge</h2>

<p>Stop.</p>

<p>For the next 30 days, don&rsquo;t write any for loops. If you see a nasty pile of those gnarly things, replace them with an <strong>each</strong> or a <strong>map</strong>. Do a little <strong>reducing</strong>. And let me know how it goes!</p>

<p>Beware. Underscore is the gateway to functional programming. What has been seen, can&rsquo;t be unseen. In a good way!</p>

<p>If you&rsquo;re wanting to dig a little deeper, you should jump over to this tutorial on <a href="http://reactive-extensions.github.io/learnrx/">functional programming in javascript</a>. It&rsquo;s great and only takes about &frac12; hour to work through. It is &ldquo;how the sausage is made&rdquo; fundamentals for the underscore functions I used above. Lot&rsquo;s of wholesome nerd fun!</p>

<p><strong>note</strong>: <em>As a more performant alternative to underscore, you might check out <a href="http://lodash.com/benchmarks">lodash</a></em></p>

<p><strong>note</strong>: <em>it should also be noted that modern browsers support the above methods natively. <code>Array.forEach</code>, <code>Array.reduce</code>, and <code>Array.map</code> exist, but to use them you likely need to create shims to fallback for cases when they don&rsquo;t exist. For me, having the consistent underscore (lodash) API is much more convenient. YMMV</em></p>

<p><strong>note</strong>: <em>Yes, for loops <strong>are</strong> faster. I optimize for readability and ease of use for my team before squeezing performance out of CPUs. I don&rsquo;t write games, or rich animated consumer experiences. Big projects, 10s of developers, code that already trends towards sprawling and messy.</p>

<p>The &ldquo;clean readable code&rdquo; optimization pays huge dividends, even if it comes at the cost of (very) marginal performance hits.</p>

<p>Now, if we are doing a big list of items in Angular, we focus on performance in terms of CPU, but even then, the only time we hit a wall with an unoptimized datagrid was on last-gen Android phones.</p>

<p>Clean first! ;)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Directives That Override Standard HTML Tags]]></title>
    <link href="http://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags/"/>
    <updated>2013-07-15T13:22:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags</id>
    <content type="html"><![CDATA[<p>Directives are the heart and soul of AngularJS. They are incredibly powerful.
AngularJS sets out to extend the grammar of the browser to supply semantics that
facilitate the creation of web applications, going beyond the standard
hyper-linked web page. The primary weapon to accomplish this is the directive.</p>

<p>Creating your own directives is an awesome way to create composed, reusable
behaviors in your applications. This article isn&rsquo;t about making your own
directives, instead I wanted to take a closer look at the internal directives of
AngularJS. Specifically, we will be looking at how and why AngularJS extends the
functionality of native HTML tags like <code>&lt;input&gt;</code> and <code>&lt;a&gt;</code> to make the magic
happen.</p>

<h2>A is for Anchor</h2>

<p>``` javascript
var htmlAnchorDirective = valueFn({
  restrict: &lsquo;E&rsquo;,
  compile: function(element, attr) {</p>

<pre><code>if (msie &lt;= 8) {

  // turn &lt;a href ng-click=".."&gt;link&lt;/a&gt; into a stylable link in IE
  // but only if it doesn't have name attribute, in which case it's an anchor
  if (!attr.href &amp;&amp; !attr.name) {
    attr.$set('href', '');
  }

  // add a comment node to anchors to workaround IE bug that causes element content to be reset
  // to new attribute content if attribute is updated with value containing @ and element also
  // contains value with @
  // see issue #1949
  element.append(document.createComment('IE fix'));
}

return function(scope, element) {
  element.on('click', function(event){
    // if we have no href url, then don't navigate anywhere.
    if (!element.attr('href')) {
      event.preventDefault();
    }
  });
}
</code></pre>

<p>  }
});
```</p>

<p>The <a href="https://github.com/angular/angular.js/blob/master/src/ng/directive/a.js"><code>htmlAnchorDirective</code></a> has a simple job. It is there to prevent navigation and page reloading. Typically this is in conjunction with <code>ng-click</code>, which is used to actually capture the click and navigate the user within the application. Every <code>&lt;a&gt;</code> in your application is effectively extended by AngularJS. The functionality is primarily the <code>event.preventDefault()</code> that is applied if the anchor tag doesn&rsquo;t have an <code>href</code> attribute.</p>

<p>One thing to note, and this is typical throughout the AngularJS internals, is that this directive requires special attention for IE 7. When I&rsquo;m digging around in the internals, I&rsquo;m always appreciative of this effort made by the AngularJS contributors. These aren&rsquo;t fun problems to solve, and it is nice that somebody has made the effort to solve them for us :></p>

<h2>Digging into &lt;form></h2>

<p><a href="https://github.com/angular/angular.js/blob/master/src/ng/directive/form.js">AngularJS overrides <code>&lt;form&gt;</code></a> to provide some important functionality. The core of this extension of <code>&lt;form&gt;</code> is to prevent any page refresh that would occur with an unmodified <code>&lt;form&gt;</code> tag. Lets have a look:</p>

<p>``` javascript
var formDirectiveFactory = function(isNgForm) {
  return [&lsquo;$timeout&rsquo;, function($timeout) {</p>

<pre><code>var formDirective = {
  name: 'form',
  restrict: 'E',
  controller: FormController,
  compile: function() {
    return {
      pre: function(scope, formElement, attr, controller) {
        if (!attr.action) {
          // we can't use jq events because if a form is destroyed during submission the default
          // action is not prevented. see #1238
          //
          // IE 9 is not affected because it doesn't fire a submit event and try to do a full
          // page reload if the form was destroyed by submission of the form via a click handler
          // on a button in the form. Looks like an IE9 specific bug.
          var preventDefaultListener = function(event) {
            event.preventDefault
              ? event.preventDefault()
              : event.returnValue = false; // IE
          };

          addEventListenerFn(formElement[0], 'submit', preventDefaultListener);

          // unregister the preventDefault listener so that we don't not leak memory but in a
          // way that will achieve the prevention of the default action.
          formElement.on('$destroy', function() {
            $timeout(function() {
              removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);
            }, 0, false);
          });
        }

        var parentFormCtrl = formElement.parent().controller('form'),
            alias = attr.name || attr.ngForm;

        if (alias) {
          scope[alias] = controller;
        }
        if (parentFormCtrl) {
          formElement.on('$destroy', function() {
            parentFormCtrl.$removeControl(controller);
            if (alias) {
              scope[alias] = undefined;
            }
            extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
          });
        }
      }
    };
  }
};

return isNgForm ? extend(copy(formDirective), {restrict: 'EAC'}) : formDirective;
</code></pre>

<p>  }];
};
```</p>

<p>The above function is a factory that creates a form directive. The directive itself does several things. Aside from some memory management it also serves to prevent the default behavior of the form action. Typically with an AngularJS application, you will want to capture the user&rsquo;s input it a form, and feed that data into a controller to send it to the server. This is different from the standard <code>action</code> attribute of a form that will perform a POST operation and typically redirect the user to a new page. This behavior is probably not what you want in your single-page JavaScript application, so AngularJS is working to help prevent that. You probably still want to be able to submit your form, and the <code>ngSubmit</code> directive placed as an attribute on the <code>&lt;form&gt;</code> tag will execute an expression when your designated submit input is clicked.</p>

<p>If you&rsquo;re paying close attention, you&rsquo;ll notice that the form directive above has a <code>FormController</code> assigned to it. The <code>FormController</code> is the brains of all the forms within an AngularJS application, and every <code>&lt;form&gt;</code> gets one. The <code>FormController</code> tracks all of the controls within a form and manages the validity of the form.</p>

<h2>The Input Directive</h2>

<p>``` javascript
var inputDirective = [&lsquo;$browser&rsquo;, &lsquo;$sniffer&rsquo;, function($browser, $sniffer) {
  return {</p>

<pre><code>restrict: 'E',
require: '?ngModel',
link: function(scope, element, attr, ctrl) {
  if (ctrl) {
    (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrl, $sniffer,
                                                        $browser);
  }
}
</code></pre>

<p>  };
}];
```</p>

<p>Wow! It&rsquo;s so simple ;)</p>

<p>It is. This is because <a href="https://github.com/angular/angular.js/blob/master/src/ng/directive/input.js">the actual <code>&lt;input&gt;</code> tag</a> is only the entry point. The real work is done based on the <strong>type</strong> of input that is being used. AngularJS is looking for the following input types:</p>

<ul>
<li>text</li>
<li>number</li>
<li>url</li>
<li>email</li>
<li>radio</li>
<li>checkbox</li>
</ul>


<p>With the URL, email, and number types, AngularJS provides some basic validation:</p>

<p><code>javascript
var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&amp;%@!\-\/]))?$/;
var EMAIL_REGEXP = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;
</code></p>

<p>Here&rsquo;s the code for the URL type:</p>

<p>``` javascript
function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  textInputType(scope, element, attr, ctrl, $sniffer, $browser);</p>

<p>  var urlValidator = function(value) {</p>

<pre><code>if (isEmpty(value) || URL_REGEXP.test(value)) {
  ctrl.$setValidity('url', true);
  return value;
} else {
  ctrl.$setValidity('url', false);
  return undefined;
}
</code></pre>

<p>  };</p>

<p>  ctrl.$formatters.push(urlValidator);
  ctrl.$parsers.push(urlValidator);
}
```</p>

<p>Simple stuff. It is using the REGEX above and setting the validity on the <code>FormController</code>, which you can then use to display feedback to the user. Email and number validation works in a similar fashion.</p>

<p>With text-type inputs AnglularJS also provides <strong>data-binding</strong> via <code>ngModel</code>, which is an extremely convenient solution to capturing user input and displaying it in the form. We should look at <code>ngModel</code> a bit closer in a future post.</p>

<h2>Just the beginning.</h2>

<p>It wasn&rsquo;t immediately obvious to me when I started using AngularJS that the framework was overriding these default HTML tags to add the secret sauce on top. Once the realization dawned on me, it opened my eyes to the power and potential that directives hold. You aren&rsquo;t restricted to the extensions that AngularJS provides with these built-in directives. You can further extend the capabilities of HTML by creating your own directives that override and extend the native HTML elements.</p>

<p>Digging into the guts of the <a href="https://github.com/angular/angular.js/tree/master/src">AngularJS source code</a> is a great way to learn the hows and whys of the framework, and can reveal techniques that can be applied to your own applications. The AngularJS source is well documented, cleanly written, and well tested. If you&rsquo;re working with AngularJS, I highly recommend diving into these internals and discovering this for yourself. It won&rsquo;t be time wasted.</p>

<p>You might also enjoy: <a href="http://joelhooks.com/blog/2013/05/22/lessons-learned-kicking-off-an-angularjs-project/"><strong>Lessons Learned: A Year with a Large AngularJS Project</strong></a></p>

<p>or maybe: <a href="http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend/"><strong>Learn AngularJS this Weekend</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Essential VIM Plugins That Greatly Increase my Productivity]]></title>
    <link href="http://joelhooks.com/blog/2013/04/23/5-essential-vim-plugins/"/>
    <updated>2013-04-23T09:05:00-07:00</updated>
    <id>http://joelhooks.com/blog/2013/04/23/5-essential-vim-plugins</id>
    <content type="html"><![CDATA[<p>There are <strong>a lot</strong> of VIM plugins to choose from. An individual&rsquo;s list of what
would be considered &ldquo;essential&rdquo; is largely a personal matter. For any given
plugin, there is also probably going to be an excellent alternative plugin that does the
same basic thing in a slightly different way. I&rsquo;m just starting to use VIM for
more than just quick edits of files on a server, and the plugins below are
solving very specific workflow issues that I&rsquo;ve encountered while learning to be
productive in VIM.</p>

<p><strong>warning:</strong> watch out for plugins, generally. For many (some included in my
list of favorites here) might hamper your ability to understand the core
functionality of VIM. Many times the problem is best solved by understanding how
you can accomplish the task with just VIM, and not a plugin. One of the biggest
barriers I had with getting over the initial learning curve was over-saturation
with plugins, as I <a href="http://joelhooks.com/blog/2013/04/09/getting-to-know-vim/">wrote
here</a>.</p>

<h2>Vundle</h2>

<p>If any of these plugins had an &ldquo;absolutely&rdquo; in front of its &ldquo;essential&rdquo;
descriptor, it would be <a href="https://github.com/gmarik/vundle">Vundle</a>.</p>

<p>Vundle is short for VIM Bundle. It is spiritually alike to
<a href="http://gembundler.com/">Bundler</a>, and provides a clean easy way to manage
plugins that you install. In past VIM efforts, I didn&rsquo;t use any sort of scheme
for managing plugins, and it was allways a complete <strong>mess</strong>. Vundle has solved
this for me completely.</p>

<p>Vundle also allows me to rapidly reconfigure my setup across multiple machines,
which can be a real boost. It isn&rsquo;t really a day-to-day productivity booster,
but when you need it, it is great to have it configured.</p>

<h2>NERDTree</h2>

<p>One of the first walls I hit was &ldquo;how the heck do I navigate files in a
project?&rdquo;</p>

<p>The solution is multi-pronged, and starts with
<a href="https://github.com/scrooloose/nerdtree">NERDTree</a>. The NERD Tree is a
filesystem explorer that looks something like this:</p>

<p><img src="/images/nerdtree.png" alt="NERDTree" /></p>

<p>It opens to your current directory, and allows you to drill down into folders.
This allows you to traverse your project and open files. It also has file
management capabilities for creating, deleting, and other common tasks.</p>

<p>NERDTree is fantastic for hunting something down, but there are other tools that
help solve this problem in different ways.</p>

<p><strong>note</strong>: I was chastised a bit for this one on <a href="https://news.ycombinator.com/item?id=5597939">Hacker
News</a>. NERDTree <strong>is</strong> big, and
you might have better luck with <code>netrw</code> as suggested. I plan on digging in to
<code>:h netrw</code> to see if I can drop NERDTree off this list of (my) essentials.</p>

<h2>ctrlp</h2>

<blockquote><p>Full path fuzzy file, buffer, mru, tag, &hellip; finder for Vim.</p></blockquote>

<p><a href="https://github.com/kien/ctrlp.vim">ctrlp</a> is <strong>rad</strong>. It really lets you fly
around your project&rsquo;s files. After a quick <code>let g:ctrlp_map = '&lt;c-p&gt;'</code> to map it
to a hotkey, you are off to the races. It has different modes that allow you to
jump to files, buffers, most recently used, as well as tags.</p>

<p>With no fault to ctrlp, I&rsquo;ve had issues with tags and JavaScript. ctags is
behind the times, and DoctorJS lost its maintainer. Tern looks to have some
promise in this regard, and the VIM plugin is under heavy development. Having
solid JS tags would turbo-charge ctrlp for me, so I&rsquo;m paying close attention to
ongoing development.</p>

<h2>Syntastic</h2>

<p><a href="https://github.com/scrooloose">scrooloose</a> has several awesome VIM plugins,
including NERDTree above. I also get a lot of mileage out of
<a href="https://github.com/scrooloose/syntastic">Syntastic</a>. It is a simple linter that
highlights problems with syntax in a file. It works on <code>save</code>, and provides
meaningful feedback about warnings and errors.</p>

<h2>EasyMotion</h2>

<p>Last, but in absolutely no way least, is the elegent
<a href="https://github.com/Lokaltog/vim-easymotion">EasyMotion</a>. This plugin is all
about navigating in the file you are currently editing.</p>

<p><img src="/images/easymotion.png" alt="EasyMotion" /></p>

<p>When activated with the <code>word</code> motion, EasyMotion assigns the first letter of
every word after the cursor with a letter-based hotkey. After the first 26
letters are used up, it switches to capitals. Those soon change to sections that
allow you to &ldquo;drill in&rdquo; and get very fine-grained movement across large
distances in your file. As your finger muscles get trained, the motion really is
<strong>easy</strong>.</p>

<p>This list isn&rsquo;t exhaustive, by any means. I also have several &ldquo;essential&rdquo;
plugins that I used specifically related to languages and file types that are
common for me. Vundle is probably the most essential out of this list. It has
been a huge help over the previous cut-n-paste horrid approach I&rsquo;ve used in the
past. Running <code>:BundleUpdate</code> and watching Vundle march down my installed plugin
list, looking at the github repository for each plugin I&rsquo;ve installed, and
updating them without any hassle at all is hugely satisfying.</p>

<p>If you are interested, my <a href="https://github.com/joelhooks/dotfiles">dotfiles are stored
here</a>. They are an ongoing process, but
there are some interesting things going on.</p>

<p>I&rsquo;d love the hear about your essential VIM plugins. I&rsquo;m always on the hunt for
new and interesting additions to my workflow.</p>

<p><div class="buybox">
  <span class="buyhead">Want to make more money and love what you do? If you
  answered "Yes!" then you will enjoy my Consultancy Masterclass Sketchnotes.</span><br><p class="text">Brennan charges <strong>$1,799</strong>
 for <a href="http://doubleyourfreelancingrate.com/build-a-consultancy">his masterclass</a>
and it is worth every penny. If you are on the fence about the class, or would
like to look at the "essence" of the class in <strong>10 pages of lovingly illustrated sketchnotes</strong>, click below and
they are yours for <strong>$9.99</strong>.</p>
  <p class="quote">"Awesome! I love these." - Brennan Dunn</p>
  <a class="button" href="http://gum.co/consultancyclass">Buy Sketchnotes Now</a>
  <p><a class="small" href="http://gum.co/consultancyclass">Buy Sketchnotes Now</a><p>
  <p class="small"><strong>100% satisfaction gurantee</strong>. If you aren't happy with these
  notes, for <strong>any</strong> reason, just let me know and I will refund your money!</p>
</div></p>
]]></content>
  </entry>
  
</feed>
