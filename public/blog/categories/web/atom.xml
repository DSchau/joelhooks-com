<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Joel Hooks]]></title>
  <link href="http://joelhooks.com/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://joelhooks.com/"/>
  <updated>2016-04-08T15:53:26-05:00</updated>
  <id>http://joelhooks.com/</id>
  <author>
    <name><![CDATA[Joel Hooks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why I Built an AngularJS Training Site on Rails]]></title>
    <link href="http://joelhooks.com/blog/2013/09/15/why-i-built-an-angularjs-training-site-on-rails/"/>
    <updated>2013-09-15T11:24:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/09/15/why-i-built-an-angularjs-training-site-on-rails</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re into AngularJS at all, you are probably familiar with the kickass <a href="http://egghead.io/">AngularJS video training</a> from egghead.io. If you haven&rsquo;t seen egghead.io, it is a collection of 50+ short &ldquo;bite-sized&rdquo; training videos, largely focused on the AngularJS framework. <div style="float: right; padding:5px;"><a class="nofancybox" href="http://egghead.io"><div style=" height: 191px; width: 150px; background-image: url(/images/egghead_logo.png);"></div></a></div>The videos are created by (and feature) my friend <a href="https://twitter.com/johnlindquist">John Lindquist</a> playing Webstorm like a violin while explaining basic AngularJS concepts.</p>

<p>Over the last few months John and I have been discussing egghead.io, and what its future holds. Is it an AngularJS training site? Is John going to be the only presenter? Is the donation model the best approach for keeping the lights on?</p>

<h2>The Problem</h2>

<p>egghead.io was a static site, built on AngularJS. It was using the YouTube API to grab a list of videos from a playlist, and list them out in a simple list. It had a permanent &ldquo;in progress, fixing stuff&rdquo; message in the top left, and a request (plea?) for donations in the top right. When you would click on of the videos, it would display the embedded video in the page.</p>

<p><img src="/images/egghead_before.jpg" alt="egghead.io on AngularJS" /></p>

<p>Frankly, this was adequate for John&rsquo;s needs. He just wants to create content and teach people. He didn&rsquo;t want to think about:</p>

<ul>
<li>SEO</li>
<li>Content pipelines</li>
<li>Information architecture</li>
<li>Server maintenance</li>
<li>Marketing</li>
</ul>


<p>Set it and forget it.</p>

<p>As it happens, I&rsquo;m really interested in all of those topics.</p>

<h2>The Solution Part 1: <strong>Ruby on Rails</strong></h2>

<p>I was asked, &ldquo;Why would you build an AngularJS training site with Ruby on Rails?!&rdquo;</p>

<p>This was the first time I&rsquo;ve used Rails, outside of tutorial type projects. It has been floating at the top of my &ldquo;to learn&rdquo; list for several years. Aside from basic nerd compulsion to explore cool technology, it became rapidly apparent that this was the <em>right tool for the job</em>.</p>

<p>One of the drawbacks of a single page app, built with AngularJS or another similar framework, is that SEO become extremely tricky. There are approaches for overcoming this, but it is beyond trivial. egghead.io is a web <strong>page</strong> with the purpose of delivering content. Web pages need to searchable, so people hunting Google will actually be able to find them. Egghead had a bit of search traffic. It actually does fairly well (2nd page) in a search for &ldquo;AngularJS&rdquo;. What wasn&rsquo;t getting search hits was the video lessons themselves.</p>

<p><img src="/images/egghead_after.jpg" alt="egghead.io gets a facelift" /></p>

<p>By rendering the pages on the server, and delivering them to the browser, Google can now crawl the pages and actually show the pages to searchers interested in the content. It didn&rsquo;t take long to see a bump in organic search traffic.</p>

<p><img src="http://cl.ly/image/2e2p422t2f2R/Screen%20Shot%202013-09-15%20at%2012.29.01%20PM.png" alt="A nice spike in search traffic for egghead.io" /></p>

<p>I was also able to get authentication squared away with Devise and CanCan. It was a bit tricky, since I chose Rails 4 and Bootstrap 3. Many of the gems required using git branches, but after some trial and error it all dialed in very nicely.</p>

<p>Rails wasn&rsquo;t the only choice for this. I also considered Django and a Node stack, but ultimately the &ldquo;convention over configuration&rdquo; nature of Rails won my heart. It is <strong>so freaking easy</strong> and pleasant to work with. After a month, it has earned a well-deserved slot in my web development toolbelt.</p>

<h2>The Solution Part 2: <strong>Heroku</strong></h2>

<p>You want to talk about <strong>freaking easy</strong>? Heroku. Frictionless. Magic. Amazing. Awesome. Kickass. Incredible. ZOMG WOW.</p>

<p>If it isn&rsquo;t obvious, I really love Heroku.</p>

<p>Even with a fair bit of traffic, I&rsquo;m able to comfortably get away with the free plan. Through the use of strategic caching and CloudFront to serve static content, the server itself doesn&rsquo;t have to do much heavy lifting.</p>

<p><code>git push heroku master</code></p>

<p><i class='emoji emoji1f493'></i></p>

<p>I&rsquo;m not scared of managing my own VPS, but there is enough work to do without getting into SYSOP tasks. Heroku ftw.</p>

<h2>The Solution Part 3: <strong>Wistia</strong></h2>

<p>TIL: <strong>video seo</strong> is a thing.</p>

<p>You ever notice your search results that show a preview thumbnail of a video with the little &ldquo;play&rdquo; icon? Usually these are for YouTube results. This is because, and is no shocker, Google is <em>really good at video SEO</em>. For YouTube. Try as you might, if you are hosting your videos on YouTube, you will <strong>never</strong> see these &ldquo;rich snippets&rdquo; on your own pages where you embed the videos.</p>

<p>Video SEO is black magic voodoo. It involves creating a specific sitemap XML that correlates media to a URL. It looks something like this:</p>

<p>``` xml
<url>
  <loc><a href="http://egghead.io/lessons/bower-introduction-and-setup">http://egghead.io/lessons/bower-introduction-and-setup</a></loc>
  &lt;video:video></p>

<pre><code>&lt;video:content_loc&gt;http://embed.wistia.com/deliveries/4f239fa48f86dd8854a707fa6384de5aa3c54db7/file.mp4&lt;/video:content_loc&gt;
&lt;video:thumbnail_loc&gt;http://embed.wistia.com/deliveries/3df06507df5589c130ceb906a59d8f04f9a5f034/file.png&lt;/video:thumbnail_loc&gt;
&lt;video:title&gt;Bower - Introduction to Bower&lt;/video:title&gt;
&lt;video:description&gt;Bower is a package manager for Javascript libraries that allows you to define, version, and retrieve your dependencies. In this tutorial, John gives a quick introduction to Bower and will show you how to get started.&lt;/video:description&gt;
&lt;video:publication_date&gt;2013-09-05T14:27:26+00:00&lt;/video:publication_date&gt;
&lt;video:family_friendly&gt;yes&lt;/video:family_friendly&gt;
&lt;video:duration&gt;168&lt;/video:duration&gt;
&lt;video:tag&gt;bower tutorial&lt;/video:tag&gt;
&lt;video:tag&gt;bower setup&lt;/video:tag&gt;
&lt;video:tag&gt;bower angularjs&lt;/video:tag&gt;
&lt;video:tag&gt;bower screencast&lt;/video:tag&gt;
</code></pre>

<p>  &lt;/video:video>
</url>
```</p>

<p>You <strong>can</strong> associate your YouTube videos with a video sitemap, but it is fruitless. Given the same video, Google will <strong>always</strong> favor YouTube.</p>

<p>That&rsquo;s where <a href="http://wistia.com/">Wistia</a> comes in.</p>

<p>Wistia offers &ldquo;Professional video hosting built specifically for business.&rdquo; They host and stream videos, give awesome analytics, embedding, and (perhaps most importantly) <strong>easy to use video SEO tools</strong>.</p>

<p>Videos on the egghead.io domain are embedded via Wistia, and not YouTube. John is still posting to YouTube, but on the site we are able to take advantage of Wistia and take back some of the &ldquo;Google juice&rdquo; that would otherwise be delivered solely to YouTube.</p>

<p><img src="http://cl.ly/image/0X2C2443413h/Screen%20Shot%202013-09-11%20at%208.05.26%20AM.png" alt="rich snippets for the egghead.io domain" /></p>

<p>I&rsquo;ll admit to being overly excited when I saw the first &ldquo;rich snippet&rdquo; attached to an egghead.io domain. Maybe I&rsquo;m a nerd?</p>

<h2>The Solution Part 4: <strong>General SEO</strong></h2>

<p>Wistia has the video SEO covered, but an interesting aspect of video is that while you can tell Google the video exists, their robots aren&rsquo;t smart enough (yet) to analyze the video for keywords. To get over this hurdle, you can use transcripts of the video and provide the spiders the words they crave.</p>

<p>For this we used <a href="https://castingwords.com/">CastingWords</a>. I was amazed, despite the videos technical nature, the transcripts we got back were very accurate.</p>

<p>Transcripts are a win/win/win. Lots of people would rather just read a block of text for speed. There are people that can&rsquo;t hear at all, so audio content is useless to them. Search spiders love text.</p>

<p>Along with the transcripts we&rsquo;ve been going through the backlog of videos adding summary descriptions to each. It is a chore, but it is worth the effort.</p>

<h2>The Solution Part 5: <strong>Open Source isn&rsquo;t Charity</strong></h2>

<p>The donation model in open-source software is flawed. It is not charity. It takes a lot of <strong>work</strong> to build high quality open source software. It takes a lot of <strong>work</strong> to write documentation and provide training.</p>

<p><img src="/images/programmer.jpg" alt="Ain't too proud to beg." /></p>

<p>We can do better than asking for hand-outs.</p>

<p>While lots of generous visitors (~500) have donated to egghead.io over the last year, we decided to take a different approach. Instead of simply asking for a donation, what if we <a href="http://egghead.io/first-50-video-download-offline-bundle">bundled up the first 50 AngularJS videos and offered an &ldquo;offline HD bundle&rdquo;</a> of all the videos instead? This way we aren&rsquo;t accepting charity, and giving supporters something tangible for their hard-earned $$.</p>

<p>This approach has some limitations. All of the videos are streaming for free a back click away, but having the full resolution copies on your hard drive is something people want. It also gives a people a way to &ldquo;donate&rdquo; and get a receipt that can be expensed or deducted as a training cost.</p>

<p>It&rsquo;s been a huge success. The lights will be on at egghead.io for quite some time. We will be able to expand the site, and explore a wider range of high quality content.</p>

<h2>Conclusion and Next Steps</h2>

<p>I love AngularJS. It is an amazing tool. It isn&rsquo;t always the right tool for the job. If you are building web applications it might be a perfect fit. If you are building web <strong>pages</strong> the &ldquo;single page application&rdquo; approach has some severe flaws. Ruby on Rails solves these nicely.</p>

<p>Video provides many distinct challenges from a delivery and SEO perspective. YouTube makes it incredibly easy to share your content online, but the &ldquo;cost of free&rdquo; is that Google will leverage your content to take your audience away from your site and into their ecosystem. They give YouTube search priority, and squeeze your content for every drop of juice they can. By moving to a commercial hosting service like Wistia, you can regain a lot of control over the hard work you&rsquo;ve put into your content.</p>

<p>We aren&rsquo;t running a charity, and asking for donations is a habit I&rsquo;d like to see broken in OSS. There are clearly better ways to be compensated for our efforts, and I know that I <strong>love</strong> supporting OSS. It makes my day to send a content producer $$ for a high-quality book, workshop, or other training. I get smarter, they get paid. Everybody wins.</p>

<p><img src="/images/egghead_before_after.jpg" alt="the before and after of egghead.io" /></p>

<p>Working on the relaunch of egghead.io has been a lot of fun. It has allowed me to put to use a lot of the things I&rsquo;ve been learning over the last year in regards to SEO, conversion rate optimization, and generally building a modern web page. It is <strong>extremely awesome</strong> to have a project that I care deeply about, and can work on lovingly in my free time. I love my enterprise clients, but having a little techno proto-baby to feed and care for fills my heart with joy. Again, I might be a nerd ;)</p>

<p>Now I&rsquo;m looking forward to publishing my first screencast to the site! It should be soon, so be on the lookout :></p>

<p>P.S. If you&rsquo;re looking to build an AngularJS site <strong>on</strong> Rails, I highly recommend <a href="http://www.fullstack.io/edu/angular/rails/">this book</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The basics of using ui-router with AngularJS]]></title>
    <link href="http://joelhooks.com/blog/2013/07/22/the-basics-of-using-ui-router-with-angularjs/"/>
    <updated>2013-07-22T10:55:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/07/22/the-basics-of-using-ui-router-with-angularjs</id>
    <content type="html"><![CDATA[<p>URL routing is a popular approach to matching the contents of a URL to specific
functionality within a web application. URL routes programatically present
specific content to users based on the URL that they are visiting. It is a
popular approach that has proven to be very effective.</p>

<p>Something that might not be obvious is that URL routing is also a <a href="https://en.wikipedia.org/wiki/Finite-state_machine">finite state
machine</a>. When you configure
the routing for an app, you are laying out the various states the application
can be in, and informing the application what to display and do when a specific
route is encountered.</p>

<p>AngularJS supplies <a href="http://docs.angularjs.org/tutorial/step_07">URL routing</a> by default.
It is adequate, but also has some limitations.</p>

<p><img src="/images/app-layout.png" alt="A resonable application structure" /></p>

<h2>So what&rsquo;s the problem?</h2>

<p>Looking at the structure above, imagine an application where interacting with
items on the header or the sidebar causes the main content to load completely
different HTML. AngularJS provides a mechanism for this with <code>ng-switch</code>. You
can see a (very simple) example of this below.</p>

<iframe width="100%" height="300"
  src="http://jsfiddle.net/joelhooks/Swm48/4/embedded/result,js,html"
  allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>In this case, <code>ng-switch</code> is swapping out <code>div</code> elements, but you can also use
this approach to swap out templates using <code>ng-include</code>.</p>

<p>I&rsquo;m not going to explore this option. I&rsquo;m not particularly fond of it.</p>

<p><strong>Why not?</strong></p>

<ul>
<li>The <code>ng-switch</code> adds markup that could be confusing</li>
<li>The state of the main content area is captured and stored on a model</li>
<li>It feels like &ldquo;logic in markup&rdquo;, which I try to avoid</li>
<li>If you go down the <code>ng-include</code> road, you need to remember to always put
single quotes around your template names. I always forget. ;&lt;</li>
</ul>


<h2>ui-router</h2>

<p><a href="https://github.com/angular-ui/ui-router">ui-router</a> fully embraces the
state-machine nature of a routing system. It allows you to define states, and
transition your application to those states. The real win is that it allows you
to decouple nested states, and do some very complicated layouts in an elegant
way.</p>

<p>You need to think about your routing a bit differently, but once you get your
head around the state-based approach, I think you will like it.</p>

<iframe width="100%" height="300"
  src="http://jsfiddle.net/SvUjA/1/embedded/result,js,html"
  allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This example is functionally very similar to the <code>ng-switch</code> approach. The main
difference is that the main content area is populated with templated HTML for
each of the states, without using switching or <code>ng-include</code>.</p>

<p>``` javascript
angular.module(&lsquo;app&rsquo;, [&lsquo;ui.compat&rsquo;])</p>

<pre><code>.config(['$stateProvider', function ($stateProvider) {
    var home = {
            name: 'home',
            url: '/',
            templateUrl: 'content.html'
        },
        red = {
            name: 'red',
            url: '/red',
            parent: home,
            templateUrl: 'content.red.html'
        },
        blue = {
            name: 'blue',
            url: '/blue',
            parent: home,
            templateUrl: 'content.blue.html'
        },
        green = {
            name: 'green',
            url: '/green',
            parent: home,
            templateUrl: 'content.green.html'
        };

    $stateProvider.state(home);
    $stateProvider.state(red);
    $stateProvider.state(green);
    $stateProvider.state(blue);
}])
</code></pre>

<p>```</p>

<p>The above code is the configuration for the router. We are defining the <code>module</code>, but instead
of injecting <code>$routeProvider</code> as we would with stock AngularJS, we are injecting
a <code>$stateProvider</code> that is used to define the states. We are defining 4 states.</p>

<ul>
<li><code>home</code> is the parent state of the next 3. It defines the header, siderbar, and
the <code>ui-view</code> element that will be populated with the child states.</li>
<li><code>red</code> is the first child state. It references the <code>home</code> as its parent, as
well as targeting its own template.</li>
<li><code>blue</code> and <code>green</code> are identical to <code>red</code>, but use different templates.</li>
</ul>


<p>After the states are defined, they are added to the <code>$stateProvider</code>. They are
now ready to be navigated to.</p>

<p>``` javascript</p>

<pre><code>.run(['$state', function ($state) {
   $state.transitionTo('home'); 
}])
</code></pre>

<p>```</p>

<p>the <code>run</code> method is a great place to navigate to your intial state. You are able to
inject the now-resolved <code>$state</code> object and use its <code>transitionTo</code> method to set <code>home</code>
as the current state.</p>

<p>``` javascript</p>

<pre><code>.controller('SidebarCtrl', function ($scope, $state) {

$scope.content = ['red', 'green', 'blue'];

$scope.setPage = function (page) {
    $state.transitionTo(page);
};
</code></pre>

<p>```</p>

<p>The <code>SidebarCtrl</code> lists contains a simple array called content on its <code>$scope</code> which
is used in a <code>ng-repeat</code> to give us a simple menu. When one of those items is clicked
the <code>setPage</code> function is called with the item that was clicked. In this case, the
content items correspond to the names of the states that we&rsquo;ve defined, so we simply
<code>transitionTo</code> the selected state to display the content of that state.</p>

<h2>Next steps with ui-router</h2>

<p>This only really scratches the very surface of what you can pull off with
ui-router. There are a ton of options and the
<a href="https://github.com/angular-ui/ui-router/wiki">wiki</a> is well put together. Some
things I didn&rsquo;t explore, but that are available:</p>

<ul>
<li>Passing data between states</li>
<li>Listening for state events</li>
<li>Named views (love this, it deserves its own post)</li>
<li>URL Routing</li>
</ul>


<p><strong>The ui-router README warns that the utility is still in active early
development</strong>. The API is still subject to change, so if you choose ui-router for
your next project, that is something to be aware of.</p>

<p>Let me know if you&rsquo;d like me to explore ui-router a bit deeper in future posts.
I think it is an excellent approach to routing, and look forward to using it
more.</p>

<p><strong>Update:</strong> I&rsquo;ve recorded a <a href="http://egghead.io/lessons/angularjs-introduction-ui-router">screencast about ui-router</a> for egghead.io.</p>

<p><strong>Update 2:</strong> Here&rsquo;s a <a href="https://egghead.io/lessons/angularjs-ui-router-named-views">screencast about ui-router&rsquo;s named views</a> that I recorded for egghead.io. (note: it is paid/subscription content)</p>
]]></content>
  </entry>
  
</feed>
