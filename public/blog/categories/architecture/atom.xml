<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: architecture, | Joel Hooks]]></title>
  <link href="http://joelhooks.com/blog/categories/architecture/atom.xml" rel="self"/>
  <link href="http://joelhooks.com/"/>
  <updated>2015-12-31T01:23:40-06:00</updated>
  <id>http://joelhooks.com/</id>
  <author>
    <name><![CDATA[Joel Hooks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Modeling Data and State in Your AngularJS Application]]></title>
    <link href="http://joelhooks.com/blog/2013/04/24/modeling-data-and-state-in-your-angularjs-application/"/>
    <updated>2013-04-24T09:05:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/04/24/modeling-data-and-state-in-your-angularjs-application</id>
    <content type="html"><![CDATA[<h2>Respect your data. Contain your state.</h2>

<div style="float: right; padding-top: 30px; padding-left: 30px"><img src="http://joelhooks.com/images/AngularJS-Shield-large.png" /></div>


<p>Data and state are the foundation of your application. These two items should be
absolutely respected. As you work through the AngularJS documentation, these two
items are generally stored on the controllers. This works OK, but as your app
grows beyond the &ldquo;todo list&rdquo; it quickly breaks down. Controllers need shared
state, data needs to be contained, and it needs to be done in a consistent manner
that is easy to comprehend.</p>

<p>I&rsquo;ve <a href="http://joelhooks.com/2011/03/12/an-introduction-to-robotlegs-as3-part-2-models/">written about
this</a>
in the past, in the context of ActionScript 3 and the Robotlegs framework. This
approach is valid for JavaScript, but requires some translation to build something usable for
AngularJS.</p>

<h2>What is a Model?</h2>

<blockquote><p>A model notifies its associated views and controllers when there has been a
change in its state. This notification allows the views to produce updated
output, and the controllers to change the available set of commands. A passive
implementation of MVC omits these notifications, because the application does
not require them or the software platform does not support them.
<a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">from
Wikipedia</a></p></blockquote>

<p>As the &ldquo;M&rdquo; in <a href="http://www.codinghorror.com/blog/2008/05/understanding-model-view-controller.html">MVC</a>, model classes <strong>encapsulate</strong> your application’s data and <strong>provide an API</strong> to access
and manipulate that data. The other classes in your application will make
requests of models via this API. When data on the model is updated, the model
dispatches events that the other classes within your application can react to.
Models are appropriate for capturing the domain logic, such as performing
calculations or other manipulations.</p>

<p>An example of this might be a shopping
cart. When an item is added to the shopping cart model, the new total for all of
the items in the cart will be calculated. The new total will then be stored on
the model for access by other classes within the application. By placing this
logic within your models, you ensure that it isn’t scattered across the entire
application and know exactly where to look to see how and when your data is
being manipulated.</p>

<p>In addition to controlling access to data, models maintain the state of your
application. Consider a list of objects. You want to keep track of which of
these objects is selected, so the data model has a selected property which is
updated with the currently selected item. Other areas of your application can
now access this property to discover which item is selected and react
accordingly.</p>

<p>As you can see, data and state are intimately related. <strong>State is data, data is
state</strong>.</p>

<p>Models are portable. There are many common sets of data that can easily
transport between one application and the next. Think of, as an example, a
<code>UserLoginModel</code> or a <code>ShoppingCartModel</code>. Portability takes a bit more thought and
energy, but no more than writing the same code over again for each project.
Obviously every model isn&rsquo;t going to qualify for this, but many will so it is
something to watch out for.</p>

<p>The model is the core of your application. The
visual components get all the ooos and aaahs, but as a developer you know that
data is the man behind the curtain. It is our jobs, as developers, to curate the
data and deliver it to those beautiful interface items accurately. This is why
isolating domain logic in the model is so important. By isolating it you have
made it easier to locate, update, and maintain.</p>

<p>We&rsquo;ve dug into what a model is, but if you&rsquo;re like me, you are waiting to see
how to actually use models within an AngularJS application, so let&rsquo;s take a look
at that.</p>

<h2>Exploring the Code</h2>

<iframe width="100%" height="300"
src="http://jsfiddle.net/joelhooks/jWmck/embedded/js,result,html/"
allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This is a simple/naive example that has a list of authors with a poignant quote from
each. If you explore the example you will quickly notice that all of the data
and state is stuffed in the controller. This is OK for a trivial demo, and
something more complicated/non-trivial is difficult to present in a blog post.
It should be enough to present the concepts and gain some understanding on how
using models can reduce the overall cognitive load of more complex applications.</p>

<p>This &ldquo;everything stuffed in a controller&rdquo; approach works, but <strong>we can do better</strong>.</p>

<p><strong>note:</strong> I&rsquo;m using jsFiddle, and it puts obvious restrictions on how you
organize your code. I will be adding some thoughts on that in a future post, but
a monolithic single JS file isn&rsquo;t going to scale very well.</p>

<p>If you&rsquo;d like to see a good write-up on structuring larger Angular apps, my
friend <a href="http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript">Cliff
Meyers</a>
wrote a great article on the subject.</p>

<h2>Introducing a Model to Store Data</h2>

<p>In the above example, all of our data is stored within the controller on the
<code>$scope</code>. It is all hardcoded in the app as well, but we will talk about service
integration in the future. The task we want to accomplish now is a little
seperation of data and presentation. This doesn&rsquo;t mean that we won&rsquo;t be using
<code>$scope</code>. We will. AngularJS uses the <code>$scope</code> as a <a href="http://martinfowler.com/eaaDev/PresentationModel.html">Presentation
Model</a>. This is
fine, but we can still provide much nicer separation with a &ldquo;proper&rdquo; model for
the data.</p>

<iframe width="100%" height="300"
src="http://jsfiddle.net/joelhooks/jWmck/7/embedded/js,result/"
allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>If you look at the JavaScript above, I think you will agree that it is already
starting to look a bit cleaner. While the controller&rsquo;s <code>$scope</code> is still
ultimately supplying the view with the data it craves, the actual data is housed
in a model. The model is a &lsquo;singleton&rsquo; (of the lowercase &rsquo;s' variety) defined as
an Angular service.</p>

<p>I found Angular&rsquo;s definition of &ldquo;service&rdquo; confusing at first. It has nothing
directly to do with what I consider a service, but is simply one of the methods
for defining dependencies for injection.</p>

<iframe width="100%" height="300"
src="http://jsfiddle.net/joelhooks/jWmck/9/embedded/js,result/"
allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This is more like it. Now we have a tiny controller, and all of our data and
state is offloaded onto <code>authorListModel</code>. We&rsquo;ve added the <code>setSelectedAuthor</code>
to the model, which dispatches an event. Our controller is listening for the
event, so it updates the <code>$scope</code> appropriately and the view displays the
information we expect.</p>

<p>This clean separation is going to pay huge dividends as the application grows in
scope. We can now easily separate the <code>textarea</code> that contains the quote from
the list of available authors.</p>

<p><strong>anti-pattern alert:</strong> you might be tempted to add event listeners on your
model. Don&rsquo;t. It makes them harder to test and generally kills models in terms
of single-responsibility-principle. Since a model <em>has an</em> event dispatch, which
can also listen for events, the temptation is always there. Ignore this warning
at your own peril! ;)</p>

<iframe width="100%" height="300"
src="http://jsfiddle.net/joelhooks/jWmck/10/embedded/js,result,html/"
allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This is a bit silly, but shows the flexibility of this approach. The <code>textarea</code>
is now driven by its own controller. That controller is also listening for the
update event the model dispatches. Instead of inspecting the model, it uses a
parameter sent with the event to update <code>$scope.quote</code> and the magical Angular
binding does the rest. Nice.</p>

<h2>Do I really need to use events like this?</h2>

<p>Most definitely <strong>not</strong>. Instead of the eventing I outlined above, you could
simply bind to the model. One of Angular&rsquo;s greatest strengths is its awesome
two-way <code></code>.</p>

<iframe width="100%" height="300"
src="http://jsfiddle.net/joelhooks/jWmck/12/embedded/js,html,result"
allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This is pretty nice, and is arguably cleaner than the eventing approach. In many
(most) cases, this approach might be preferred.</p>

<h2>Conclusion?</h2>

<p>Models provide an excellent way to separate data and display. By migrating your
data and state to a model, you have much more flexibility with how that data is
presented. Models are also <strong>prime</strong> candidates for unit testing, as they
typically have exactly <strong>one dependency</strong> (some form of event emitter, in this
case the <code>$rootScope</code>) and contain highly testable domain
logic.</p>

<p>Hopefully this gets you started down the road of using models in your AngularJS
apps. In the near future, I will expand on models to discuss services (the
external kind) and how they play with this approach.</p>

<p>If you have any comments, questions, or critique please share. I&rsquo;d love to hear
about how you solve this problem of separating view and data with AngularJS.</p>

<p>If you are looking for nuts &amp; bolts lessons on AngularJS, it is hard for me to
express in words how awesome <a href="http://www.egghead.io/">John Lindquist&rsquo;s
egghead.io</a> is. If you haven&rsquo;t already, go there now.</p>

<p>Join the conversation on <a href="http://redd.it/1d31fh">Reddit</a> and <a href="https://news.ycombinator.com/item?id=5607330">Hacker
News</a></p>
]]></content>
  </entry>
  
</feed>
