<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AngularJS, | Joel Hooks]]></title>
  <link href="http://joelhooks.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://joelhooks.com/"/>
  <updated>2013-09-15T10:54:26-05:00</updated>
  <id>http://joelhooks.com/</id>
  <author>
    <name><![CDATA[Joel Hooks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn AngularJS this Weekend]]></title>
    <link href="http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend/"/>
    <updated>2013-08-03T23:36:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend</id>
    <content type="html"><![CDATA[<p>AngularJS has a reputation for a steep learning curve. It&rsquo;s definitely complex, but follows the 80/20 rule. <strong>20% of the features are what you will use 80% of the time</strong>. If you are new to AngularJS and have a weekend to study, there are some very high quality resources that will let you <strong>start Monday with a strong working knowledge of AngularJS</strong>.</p>

<p>Already know AngularJS? Feel free to skip ahead. These resources are excellent, and you&rsquo;re bound to learn something.</p>

<h2>The Official Tutorial ~4hrs</h2>

<p>Start with <a href="http://docs.angularjs.org/tutorial">the official tutorial</a>. It provides a very straight forward overview of AngularJS and walks step by step through building a simple app. When you&rsquo;re done, you should have <strong>a solid understanding of the basics</strong> and the vocabulary you will need to move on to the next step.</p>

<p>The official tutorial is <em>very</em> well put together. Unfortunately it utilizes the angular-seed project as a template. The angular-seed project is fine for quickly throwing together a working AngularJS app, but it doesn&rsquo;t provide a structure that scales well in a production application.</p>

<p><strong>Don&rsquo;t use the angular-seed to start your real projects!</strong> It&rsquo;s a learning tool only.</p>

<h2>Kickass (<strong>free!</strong>) Video Tutorials on Egghead.io ~3hrs</h2>

<div style="float: left; padding:10px;"><a class="nofancybox" href="http://egghead.io"><div style=" height: 191px; width: 150px; background-image: url(/images/egghead_logo.png);"></div></a></div>


<p>You&rsquo;ve done the tutorial, and should have a good grasp of the basics. Your next stop is John Lindquist&rsquo;s <a href="http://www.egghead.io/">egghead.io for free AngularJS videos</a>. This series of bite-sized videos will deliver a ton of great information. John has gone through almost all of the &ldquo;hard&rdquo; concepts, and presented them in an easy to understand way.</p>

<p><em>All</em> of the videos are great, but the <strong>series on directives is extra fantastic</strong>. Transclusion? No problem. Even after using AngularJS for over a year, I was able to solidify some of the concepts that were confusing for me.</p>

<p>Watch them all and <strong>take some notes</strong>. When you come out of the other side your AngularJS-fu will be starting to take shape.</p>

<p><img src="/images/lemonade.jpg" alt="ahhhhhhh Learning AngularJS is refreshing - Photo Credit: chotda" /></p>

<p>That will take you through Saturday evening, and you deserve a rest. <strong>Send John a donation for his hard work</strong>, pour a tall glass of lemonade, and relax as you reflect on the your new-found knowledge of an awesome framework. Nice work!</p>

<h2>Things get real with angular-app ~4hrs</h2>

<p>Sunday morning.</p>

<p>At this point you should understand the core AngularJS concepts and terminology. Time to brew a fresh pot and get to work.</p>

<p><img src="/images/french_press.jpg" alt="AngularJS Fuel - Photo Credit: BjÃ¸rn Giesenbauer" /></p>

<p>If you are anything like me, by now you&rsquo;re ready to dig into a <strong>proper example application</strong>. Luckily we have the excellent <a href="https://github.com/angular-app/angular-app">angular-app</a> project to explore. This non-trivial example focuses on best practices for:</p>

<ul>
<li>Folder structure (important!)</li>
<li>Modules (very important!)</li>
<li><strong>Testing</strong> (super important!)</li>
<li>RESTful services</li>
<li>Navigation</li>
<li>Security</li>
</ul>


<p>angular-app combines a solid AngularJS UI with a node.js backend. It is non-trivial, and studying this app will give you a realistic sense of a proper AngularJS app.</p>

<p>One killer aspect of this example is the build system. It <strong>demonstrates a fantastic Grunt.js build with an integrated Karma Test Runner</strong>.</p>

<p>Peter Bacon Darwin and Pewel Kozlowski have done a great job. Front to back, this project is worth your study time. You could spend several days investigating the nooks and crannies of this example, but we&rsquo;ve only got the weekend. Set angular-app to the side for now, but keep it handy. It will serve as valuable reference in the future.</p>

<h2>Start building your own app with ng-boilerplate ~4hrs</h2>

<p>At this point you should have a solid knowledge to start building something. The <a href="https://github.com/joshdmiller/ng-boilerplate">ng-boilerplate</a> project will get you started. <strong>This is the seed you should use</strong>. It takes the lessons you learned studying angular-app, and provides the foundation upon which to build something substantial.</p>

<p><img src="/images/engine.jpg" alt="a strong engine for your AngularJS app" /></p>

<p>ng-boilerplate, unlike the angular-seed project, is <strong>suitable as a starting point for building a production app</strong>. It&rsquo;s a solid shortcut, and worth study.</p>

<p>Spend some time getting to know ng-boilerplate through its excellent README. The READMEs don&rsquo;t stop at the root of the project. Josh has sprinkled them throughout the project to help you understand what is going on.</p>

<p>Once you have your head around ng-boilerplate, you can delete all of the placeholder views, and <strong>start trying things out for yourself</strong>.</p>

<p>Need some ideas?</p>

<ul>
<li>PRISM:Refract &ndash; NSA Dashboard</li>
<li>FlySwatter &ndash; A simple bug tracker</li>
<li>GeekTalk &ndash; Multiroom Chat</li>
<li>OctoStats &ndash; Ranked Github Users with Clever D3 Visuals</li>
<li>1000words &ndash; Writing app that sets target of 1000 words per day and graphs your success</li>
<li>GetItDone &ndash; Yup, a todo list.</li>
<li>&hellip;?</li>
</ul>


<p>The sky is the limit. Using the reference material you&rsquo;ve studied all weekend, combined with the official AngularJS docs, you should be well on the way to AngularJS mastery. You&rsquo;ll be over the hump, having defeated that infamous curve. Build something cool and tell me about it.</p>

<p>If you&rsquo;ve hit any road blocks, <a href="https://mail.google.com/mail/?view=cm&amp;fs=1&amp;tf=1&amp;to=joelhooks@gmail.com&amp;su=Hello,%can%I%20get%20some%20help?">send me an email</a> and I&rsquo;ll help you out.</p>

<h2>Congrats! You&rsquo;ve leveled up.</h2>

<p>The fun isn&rsquo;t over. There is <strong>plenty left to learn</strong>. The weekend <em>is</em> over though, and you&rsquo;ve worked hard. Take a break and relax.</p>

<p>You&rsquo;ve earned it.</p>

<p><img src="/images/yellow_belt.jpg" alt="You've Leveled up your AngularJS! - Photo Credit: Cayusa" /></p>

<p>P.S. Initial project setup is one of the most critical factors to a project&rsquo;s success. Using templates is a great way to get a head start, but using a template without solid understanding of all the moving parts can be dangerous. I&rsquo;m working on <strong>step-by-step guide to building your own best practices AngularJS project template</strong>. If you want to get notified of its progress, as well as launch-day discounts, sign up to my newsletter below.</p>

<p>You might also enjoy: <a href="http://joelhooks.com/blog/2013/05/22/lessons-learned-kicking-off-an-angularjs-project/"><strong>Lessons Learned: A Year with a Large AngularJS Project</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Directives That Override Standard HTML Tags]]></title>
    <link href="http://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags/"/>
    <updated>2013-07-15T13:22:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags</id>
    <content type="html"><![CDATA[<p>Directives are the heart and soul of AngularJS. They are incredibly powerful.
AngularJS sets out to extend the grammar of the browser to supply semantics that
facilitate the creation of web applications, going beyond the standard
hyper-linked web page. The primary weapon to accomplish this is the directive.</p>

<p>Creating your own directives is an awesome way to create composed, reusable
behaviors in your applications. This article isn&rsquo;t about making your own
directives, instead I wanted to take a closer look at the internal directives of
AngularJS. Specifically, we will be looking at how and why AngularJS extends the
functionality of native HTML tags like <code>&lt;input&gt;</code> and <code>&lt;a&gt;</code> to make the magic
happen.</p>

<h2>A is for Anchor</h2>

<p>``` javascript
var htmlAnchorDirective = valueFn({
  restrict: &lsquo;E&rsquo;,
  compile: function(element, attr) {</p>

<pre><code>if (msie &lt;= 8) {

  // turn &lt;a href ng-click=".."&gt;link&lt;/a&gt; into a stylable link in IE
  // but only if it doesn't have name attribute, in which case it's an anchor
  if (!attr.href &amp;&amp; !attr.name) {
    attr.$set('href', '');
  }

  // add a comment node to anchors to workaround IE bug that causes element content to be reset
  // to new attribute content if attribute is updated with value containing @ and element also
  // contains value with @
  // see issue #1949
  element.append(document.createComment('IE fix'));
}

return function(scope, element) {
  element.on('click', function(event){
    // if we have no href url, then don't navigate anywhere.
    if (!element.attr('href')) {
      event.preventDefault();
    }
  });
}
</code></pre>

<p>  }
});
```</p>

<p>The <a href="https://github.com/angular/angular.js/blob/master/src/ng/directive/a.js"><code>htmlAnchorDirective</code></a> has a simple job. It is there to prevent navigation and page reloading. Typically this is in conjunction with <code>ng-click</code>, which is used to actually capture the click and navigate the user within the application. Every <code>&lt;a&gt;</code> in your application is effectively extended by AngularJS. The functionality is primarily the <code>event.preventDefault()</code> that is applied if the anchor tag doesn&rsquo;t have an <code>href</code> attribute.</p>

<p>One thing to note, and this is typical throughout the AngularJS internals, is that this directive requires special attention for IE 7. When I&rsquo;m digging around in the internals, I&rsquo;m always appreciative of this effort made by the AngularJS contributors. These aren&rsquo;t fun problems to solve, and it is nice that somebody has made the effort to solve them for us :></p>

<h2>Digging into &lt;form></h2>

<p><a href="https://github.com/angular/angular.js/blob/master/src/ng/directive/form.js">AngularJS overrides <code>&lt;form&gt;</code></a> to provide some important functionality. The core of this extension of <code>&lt;form&gt;</code> is to prevent any page refresh that would occur with an unmodified <code>&lt;form&gt;</code> tag. Lets have a look:</p>

<p>``` javascript
var formDirectiveFactory = function(isNgForm) {
  return [&lsquo;$timeout&rsquo;, function($timeout) {</p>

<pre><code>var formDirective = {
  name: 'form',
  restrict: 'E',
  controller: FormController,
  compile: function() {
    return {
      pre: function(scope, formElement, attr, controller) {
        if (!attr.action) {
          // we can't use jq events because if a form is destroyed during submission the default
          // action is not prevented. see #1238
          //
          // IE 9 is not affected because it doesn't fire a submit event and try to do a full
          // page reload if the form was destroyed by submission of the form via a click handler
          // on a button in the form. Looks like an IE9 specific bug.
          var preventDefaultListener = function(event) {
            event.preventDefault
              ? event.preventDefault()
              : event.returnValue = false; // IE
          };

          addEventListenerFn(formElement[0], 'submit', preventDefaultListener);

          // unregister the preventDefault listener so that we don't not leak memory but in a
          // way that will achieve the prevention of the default action.
          formElement.on('$destroy', function() {
            $timeout(function() {
              removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);
            }, 0, false);
          });
        }

        var parentFormCtrl = formElement.parent().controller('form'),
            alias = attr.name || attr.ngForm;

        if (alias) {
          scope[alias] = controller;
        }
        if (parentFormCtrl) {
          formElement.on('$destroy', function() {
            parentFormCtrl.$removeControl(controller);
            if (alias) {
              scope[alias] = undefined;
            }
            extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
          });
        }
      }
    };
  }
};

return isNgForm ? extend(copy(formDirective), {restrict: 'EAC'}) : formDirective;
</code></pre>

<p>  }];
};
```</p>

<p>The above function is a factory that creates a form directive. The directive itself does several things. Aside from some memory management it also serves to prevent the default behavior of the form action. Typically with an AngularJS application, you will want to capture the user&rsquo;s input it a form, and feed that data into a controller to send it to the server. This is different from the standard <code>action</code> attribute of a form that will perform a POST operation and typically redirect the user to a new page. This behavior is probably not what you want in your single-page JavaScript application, so AngularJS is working to help prevent that. You probably still want to be able to submit your form, and the <code>ngSubmit</code> directive placed as an attribute on the <code>&lt;form&gt;</code> tag will execute an expression when your designated submit input is clicked.</p>

<p>If you&rsquo;re paying close attention, you&rsquo;ll notice that the form directive above has a <code>FormController</code> assigned to it. The <code>FormController</code> is the brains of all the forms within an AngularJS application, and every <code>&lt;form&gt;</code> gets one. The <code>FormController</code> tracks all of the controls within a form and manages the validity of the form.</p>

<h2>The Input Directive</h2>

<p>``` javascript
var inputDirective = [&lsquo;$browser&rsquo;, &lsquo;$sniffer&rsquo;, function($browser, $sniffer) {
  return {</p>

<pre><code>restrict: 'E',
require: '?ngModel',
link: function(scope, element, attr, ctrl) {
  if (ctrl) {
    (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrl, $sniffer,
                                                        $browser);
  }
}
</code></pre>

<p>  };
}];
```</p>

<p>Wow! It&rsquo;s so simple ;)</p>

<p>It is. This is because <a href="https://github.com/angular/angular.js/blob/master/src/ng/directive/input.js">the actual <code>&lt;input&gt;</code> tag</a> is only the entry point. The real work is done based on the <strong>type</strong> of input that is being used. AngularJS is looking for the following input types:</p>

<ul>
<li>text</li>
<li>number</li>
<li>url</li>
<li>email</li>
<li>radio</li>
<li>checkbox</li>
</ul>


<p>With the URL, email, and number types, AngularJS provides some basic validation:</p>

<p><code>javascript
var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&amp;%@!\-\/]))?$/;
var EMAIL_REGEXP = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$/;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;
</code></p>

<p>Here&rsquo;s the code for the URL type:</p>

<p>``` javascript
function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  textInputType(scope, element, attr, ctrl, $sniffer, $browser);</p>

<p>  var urlValidator = function(value) {</p>

<pre><code>if (isEmpty(value) || URL_REGEXP.test(value)) {
  ctrl.$setValidity('url', true);
  return value;
} else {
  ctrl.$setValidity('url', false);
  return undefined;
}
</code></pre>

<p>  };</p>

<p>  ctrl.$formatters.push(urlValidator);
  ctrl.$parsers.push(urlValidator);
}
```</p>

<p>Simple stuff. It is using the REGEX above and setting the validity on the <code>FormController</code>, which you can then use to display feedback to the user. Email and number validation works in a similar fashion.</p>

<p>With text-type inputs AnglularJS also provides <strong>data-binding</strong> via <code>ngModel</code>, which is an extremely convenient solution to capturing user input and displaying it in the form. We should look at <code>ngModel</code> a bit closer in a future post.</p>

<h2>Just the beginning.</h2>

<p>It wasn&rsquo;t immediately obvious to me when I started using AngularJS that the framework was overriding these default HTML tags to add the secret sauce on top. Once the realization dawned on me, it opened my eyes to the power and potential that directives hold. You aren&rsquo;t restricted to the extensions that AngularJS provides with these built-in directives. You can further extend the capabilities of HTML by creating your own directives that override and extend the native HTML elements.</p>

<p>Digging into the guts of the <a href="https://github.com/angular/angular.js/tree/master/src">AngularJS source code</a> is a great way to learn the hows and whys of the framework, and can reveal techniques that can be applied to your own applications. The AngularJS source is well documented, cleanly written, and well tested. If you&rsquo;re working with AngularJS, I highly recommend diving into these internals and discovering this for yourself. It won&rsquo;t be time wasted.</p>

<p>You might also enjoy: <a href="http://joelhooks.com/blog/2013/05/22/lessons-learned-kicking-off-an-angularjs-project/"><strong>Lessons Learned: A Year with a Large AngularJS Project</strong></a></p>

<p>or maybe: <a href="http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend/"><strong>Learn AngularJS this Weekend</strong></a></p>
]]></content>
  </entry>
  
</feed>
