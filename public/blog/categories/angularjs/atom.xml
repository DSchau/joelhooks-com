<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angularjs, | Joel Hooks]]></title>
  <link href="http://joelhooks.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://joelhooks.com/"/>
  <updated>2016-03-20T23:13:17-05:00</updated>
  <id>http://joelhooks.com/</id>
  <author>
    <name><![CDATA[Joel Hooks]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Let's Make Full-Ass AngularJS Directives]]></title>
    <link href="http://joelhooks.com/blog/2014/02/11/lets-make-full-ass-angularjs-directives/"/>
    <updated>2014-02-11T15:45:00-06:00</updated>
    <id>http://joelhooks.com/blog/2014/02/11/lets-make-full-ass-angularjs-directives</id>
    <content type="html"><![CDATA[<p><em>With best intentions we set forth to create the mighty directive. The steepest slope of the dreaded AngularJS learning curve.</em></p>

<h3>The &ldquo;place where the jQuery goes.&rdquo;</h3>

<p>So what is a directive? We&rsquo;ve <a href="http://www.joelhooks.com/blog/2013/07/27/using-angularjs-stop-using-jquery-as-a-crutch/">talked about this before</a>, and decided that they are <strong>not</strong> where the jQuery goes&hellip; usually&hellip; if you <strong>are</strong> going to use jQuery, directives are <strong>definitely</strong> where it should go.</p>

<p>It&rsquo;s easy to say &ldquo;OMG, NO JQUERY&rdquo; &ndash; but what does that actually mean? What does a <strong>really kickass directive</strong> look like?</p>

<h3>The Anatomy of a Good Directive.</h3>

<p>The <a href="https://github.com/angular-ui/bootstrap">ui-bootstrap</a> library is the best singular resource on what a good directive should look like. They are solving multiple common problems in varied ways, with generally solid patterns and practices. It&rsquo;s a robust open-source project, with a constant flurry of activity.</p>

<p>When you start to dig through the library&rsquo;s src, you can see how many different styles and solutions have solved the various problem. Some are extremely complex, while some are relatively simple.</p>

<p>While the solutions <strong>are</strong> varied, there are also some common traits the ui-boostrap directives share across the library.</p>

<h4>Minimal use of the link function</h4>

<p>How many of your project&rsquo;s link functions contain <strong>all the things</strong>?</p>

<p><em>me: raises guilt hand sheepishly</em></p>

<p>Down and dirty, just toss it in the <code>link</code> function.</p>

<p>When you start to browse the ui-bootstrap code, pay attention to the <code>link</code> functions on the directives themselves.</p>

<h5>dropdown</h5>

<p>``` javascript
.directive(&lsquo;dropdown&rsquo;, function() {
  return {</p>

<pre><code>restrict: 'CA',
controller: 'DropdownController',
scope: {
  isOpen: '=?',
  onToggle: '&amp;'
},
link: function(scope, element, attrs, dropdownCtrl) {
  dropdownCtrl.init( element );
}
</code></pre>

<p>  };
})
```</p>

<p>The <strong>Dropdown</strong> directive has a link function, but its sole purpose in life is to associate the directive with a controller.</p>

<p><strong>This is a good thing</strong></p>

<p>Why? Well, to be honest, directives can be a real pain in the ass to unit test. How do you make a directive easy to unit test? Don&rsquo;t give it any functionality.</p>

<p>Controllers, on the other hand, are easy to unit test, so we can avoid the headache of even thinking about unit testing a directive by offloading the logical bits to a controller.</p>

<h4>The directive&rsquo;s controller</h4>

<p>What does it look like? Basically, it looks like a normal controller.</p>

<h5>DropdownController</h5>

<p>``` javascript
.controller(&lsquo;DropdownController&rsquo;, function($scope, $attrs, dropdownConfig, dropdownService, $animate) {
  var self = this, openClass = dropdownConfig.openClass;</p>

<p>  this.init = function( element ) {</p>

<pre><code>self.$element = element;
$scope.isOpen = angular.isDefined($attrs.isOpen) ? $scope.$parent.$eval($attrs.isOpen) : false;
</code></pre>

<p>  };</p>

<p>  this.toggle = function( open ) {</p>

<pre><code>return $scope.isOpen = arguments.length ? !!open : !$scope.isOpen;
</code></pre>

<p>  };</p>

<p>  // Allow other directives to watch status
  this.isOpen = function() {</p>

<pre><code>return $scope.isOpen;
</code></pre>

<p>  };</p>

<p>  $scope.$watch(&lsquo;isOpen&rsquo;, function( value ) {</p>

<pre><code>$animate[value ? 'addClass' : 'removeClass'](self.$element, openClass);

if ( value ) {
  dropdownService.open( $scope );
} else {
  dropdownService.close( $scope );
}

$scope.onToggle({ open: !!value });
</code></pre>

<p>  });</p>

<p>  $scope.$on(&lsquo;$locationChangeSuccess&rsquo;, function() {</p>

<pre><code>$scope.isOpen = false;
</code></pre>

<p>  });
})
```</p>

<p>It&rsquo;s obviously <strong>much</strong> bulkier than the actual directive, but it&rsquo;s also crystal clear what the controller is doing. Normal controller stuff!</p>

<p>One particular item of note is the <code>init</code> function. In the directive above, you probably noticed that the link function did exactly one thing:</p>

<p><code>javascript
dropdownCtrl.init( element );
</code></p>

<p>Since you can&rsquo;t get at the element in the controller, this allows us to still have access to the element, but in a clean, testable, injected way.</p>

<p>If we were going to critique the controller, it might be about its access to <code>$element</code> at all. Is the controller the right place to be doing <em>any</em> DOM manipulation, even if it is ever so slight? Where else would we do that if we aren&rsquo;t going to do it in the <code>link</code> function or the controller?</p>

<p>It needs to go someplace, and pedantic nitpicking is just a hobby.</p>

<h4>Out at the boundaries</h4>

<p>This facet of this clean gem of a directive sparkles bright:</p>

<h5>dropdownService</h5>

<p>``` javascript
.service(&lsquo;dropdownService&rsquo;, function($document) {
  var self = this, openScope = null;</p>

<p>  this.open = function( dropdownScope ) {</p>

<pre><code>if ( !openScope ) {
  $document.bind('click', closeDropdown);
  $document.bind('keydown', escapeKeyBind);
}

if ( openScope &amp;&amp; openScope !== dropdownScope ) {
    openScope.isOpen = false;
}

openScope = dropdownScope;
</code></pre>

<p>  };</p>

<p>  this.close = function( dropdownScope ) {</p>

<pre><code>if ( openScope === dropdownScope ) {
  openScope = null;
  $document.unbind('click', closeDropdown);
  $document.unbind('keydown', escapeKeyBind);
}
</code></pre>

<p>  };</p>

<p>  var closeDropdown = function() {</p>

<pre><code>openScope.$apply(function() {
  openScope.isOpen = false;
});
</code></pre>

<p>  };</p>

<p>  var escapeKeyBind = function( evt ) {</p>

<pre><code>if ( evt.which === 27 ) {
  closeDropdown();
}
</code></pre>

<p>  };
})
```</p>

<p>The AngularJS &lsquo;service&rsquo; is where the boundaries of our applications live.</p>

<ul>
<li>connections to the outside world</li>
<li>domain/data models</li>
<li>core logic</li>
<li>&hellip;</li>
<li>the DOM?</li>
</ul>


<p>This actor is wonderful. It connects <strong>all the dropdowns</strong> and manages their shared state. In this case, we can only have one open drop down on the page. <code>dropdownService</code> keeps track of who that is, and if another drop down is opened, it snaps the current one shut before allowing the next to open.</p>

<p>Additionally, the service listens for events on the <code>document</code> to close the open drop down if the user clicks the page or hits the <code>esc</code> key.</p>

<p>One central place to encapsulate what would otherwise be confusing spaghetti logic on line 342 of a typical directive&rsquo;s <code>link</code> function.</p>

<h3>Pause and study</h3>

<p>It really pays to take pause and review a little code when you sit down to write a complex directive. For one, ui-bootstrap covers a lot of ground. The entire point of Bootstrap (proper) is to provide a robust set of <em>typical</em> components. Meaning, odds are the component you are building (at least the soul of it) is likely covered by the Boostrap component set.</p>

<p>ui-bootstrap conveniently provides this world class reference implementation of the most common web application components&hellip; the Angular Wayâ„¢.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Built an AngularJS Training Site on Rails]]></title>
    <link href="http://joelhooks.com/blog/2013/09/15/why-i-built-an-angularjs-training-site-on-rails/"/>
    <updated>2013-09-15T11:24:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/09/15/why-i-built-an-angularjs-training-site-on-rails</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re into AngularJS at all, you are probably familiar with the kickass <a href="http://egghead.io/">AngularJS video training</a> from egghead.io. If you haven&rsquo;t seen egghead.io, it is a collection of 50+ short &ldquo;bite-sized&rdquo; training videos, largely focused on the AngularJS framework. <div style="float: right; padding:5px;"><a class="nofancybox" href="http://egghead.io"><div style=" height: 191px; width: 150px; background-image: url(/images/egghead_logo.png);"></div></a></div>The videos are created by (and feature) my friend <a href="https://twitter.com/johnlindquist">John Lindquist</a> playing Webstorm like a violin while explaining basic AngularJS concepts.</p>

<p>Over the last few months John and I have been discussing egghead.io, and what its future holds. Is it an AngularJS training site? Is John going to be the only presenter? Is the donation model the best approach for keeping the lights on?</p>

<h2>The Problem</h2>

<p>egghead.io was a static site, built on AngularJS. It was using the YouTube API to grab a list of videos from a playlist, and list them out in a simple list. It had a permanent &ldquo;in progress, fixing stuff&rdquo; message in the top left, and a request (plea?) for donations in the top right. When you would click on of the videos, it would display the embedded video in the page.</p>

<p><img src="/images/egghead_before.jpg" alt="egghead.io on AngularJS" /></p>

<p>Frankly, this was adequate for John&rsquo;s needs. He just wants to create content and teach people. He didn&rsquo;t want to think about:</p>

<ul>
<li>SEO</li>
<li>Content pipelines</li>
<li>Information architecture</li>
<li>Server maintenance</li>
<li>Marketing</li>
</ul>


<p>Set it and forget it.</p>

<p>As it happens, I&rsquo;m really interested in all of those topics.</p>

<h2>The Solution Part 1: <strong>Ruby on Rails</strong></h2>

<p>I was asked, &ldquo;Why would you build an AngularJS training site with Ruby on Rails?!&rdquo;</p>

<p>This was the first time I&rsquo;ve used Rails, outside of tutorial type projects. It has been floating at the top of my &ldquo;to learn&rdquo; list for several years. Aside from basic nerd compulsion to explore cool technology, it became rapidly apparent that this was the <em>right tool for the job</em>.</p>

<p>One of the drawbacks of a single page app, built with AngularJS or another similar framework, is that SEO become extremely tricky. There are approaches for overcoming this, but it is beyond trivial. egghead.io is a web <strong>page</strong> with the purpose of delivering content. Web pages need to searchable, so people hunting Google will actually be able to find them. Egghead had a bit of search traffic. It actually does fairly well (2nd page) in a search for &ldquo;AngularJS&rdquo;. What wasn&rsquo;t getting search hits was the video lessons themselves.</p>

<p><img src="/images/egghead_after.jpg" alt="egghead.io gets a facelift" /></p>

<p>By rendering the pages on the server, and delivering them to the browser, Google can now crawl the pages and actually show the pages to searchers interested in the content. It didn&rsquo;t take long to see a bump in organic search traffic.</p>

<p><img src="http://cl.ly/image/2e2p422t2f2R/Screen%20Shot%202013-09-15%20at%2012.29.01%20PM.png" alt="A nice spike in search traffic for egghead.io" /></p>

<p>I was also able to get authentication squared away with Devise and CanCan. It was a bit tricky, since I chose Rails 4 and Bootstrap 3. Many of the gems required using git branches, but after some trial and error it all dialed in very nicely.</p>

<p>Rails wasn&rsquo;t the only choice for this. I also considered Django and a Node stack, but ultimately the &ldquo;convention over configuration&rdquo; nature of Rails won my heart. It is <strong>so freaking easy</strong> and pleasant to work with. After a month, it has earned a well-deserved slot in my web development toolbelt.</p>

<h2>The Solution Part 2: <strong>Heroku</strong></h2>

<p>You want to talk about <strong>freaking easy</strong>? Heroku. Frictionless. Magic. Amazing. Awesome. Kickass. Incredible. ZOMG WOW.</p>

<p>If it isn&rsquo;t obvious, I really love Heroku.</p>

<p>Even with a fair bit of traffic, I&rsquo;m able to comfortably get away with the free plan. Through the use of strategic caching and CloudFront to serve static content, the server itself doesn&rsquo;t have to do much heavy lifting.</p>

<p><code>git push heroku master</code></p>

<p>{% emoji emoji1f493 %}</p>

<p>I&rsquo;m not scared of managing my own VPS, but there is enough work to do without getting into SYSOP tasks. Heroku ftw.</p>

<h2>The Solution Part 3: <strong>Wistia</strong></h2>

<p>TIL: <strong>video seo</strong> is a thing.</p>

<p>You ever notice your search results that show a preview thumbnail of a video with the little &ldquo;play&rdquo; icon? Usually these are for YouTube results. This is because, and is no shocker, Google is <em>really good at video SEO</em>. For YouTube. Try as you might, if you are hosting your videos on YouTube, you will <strong>never</strong> see these &ldquo;rich snippets&rdquo; on your own pages where you embed the videos.</p>

<p>Video SEO is black magic voodoo. It involves creating a specific sitemap XML that correlates media to a URL. It looks something like this:</p>

<p>``` xml
<url>
  <loc><a href="http://egghead.io/lessons/bower-introduction-and-setup">http://egghead.io/lessons/bower-introduction-and-setup</a></loc>
  &lt;video:video></p>

<pre><code>&lt;video:content_loc&gt;http://embed.wistia.com/deliveries/4f239fa48f86dd8854a707fa6384de5aa3c54db7/file.mp4&lt;/video:content_loc&gt;
&lt;video:thumbnail_loc&gt;http://embed.wistia.com/deliveries/3df06507df5589c130ceb906a59d8f04f9a5f034/file.png&lt;/video:thumbnail_loc&gt;
&lt;video:title&gt;Bower - Introduction to Bower&lt;/video:title&gt;
&lt;video:description&gt;Bower is a package manager for Javascript libraries that allows you to define, version, and retrieve your dependencies. In this tutorial, John gives a quick introduction to Bower and will show you how to get started.&lt;/video:description&gt;
&lt;video:publication_date&gt;2013-09-05T14:27:26+00:00&lt;/video:publication_date&gt;
&lt;video:family_friendly&gt;yes&lt;/video:family_friendly&gt;
&lt;video:duration&gt;168&lt;/video:duration&gt;
&lt;video:tag&gt;bower tutorial&lt;/video:tag&gt;
&lt;video:tag&gt;bower setup&lt;/video:tag&gt;
&lt;video:tag&gt;bower angularjs&lt;/video:tag&gt;
&lt;video:tag&gt;bower screencast&lt;/video:tag&gt;
</code></pre>

<p>  &lt;/video:video>
</url>
```</p>

<p>You <strong>can</strong> associate your YouTube videos with a video sitemap, but it is fruitless. Given the same video, Google will <strong>always</strong> favor YouTube.</p>

<p>That&rsquo;s where <a href="http://wistia.com/">Wistia</a> comes in.</p>

<p>Wistia offers &ldquo;Professional video hosting built specifically for business.&rdquo; They host and stream videos, give awesome analytics, embedding, and (perhaps most importantly) <strong>easy to use video SEO tools</strong>.</p>

<p>Videos on the egghead.io domain are embedded via Wistia, and not YouTube. John is still posting to YouTube, but on the site we are able to take advantage of Wistia and take back some of the &ldquo;Google juice&rdquo; that would otherwise be delivered solely to YouTube.</p>

<p><img src="http://cl.ly/image/0X2C2443413h/Screen%20Shot%202013-09-11%20at%208.05.26%20AM.png" alt="rich snippets for the egghead.io domain" /></p>

<p>I&rsquo;ll admit to being overly excited when I saw the first &ldquo;rich snippet&rdquo; attached to an egghead.io domain. Maybe I&rsquo;m a nerd?</p>

<h2>The Solution Part 4: <strong>General SEO</strong></h2>

<p>Wistia has the video SEO covered, but an interesting aspect of video is that while you can tell Google the video exists, their robots aren&rsquo;t smart enough (yet) to analyze the video for keywords. To get over this hurdle, you can use transcripts of the video and provide the spiders the words they crave.</p>

<p>For this we used <a href="https://castingwords.com/">CastingWords</a>. I was amazed, despite the videos technical nature, the transcripts we got back were very accurate.</p>

<p>Transcripts are a win/win/win. Lots of people would rather just read a block of text for speed. There are people that can&rsquo;t hear at all, so audio content is useless to them. Search spiders love text.</p>

<p>Along with the transcripts we&rsquo;ve been going through the backlog of videos adding summary descriptions to each. It is a chore, but it is worth the effort.</p>

<h2>The Solution Part 5: <strong>Open Source isn&rsquo;t Charity</strong></h2>

<p>The donation model in open-source software is flawed. It is not charity. It takes a lot of <strong>work</strong> to build high quality open source software. It takes a lot of <strong>work</strong> to write documentation and provide training.</p>

<p><img src="/images/programmer.jpg" alt="Ain't too proud to beg." /></p>

<p>We can do better than asking for hand-outs.</p>

<p>While lots of generous visitors (~500) have donated to egghead.io over the last year, we decided to take a different approach. Instead of simply asking for a donation, what if we <a href="http://egghead.io/first-50-video-download-offline-bundle">bundled up the first 50 AngularJS videos and offered an &ldquo;offline HD bundle&rdquo;</a> of all the videos instead? This way we aren&rsquo;t accepting charity, and giving supporters something tangible for their hard-earned $$.</p>

<p>This approach has some limitations. All of the videos are streaming for free a back click away, but having the full resolution copies on your hard drive is something people want. It also gives a people a way to &ldquo;donate&rdquo; and get a receipt that can be expensed or deducted as a training cost.</p>

<p>It&rsquo;s been a huge success. The lights will be on at egghead.io for quite some time. We will be able to expand the site, and explore a wider range of high quality content.</p>

<h2>Conclusion and Next Steps</h2>

<p>I love AngularJS. It is an amazing tool. It isn&rsquo;t always the right tool for the job. If you are building web applications it might be a perfect fit. If you are building web <strong>pages</strong> the &ldquo;single page application&rdquo; approach has some severe flaws. Ruby on Rails solves these nicely.</p>

<p>Video provides many distinct challenges from a delivery and SEO perspective. YouTube makes it incredibly easy to share your content online, but the &ldquo;cost of free&rdquo; is that Google will leverage your content to take your audience away from your site and into their ecosystem. They give YouTube search priority, and squeeze your content for every drop of juice they can. By moving to a commercial hosting service like Wistia, you can regain a lot of control over the hard work you&rsquo;ve put into your content.</p>

<p>We aren&rsquo;t running a charity, and asking for donations is a habit I&rsquo;d like to see broken in OSS. There are clearly better ways to be compensated for our efforts, and I know that I <strong>love</strong> supporting OSS. It makes my day to send a content producer $$ for a high-quality book, workshop, or other training. I get smarter, they get paid. Everybody wins.</p>

<p><img src="/images/egghead_before_after.jpg" alt="the before and after of egghead.io" /></p>

<p>Working on the relaunch of egghead.io has been a lot of fun. It has allowed me to put to use a lot of the things I&rsquo;ve been learning over the last year in regards to SEO, conversion rate optimization, and generally building a modern web page. It is <strong>extremely awesome</strong> to have a project that I care deeply about, and can work on lovingly in my free time. I love my enterprise clients, but having a little techno proto-baby to feed and care for fills my heart with joy. Again, I might be a nerd ;)</p>

<p>Now I&rsquo;m looking forward to publishing my first screencast to the site! It should be soon, so be on the lookout :></p>

<p>P.S. If you&rsquo;re looking to build an AngularJS site <strong>on</strong> Rails, I highly recommend <a href="http://www.fullstack.io/edu/angular/rails/">this book</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Dependency Injection in AngularJS]]></title>
    <link href="http://joelhooks.com/blog/2013/08/18/configuring-dependency-injection-in-angularjs/"/>
    <updated>2013-08-18T12:45:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/08/18/configuring-dependency-injection-in-angularjs</id>
    <content type="html"><![CDATA[<p>Dependency injection is the act of supplying values or object instances (dependencies) to target objects
from outside of the target object. In many (most?) cases this is automated
by a framework, such as AngularJS.</p>

<p>This means that a given target object does <strong>not</strong> create its own dependencies,
through the use of the <code>new</code> keyword or other creation methods.</p>

<p>By creating and managing dependencies
outside of an object, it makes it much easier to switch out that dependency as
needed. This is very useful when you are writing your unit tests, and can have
many advantages in larger systems.</p>

<p>There are only three ways for an object to resolve its dependencies:</p>

<ul>
<li>internally, via the <code>new</code> operator</li>
<li>lookup via a global variable (requirejs is an example)</li>
<li>the dependency is passed to the object</li>
</ul>


<p>The third option is <em>dependency injection</em>, and it is the preferred approach in
AngularJS apps.</p>

<h2>Defining your dependencies</h2>

<p>Dependency injection is a core feature of AngularJS. There are 3 approaches to
defining your dependencies, ordered by complexity from least to most:</p>

<ul>
<li>module.service</li>
<li>module.factory</li>
<li>module.provider</li>
</ul>


<p><strong>note:</strong> <em>AngularJS also provides <code>value</code> and <code>constant</code> dependencies. We aren&rsquo;t
going to get into those two today.</em></p>

<p>Both <code>service</code> and <code>factory</code> are abstractions that sit on top of <code>provider</code>.
Using <code>factory</code> and <code>provider</code> will give you more flexibility, but are more
verbose.</p>

<p>Before we look at how to use these tools, let&rsquo;s take a look at the AngularJS
source code and understand how they work.</p>

<h3>Interlude into the AngularJS internals</h3>

<p>If you&rsquo;re a geek like me, you might be curious as to what is going on under the hood
when you declare dependencies.</p>

<p>I mentioned earlier that <code>service</code> and <code>factory</code> were abstractions on top of <code>provider</code>.
To show you exactly how that works, we need to open up <code>injector.js</code> in <code>src/auto/</code>
folder in the AngularJS source code:</p>

<p>``` javascript
  function provider(name, provider_) {</p>

<pre><code>if (isFunction(provider_) || isArray(provider_)) {
  provider_ = providerInjector.instantiate(provider_);
}
if (!provider_.$get) {
  throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
}
return providerCache[name + providerSuffix] = provider_;
</code></pre>

<p>  }</p>

<p>  function factory(name, factoryFn) { return provider(name, { $get: factoryFn }); }</p>

<p>  function service(name, constructor) {</p>

<pre><code>return factory(name, ['$injector', function($injector) {
  return $injector.instantiate(constructor);
}]);
</code></pre>

<p>  }
```</p>

<p>As you can see at a glance, <code>service</code> calls <code>factory</code> which calls <code>provider</code>. So, when it
gets right down to it, these three methods are the exact same thing. Convenient!</p>

<p>Almost the exact same thing.</p>

<p>There is a subtle difference. The AngularJS <code>service</code> uses
<code>$injector.instantiate</code> on the constructor function that you pass in. This means
that internally the <code>service</code> creates an instance of your function with the
<code>new</code> operator. This will provide the resulting object a valid &lsquo;this&rsquo; scope.</p>

<p>Using <strong><code>factory</code> doesn&rsquo;t call <code>new</code> on the function that is passed in</strong>.
When using <code>factory</code>, the function that is passed in is called directly, and an
object is expteded to be returned.</p>

<p>Hat tip to
<a href="http://twitter.com/ThomasBurleson">@ThomasBurleson</a> for pointing this
out. This can be confusing if encountered in the wild. Now you know.
Half the battle.</p>

<p>Let&rsquo;s start with the simplest use case. The <code>service</code>.</p>

<h3>Defining a service in AngularJS</h3>

<p>A service instantiates a constructor function.</p>

<p>``` javascript
(function(angular) {</p>

<pre><code>var module = angular.module("myApp.myModel", []);

var MyModel = function MyModel(asyncService) {
    return {
        someApi: function() {
            return asyncService.getStuff(); 
        }
    };
}

module.service('myModel', ['asyncService', MyModel]); //simple option
</code></pre>

<p>}(angular))
```</p>

<p>In this example we are creating a module that will store a model that grabs data from some asynchronous
service. The <code>myModel</code> service will return an instance of <code>MyModel</code> when it is requested
for injection by other objects. The instance of <code>MyModel</code> is a singleton, and only one instance will
ever be created and used by the application.</p>

<p>This example could actually be even simpler if the injectable doesn&rsquo;t require any additional
dependencies.</p>

<p><code>javascript
module.service('myModel',  MyModel); //most simple option
</code></p>

<p><code>module.service</code> requires only two arguments. A string for its unique name, and a constructor
to create an instance of. This approach is useful, and most of the time is probably all you need
for your application.</p>

<p>When you need more flexibility than the <code>service</code> provides, it is time to look at <code>factory</code>.</p>

<h3>Defining a factory in AngularJS</h3>

<p>A factory returns an object.</p>

<p>``` javascript
(function(angular) {</p>

<pre><code>var module = angular.module("myApp.myModel", []);

var MyModel = function MyModel(asyncService) {
    return {
        someApi: function() {
            return asyncService.getStuff(); //promise?
        }
    }
}

module.factory('myModel', ['asyncService', function (asyncService) {
    //could do some stuff here
    return new MyModel(asyncService); 
}]);
</code></pre>

<p>}(angular))
```</p>

<p>Using a <code>factory</code> provides additional flexibility. By providing a factory function
over a straight constructor, you are provided with the opportunity to do some work
prior to returning the object. You are also in charge of creating the
instance that you want returned, unlike <code>service</code>, which creates the
instance for the constructor function you provide.</p>

<p>The above example is obviously not
doing anything interesting, but when you need to do some work prior to resolving a
dependency, a factory can be a good choice.</p>

<p>In the real world, I&rsquo;ve used <code>factory</code> to provide a configurable mock data &ldquo;mode&rdquo;. The
factory function would check to see which mode the app was in, and dynamically switch
between mock and real data. This can be incredibly handy when you want to work with out
depending on external services.</p>

<p>Note that the factory function will be called exactly <strong>one time</strong>. Any work you do
will only be done once, and <code>myModel</code> will be whatever your factory function returns.
In this case, we are simply returning an instance of <code>MyModel</code>, but a factory can return
objects <em>and</em> functions. Use that to your advantage.</p>

<p>The last way to define dependencies is with <code>provider</code>. Let&rsquo;s look at that next.</p>

<h3>Defining a provider with AngularJS</h3>

<p>``` javascript
(function(angular) {</p>

<pre><code>var module = angular.module("myApp.myModel", []);

var MyModel = function MyModel() {
    return {
        asyncService: null,
        someApi: function {
            return this.asyncService.getStuff(); //promise?
        }
    }

}

var myModelProvider = {
    model: new MyModel();
    $get: ['asyncService', function (asyncService) {
        this.model.asyncService = asyncService; //"manual" dependency injection
        return this.model; //resolved for the lifetime of app
    }]
};

modules.provider('myModel', myModelProvider);
</code></pre>

<p>}(angular))
```</p>

<p>As you can see, <code>provider</code> is lower level. Explicit and verbose. The <code>$get</code> function
is used by AngularJS internally for the injector. A provider is <strong>required</strong> to have a <code>$get</code>
function. When using <code>factory</code> (and <code>service</code> as well) the <code>$get</code> function is defined for
you.</p>

<p>For all practical purposes you will likely never need to use <code>provider</code> unless you are a
control freak. In most circumstances a <code>factory</code> or <code>service</code> will suffice, but it is nice
to know that <code>provider</code> is there, if you needed that level of explicit control for some reason.</p>

<p>One thing to note about providers is that the provider is <em>available during <strong>configuration phase</strong> of a module</em>. While I haven&rsquo;t found a specific use case for this, it is something to have in your toolbox.</p>

<h3>A little trick for dynamic dependencies</h3>

<p>I mentioned before that with a <code>factory</code> (or <code>provider</code>) you can return an object or a function.
As it turns out, this can be very useful if you need to dynamically update a resolved dependency.
Here&rsquo;s a simple example using a factory.</p>

<p>``` javascript
module.factory(&lsquo;myDynamicInjectable&rsquo;, function () {</p>

<pre><code>    var count = 0;
    return function() {
        count = count +1;
        return count;
    }
});
</code></pre>

<p>```</p>

<p>This is an extremely trivial example, but now when you inject <code>myDynamicInjectable</code> and call it,
it will return the freshly incremented <code>count</code>.</p>

<p><strong>warning:</strong> <em>don&rsquo;t do this. There are two things wrong with this example. It is storing state
with the count variable, and then it is manipulating state. This isn&rsquo;t the appropriate location
for either of those activities! A better solution would be to create an object that stored
that state and provided a nice API for manipulating it.</em></p>

<p>A more realistic (useful) use of this might look like this:</p>

<p>``` javascript
module.factory(&lsquo;getCurrentShoppingCart&rsquo;, [&lsquo;getCurrentAccount&rsquo;, function(getCurrentAccount) {</p>

<pre><code>return function() {
    //getCurrentAccount is also a factory that returns a function
    //perhaps a user can have multiple accounts?
    return getCurrentAccount().shoppingCart;
}
</code></pre>

<p>}]);
```</p>

<p>There is a ton of dynamic flexibility you can take advantage of when returning functions from
both the <code>provider</code> and <code>factory</code> approaches. I&rsquo;d proceed with caution. You could easily abuse this
flexibility. Don&rsquo;t use this approach to manipulate and/or store state in the providers! The
job of these tools is to <strong>resolve dependencies</strong>, and should be used only to <strong>resolve dependencies</strong>.</p>

<h2>Conclusion</h2>

<p>AngularJS provides several ways to configure dependency injection. From the simple <code>service</code> to the more flexible
<code>factory</code> and <code>provider</code> approaches. You should have a solid understanding of how these work
under the hood, and what situations are appropriate for each method.</p>

<p>P.S. This article is the expansion of the answer to a question that was emailed to me.
If you have any questions, I&rsquo;d love to help you out. My email and twitter can be found below, and I
answer them all.</p>

<p><strong>Related:</strong></p>

<ul>
<li><a href="/blog/2013/05/01/when-is-a-singleton-not-a-singleton/">AngularJS, Dependency Injection, and When Is a Singleton Not a Singleton?</a></li>
<li><a href="/blog/2013/04/24/modeling-data-and-state-in-your-angularjs-application/">Modeling Data and State in Your AngularJS Application</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using AngularJS? Stop using jQuery as a crutch.]]></title>
    <link href="http://joelhooks.com/blog/2013/07/27/using-angularjs-stop-using-jquery-as-a-crutch/"/>
    <updated>2013-07-27T11:30:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/07/27/using-angularjs-stop-using-jquery-as-a-crutch</id>
    <content type="html"><![CDATA[<p>Have you ever heard (or said!) this:</p>

<p>&ldquo;Directives? That&rsquo;s where the jQuery goes.&rdquo;</p>

<p>I definitely have.</p>

<p>In an effort to better understand
<a href="https://twitter.com/joshdmiller">@joshdmiller</a>&rsquo;s excellent
<a href="https://github.com/joshdmiller/ng-boilerplate">ng-boilerplate</a>, I
wanted to understand its dependency on Boostrap. More specifically, I wanted to
see if I could swap out Twitter Bootstrap for Zurb Foundation. Bootstrap is
great, but I really love using SCSS.</p>

<h2>Down the rabit hole&hellip;</h2>

<p>Up until this point, I&rsquo;ve completely ignored
<a href="https://github.com/angular-ui/bootstrap">angular-ui-bootstrap</a>, which is a wrapper for
Twitter Bootstrap that you can use with AngularJS. It hasn&rsquo;t been on my radar,
simply because I prefer Foundation. That was a mistake. This wonderful little
library is amazing. On many levels, it expresses the power and flexibility of
AngularJS like nothing else I have seen.</p>

<p>From the <a href="https://github.com/angular-ui/bootstrap#native-lightweight-directives">angular-ui-bootstrap
README</a>:</p>

<blockquote><p>We are aiming at providing a set of AngularJS directives based on Twitter
Bootstrap&rsquo;s markup and CSS. The goal is to provide native AngularJS directives
without any dependency on jQuery or Bootstrap&rsquo;s JavaScript. It is often better
to rewrite an existing JavaScript code and create a new, pure AngularJS
directive. Most of the time the resulting directive is smaller as compared to
the orginal JavaScript code size and better integrated into the AngularJS
ecosystem.</p></blockquote>

<p>This struck me.</p>

<p>The only dependency that ui-bootstrap has on Twitter Bootstrap is the CSS style
sheets. All of the widgets work because they have been implemented with
AngularJS directives.</p>

<p>I was reading through some posts on the Google groups in my earlier quest to
find out how to integrate Foundation into ng-boilerplate (I&rsquo;m stubborn!) and was
very interested in what Josh had to say:</p>

<blockquote>You can wire up some callbacks and $apply calls to make a jQuery
plugin work but as Pawel said, rewriting something in AngularJS often takes less
work. jQuery doesn't have any of the binding or scope magic. When we cut out all
of the jQuery code that makes up for that, we're often left with very little
code. And when we put those few lines of code in an AngularJS directive,
everything will work out of the box. So in balancing levels of effort, rewriting
makes sense more often than it doesn't.<cite><br>- <a
href="https://groups.google.com/d/msg/angular/Htkzt7Fsaog/TeFm5l4snTwJ">Josh
David Miller</a></cite></blockquote>


<p><strong>Mind blown.</strong></p>

<p>In the post quoted above Josh also links to his <a href="http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-emberjsor-other-client-mvc-framework-if-i-have-a/15012542#15012542">excellent Stack
Overflow</a>
post that expands on this viewpoint. You may have seen this already, but if you
haven&rsquo;t, go take 10 minutes to read through it.</p>

<blockquote><p>Don&rsquo;t even use jQuery. Don&rsquo;t even include it. It will hold you back. And when
you come to a problem that you think you know how to solve in jQuery already,
before you reach for the $, try to think about how to do it within the confines
the AngularJS. If you don&rsquo;t know, ask! 19 times out of 20, the best way to do
it doesn&rsquo;t need jQuery and to try to solve it with jQuery results in more work
for you.</p></blockquote>

<p>Bold words.</p>

<p>I&rsquo;m convinced.</p>

<p><strong>jQuery is a crutch if you are writing AngularJS applications.</strong></p>

<p>If you&rsquo;re starting an AngularJS app, take a good look at
ng-boilerplate. Then take a look at <a href="https://github.com/angular-ui/bootstrap/tree/master/src">ui-bootstrap&rsquo;s directives</a>. They are a living
example of how you can do &ldquo;jQuery things&rdquo; with a fraction of the code, and build
an app that is easier to maintain, way more testable, and generally nicer to
work with.</p>

<p>P.S. If you were wondering, it is theoretically possible to simply use the
Foundation CSS with ui-bootstrap. There is some work being done in that regard,
and I&rsquo;m looking forward to pitching in on it. I don&rsquo;t know that it will ever get
to &ldquo;drop in replacement&rdquo; status, but from the discussions I&rsquo;ve read the future
looks promising on this front.</p>

<p>P.P.S This isn&rsquo;t a critique of jQuery. I think jQuery is awesome and has moved
the web forward considerably. Even within Angular, they use what is called
&ldquo;jqLite&rdquo; to give the core essentials of jQuery&rsquo;s functionality. In that sense,
just using Angular in the Angular way uses jQuery, but a minimal subset of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The basics of using ui-router with AngularJS]]></title>
    <link href="http://joelhooks.com/blog/2013/07/22/the-basics-of-using-ui-router-with-angularjs/"/>
    <updated>2013-07-22T10:55:00-05:00</updated>
    <id>http://joelhooks.com/blog/2013/07/22/the-basics-of-using-ui-router-with-angularjs</id>
    <content type="html"><![CDATA[<p>URL routing is a popular approach to matching the contents of a URL to specific
functionality within a web application. URL routes programatically present
specific content to users based on the URL that they are visiting. It is a
popular approach that has proven to be very effective.</p>

<p>Something that might not be obvious is that URL routing is also a <a href="https://en.wikipedia.org/wiki/Finite-state_machine">finite state
machine</a>. When you configure
the routing for an app, you are laying out the various states the application
can be in, and informing the application what to display and do when a specific
route is encountered.</p>

<p>AngularJS supplies <a href="http://docs.angularjs.org/tutorial/step_07">URL routing</a> by default.
It is adequate, but also has some limitations.</p>

<p><img src="/images/app-layout.png" alt="A resonable application structure" /></p>

<h2>So what&rsquo;s the problem?</h2>

<p>Looking at the structure above, imagine an application where interacting with
items on the header or the sidebar causes the main content to load completely
different HTML. AngularJS provides a mechanism for this with <code>ng-switch</code>. You
can see a (very simple) example of this below.</p>

<iframe width="100%" height="300"
  src="http://jsfiddle.net/joelhooks/Swm48/4/embedded/result,js,html"
  allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>In this case, <code>ng-switch</code> is swapping out <code>div</code> elements, but you can also use
this approach to swap out templates using <code>ng-include</code>.</p>

<p>I&rsquo;m not going to explore this option. I&rsquo;m not particularly fond of it.</p>

<p><strong>Why not?</strong></p>

<ul>
<li>The <code>ng-switch</code> adds markup that could be confusing</li>
<li>The state of the main content area is captured and stored on a model</li>
<li>It feels like &ldquo;logic in markup&rdquo;, which I try to avoid</li>
<li>If you go down the <code>ng-include</code> road, you need to remember to always put
single quotes around your template names. I always forget. ;&lt;</li>
</ul>


<h2>ui-router</h2>

<p><a href="https://github.com/angular-ui/ui-router">ui-router</a> fully embraces the
state-machine nature of a routing system. It allows you to define states, and
transition your application to those states. The real win is that it allows you
to decouple nested states, and do some very complicated layouts in an elegant
way.</p>

<p>You need to think about your routing a bit differently, but once you get your
head around the state-based approach, I think you will like it.</p>

<iframe width="100%" height="300"
  src="http://jsfiddle.net/SvUjA/1/embedded/result,js,html"
  allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>This example is functionally very similar to the <code>ng-switch</code> approach. The main
difference is that the main content area is populated with templated HTML for
each of the states, without using switching or <code>ng-include</code>.</p>

<p>``` javascript
angular.module(&lsquo;app&rsquo;, [&lsquo;ui.compat&rsquo;])</p>

<pre><code>.config(['$stateProvider', function ($stateProvider) {
    var home = {
            name: 'home',
            url: '/',
            templateUrl: 'content.html'
        },
        red = {
            name: 'red',
            url: '/red',
            parent: home,
            templateUrl: 'content.red.html'
        },
        blue = {
            name: 'blue',
            url: '/blue',
            parent: home,
            templateUrl: 'content.blue.html'
        },
        green = {
            name: 'green',
            url: '/green',
            parent: home,
            templateUrl: 'content.green.html'
        };

    $stateProvider.state(home);
    $stateProvider.state(red);
    $stateProvider.state(green);
    $stateProvider.state(blue);
}])
</code></pre>

<p>```</p>

<p>The above code is the configuration for the router. We are defining the <code>module</code>, but instead
of injecting <code>$routeProvider</code> as we would with stock AngularJS, we are injecting
a <code>$stateProvider</code> that is used to define the states. We are defining 4 states.</p>

<ul>
<li><code>home</code> is the parent state of the next 3. It defines the header, siderbar, and
the <code>ui-view</code> element that will be populated with the child states.</li>
<li><code>red</code> is the first child state. It references the <code>home</code> as its parent, as
well as targeting its own template.</li>
<li><code>blue</code> and <code>green</code> are identical to <code>red</code>, but use different templates.</li>
</ul>


<p>After the states are defined, they are added to the <code>$stateProvider</code>. They are
now ready to be navigated to.</p>

<p>``` javascript</p>

<pre><code>.run(['$state', function ($state) {
   $state.transitionTo('home'); 
}])
</code></pre>

<p>```</p>

<p>the <code>run</code> method is a great place to navigate to your intial state. You are able to
inject the now-resolved <code>$state</code> object and use its <code>transitionTo</code> method to set <code>home</code>
as the current state.</p>

<p>``` javascript</p>

<pre><code>.controller('SidebarCtrl', function ($scope, $state) {

$scope.content = ['red', 'green', 'blue'];

$scope.setPage = function (page) {
    $state.transitionTo(page);
};
</code></pre>

<p>```</p>

<p>The <code>SidebarCtrl</code> lists contains a simple array called content on its <code>$scope</code> which
is used in a <code>ng-repeat</code> to give us a simple menu. When one of those items is clicked
the <code>setPage</code> function is called with the item that was clicked. In this case, the
content items correspond to the names of the states that we&rsquo;ve defined, so we simply
<code>transitionTo</code> the selected state to display the content of that state.</p>

<h2>Next steps with ui-router</h2>

<p>This only really scratches the very surface of what you can pull off with
ui-router. There are a ton of options and the
<a href="https://github.com/angular-ui/ui-router/wiki">wiki</a> is well put together. Some
things I didn&rsquo;t explore, but that are available:</p>

<ul>
<li>Passing data between states</li>
<li>Listening for state events</li>
<li>Named views (love this, it deserves its own post)</li>
<li>URL Routing</li>
</ul>


<p><strong>The ui-router README warns that the utility is still in active early
development</strong>. The API is still subject to change, so if you choose ui-router for
your next project, that is something to be aware of.</p>

<p>Let me know if you&rsquo;d like me to explore ui-router a bit deeper in future posts.
I think it is an excellent approach to routing, and look forward to using it
more.</p>

<p><strong>Update:</strong> I&rsquo;ve recorded a <a href="http://egghead.io/lessons/angularjs-introduction-ui-router">screencast about ui-router</a> for egghead.io.</p>

<p><strong>Update 2:</strong> Here&rsquo;s a <a href="https://egghead.io/lessons/angularjs-ui-router-named-views">screencast about ui-router&rsquo;s named views</a> that I recorded for egghead.io. (note: it is paid/subscription content)</p>
]]></content>
  </entry>
  
</feed>
