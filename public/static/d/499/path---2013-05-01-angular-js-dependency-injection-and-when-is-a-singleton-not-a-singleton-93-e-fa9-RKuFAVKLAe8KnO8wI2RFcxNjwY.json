{"data":{"site":{"siteMetadata":{"title":"The blog of Joel Hooks","description":"This is where I post my things.","author":"Joel Hooks","keywords":["Video Blogger"]}},"mdx":{"frontmatter":{"title":"AngularJS, Dependency Injection, and when is a singleton not a Singleton?","date":"Invalid date","banner":null,"slug":null,"categories":null,"keywords":null},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The Singleton is the Highlander of design patterns. `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `There can be only one`), `.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `An example of a Singleton implementation might look something like this:`), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"javascript\"\n  }, React.createElement(\"pre\", {\n    className: \"language-javascript\"\n  }, React.createElement(\"code\", {\n    className: \"language-javascript\"\n  }, React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"function\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"global\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"  \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'use strict'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"  \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"var\"), \" \", React.createElement(\"span\", {\n    className: \"token function-variable function\"\n  }, \"MySingletonClass\"), \" \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"function\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"    \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"if\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"MySingletonClass\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), \"prototype\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), \"_singletonInstance\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"      \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"return\"), \" MySingletonClass\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), \"prototype\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), \"_singletonInstance\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"    \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), \"\\n\", \"    \", \"MySingletonClass\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), \"prototype\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), \"_singletonInstance \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"this\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"\\n\", \"    \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"this\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function-variable function\"\n  }, \"Foo\"), \" \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"function\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"      \", React.createElement(\"span\", {\n    className: \"token comment\"\n  }, \"// ...\"), \"\\n\", \"    \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"  \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"\\n\", \"  \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"var\"), \" a \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"new\"), \" \", React.createElement(\"span\", {\n    className: \"token class-name\"\n  }, \"MySingletonClass\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"  \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"var\"), \" b \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"new\"), \" \", React.createElement(\"span\", {\n    className: \"token class-name\"\n  }, \"MySingletonClass\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"  \", \"global\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), \"result \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" a \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"===\"), \" b\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"window\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://stackoverflow.com/a/6733919/87002\"\n    }\n  }, `from Tom Roggero`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The above JavaScript is from an `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://stackoverflow.com/questions/1635800/javascript-best-singleton-pattern\"\n    }\n  }, `answer`), `\nfrom StackOverflow that seemed resonable. I've never actually needed an enforced Singleton in JavaScript.\nI suspect I never will, but... know thy enemy!`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Singletons have some use cases, but it is generally considered poor form to use\nthem. They are especially bothersome when you start trying to unit test your\ncode. They effectively create global state, and shared state is a real pain to\nmanage when you are writing unit tests.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `It `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `is`), ` extremely handy to only have one instance of a thing within a certain\ncontext, so how do we gain the benefit of a Singleton, without the pain?`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Dependency Injection (DI)`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://en.wikipedia.org/wiki/Dependency_injection\"\n    }\n  }, `Dependency injection`), ` is a lovely thing. It can be accomplished in several ways, from simply\npassing arguments into a constructor, to full blown DI containers like\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://code.google.com/p/google-guice/\"\n    }\n  }, `Guice`), `,\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/tschneidereit/SwiftSuspenders\"\n    }\n  }, `SwiftSuspenders`), `, and\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://angularjs.org/\"\n    }\n  }, `AngularJS`), `. I'm not going to go to deep in this post, but `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://joelhooks.com/2009/07/12/inversion-of-control-and-dependency-injection-in-flex-using-the-parsley-application-framework-part-1/\"\n    }\n  }, `here is one from\nthe archives`), ` that is still relevant (if you don't mind a little AS3). `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://misko.hevery.com/2008/11/11/clean-code-talks-dependency-injection/\"\n    }\n  }, `Here are a couple`), ` of awesome talks from Miško Hevery that I highly recommend.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Most containers have a mechanism for\nproviding `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `context-based singletons`), `.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Context-Based singletons.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `With a DI container, we have contexts. In the case of AngularJS, we have\nthe application module, which provides the overall container for a given\napplication. Within this container we define dependencies that can be\nliberally injected into other actors within the module, such as directives,\ncontrollers, and/or utility classes. The module and its sub-modules `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `are`), ` the context.`), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"javascript\"\n  }, React.createElement(\"pre\", {\n    className: \"language-javascript\"\n  }, React.createElement(\"code\", {\n    className: \"language-javascript\"\n  }, \"angular\", \"\\n\", \"  \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"module\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'someModule'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"[\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"]\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), \"\\n\", \"  \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"service\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'mySingletonThing'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \" MySingletonThing\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Here's a very typical line of config code in an AngularJS application. This configures\na service for `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"someModule\"), ` called `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"mySingletonThing\"), `. `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"mySingletonThing\"), ` is a\nsingleton, but it is not a Singleton. `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"MySingletonThing\"), ` does not enforce its\nsingleton nature. We can create as many instances as we desire. We won't, but it\nis nice to have freedom. ;)`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Instead we rely on AngularJS's ability to inject dependencies.`), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"javascript\"\n  }, React.createElement(\"pre\", {\n    className: \"language-javascript\"\n  }, React.createElement(\"code\", {\n    className: \"language-javascript\"\n  }, \"angular\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"module\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"\\\"someModule\\\"\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), \"\\n\", \"    \", React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"controller\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"\\\"MyController\\\"\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"[\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"\\\"mySingletonThing\\\"\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \" \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"function\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"mySingletonThing\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"        \", React.createElement(\"span\", {\n    className: \"token comment\"\n  }, \"//do stuff\"), \"\\n\", \"    \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"\\n\", \"angular\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"module\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"\\\"someModule\\\"\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), \"\\n\", \"    \", React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"controller\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"\\\"MyOtherController\\\"\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"[\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"\\\"mySingletonThing\\\"\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \" \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"function\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"mySingletonThing\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"        \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"var\"), \" hahaTakeThat \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"new\"), \" \", React.createElement(\"span\", {\n    className: \"token class-name\"\n  }, \"MySingletonThing\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"        \", \"console\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"log\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"hahaTakeThat \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"===\"), \" mySingletonThing\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \" \", React.createElement(\"span\", {\n    className: \"token comment\"\n  }, \"//false\"), \"\\n\", \"    \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `When we talk about a context-based singleton, these defined dependencies\nare what we mean. Within a given context the `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `DI container`), ` will only allow a single\ninstance of the object to be injected. The object itself does not protect\nagainst or prevent multiple instances. You can `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"new\"), `, `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"new\"), `, `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"new\"), ` it all day long,\nand there will be no complaints. With objects managed by a DI container you\nshould `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `never`), ` need to use `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"new\"), ` for objects that are injectable.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This provides you with all the benefits of a Singleton, with none of the\nsadness. Now when you write your units tests, you can use as many individual instances as\nyou might need, without managing global state. `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `Joy`), `.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `With Angular's DI implementation, we are a bit limited. Within a given module, we only\nhave access to a single context. This limits some flexibility that would\nbe gained by allowing nested contexts. Consider for example a user with\nmultiple accounts. What I'd really like is for each account to represent a\ncontext that could have its `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `own`), ` singleton objects. It would be `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `very`), `\nhandy to dynamically add/remove account sub-modules from the user. The singleton\ninjectables defined in the user module would cascade to sub-modules, but a\nsub-module could also define its own singleton mappings, perhaps even overriding\nthe parent module's. I don't know if this is on the roadmap, but it would be awesome to\nhave a more robust injector.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Conclusion`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `A Singleton is a singleton, but a singleton is not `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `always`), ` a Singleton in the\n`, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `formal`), ` sense. The enforced Singleton is generally regarded as \"`, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `to be avoided`), `\", but context-based\nsingletons are an extremely useful tool that play nice and\ndon't represent hairy global state. YMMV`));\n});"}}},"pageContext":{"id":"fe3d8daa-aea7-5d73-8114-5e3075ccf3c8","prev":{"id":"4b282327-22ed-5c47-87b4-3f3f42fbbed5","parent":{"name":"2013-05-21-size-and-composition-of-effective-teams","sourceInstanceName":"legacy"},"excerpt":"The success or failure of  any  project is based on the team or teams working on\nit. Teams are like fingerprints and snowflakes. They are composed of individuals\nwith unique experiences and skillsets. When we set out to build large\napplications in a…","fields":{"title":"Size and Composition of Effective Software Teams","slug":"2013/05/21/Size-and-Composition-of-Effective-Software-Teams","categories":[],"date":"2013-05-21 09:01"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}},"next":{"id":"117155b1-cae7-5291-8b16-3c3e8747af68","parent":{"name":"2013-04-26-a-rose-by-any-other-name","sourceInstanceName":"legacy"},"excerpt":"I posted  an\narticle  about using models to assist in creating leaner, meaner controllers. It resulted in a lively conversation in the comments that spawned an interesting  rebuttal  from  Rob Conery  that essentially says I am full of it, and the…","fields":{"title":"A rose by any other name?","slug":"2013/04/26/A-rose-by-any-other-name","categories":[],"date":"2013-04-26 02:15"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}}}}