{"data":{"site":{"siteMetadata":{"title":"The blog of Joel Hooks","description":"This is where I post my things.","author":"Joel Hooks","keywords":["Video Blogger"]}},"mdx":{"frontmatter":{"title":"The basics of using ui-router with AngularJS","date":"Invalid date","banner":null,"slug":null,"categories":null,"keywords":null},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `URL routing is a popular approach to matching the contents of a URL to specific\nfunctionality within a web application. URL routes programatically present\nspecific content to users based on the URL that they are visiting. It is a\npopular approach that has proven to be very effective.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Something that might not be obvious is that URL routing is also a `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://en.wikipedia.org/wiki/Finite-state_machine\"\n    }\n  }, `finite state\nmachine`), `. When you configure\nthe routing for an app, you are laying out the various states the application\ncan be in, and informing the application what to display and do when a specific\nroute is encountered.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `AngularJS supplies `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://docs.angularjs.org/tutorial/step_07\"\n    }\n  }, `URL routing`), ` by default.\nIt is adequate, but also has some limitations.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"/images/app-layout.png\",\n      \"alt\": \"A resonable application structure\"\n    }\n  })), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `So what's the problem?`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Looking at the structure above, imagine an application where interacting with\nitems on the header or the sidebar causes the main content to load completely\ndifferent HTML. AngularJS provides a mechanism for this with `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"ng-switch\"), `. You\ncan see a (very simple) example of this below.`), React.createElement(\"iframe\", {\n    width: \"100%\",\n    height: 300,\n    src: \"http://jsfiddle.net/joelhooks/Swm48/4/embedded/result,js,html\",\n    allowFullScreen: \"allowfullscreen\",\n    frameBorder: 0\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In this case, `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"ng-switch\"), ` is swapping out `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"div\"), ` elements, but you can also use\nthis approach to swap out templates using `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"ng-include\"), `.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `I'm not going to explore this option. I'm not particularly fond of it.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `Why not?`)), React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `The `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"ng-switch\"), ` adds markup that could be confusing`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `The state of the main content area is captured and stored on a model`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `It feels like \"logic in markup\", which I try to avoid`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `If you go down the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"ng-include\"), ` road, you need to remember to always put\nsingle quotes around your template names. I always forget. ;<`)), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `ui-router`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/angular-ui/ui-router\"\n    }\n  }, `ui-router`), ` fully embraces the\nstate-machine nature of a routing system. It allows you to define states, and\ntransition your application to those states. The real win is that it allows you\nto decouple nested states, and do some very complicated layouts in an elegant\nway.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `You need to think about your routing a bit differently, but once you get your\nhead around the state-based approach, I think you will like it.`), React.createElement(\"iframe\", {\n    width: \"100%\",\n    height: 300,\n    src: \"http://jsfiddle.net/SvUjA/1/embedded/result,js,html\",\n    allowFullScreen: \"allowfullscreen\",\n    frameBorder: 0\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This example is functionally very similar to the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"ng-switch\"), ` approach. The main\ndifference is that the main content area is populated with templated HTML for\neach of the states, without using switching or `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"ng-include\"), `.`), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"javascript\"\n  }, React.createElement(\"pre\", {\n    className: \"language-javascript\"\n  }, React.createElement(\"code\", {\n    className: \"language-javascript\"\n  }, \"angular\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"module\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'app'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"[\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'ui.compat'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"]\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"config\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"[\"), \"\\n\", \"  \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'$stateProvider'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"  \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"function\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"$stateProvider\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"    \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"var\"), \" home \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"        \", \"name\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'home'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"        \", \"url\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'/'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"        \", \"templateUrl\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'content.html'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"      \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"      \", \"red \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"        \", \"name\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'red'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"        \", \"url\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'/red'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"        \", \"parent\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" home\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"        \", \"templateUrl\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'content.red.html'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"      \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"      \", \"blue \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"        \", \"name\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'blue'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"        \", \"url\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'/blue'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"        \", \"parent\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" home\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"        \", \"templateUrl\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'content.blue.html'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"      \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"      \", \"green \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"        \", \"name\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'green'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"        \", \"url\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'/green'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"        \", \"parent\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" home\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"        \", \"templateUrl\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \":\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'content.green.html'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", \"      \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"\\n\", \"    \", \"$stateProvider\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"state\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"home\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"    \", \"$stateProvider\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"state\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"red\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"    \", \"$stateProvider\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"state\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"green\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"    \", \"$stateProvider\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"state\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"blue\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"  \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \"\\n\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"]\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The above code is the configuration for the router. We are defining the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"module\"), `, but instead\nof injecting `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"$routeProvider\"), ` as we would with stock AngularJS, we are injecting\na `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"$stateProvider\"), ` that is used to define the states. We are defining 4 states.`), React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"home\"), ` is the parent state of the next 3. It defines the header, siderbar, and\nthe `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"ui-view\"), ` element that will be populated with the child states.`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"red\"), ` is the first child state. It references the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"home\"), ` as its parent, as\nwell as targeting its own template.`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"blue\"), ` and `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"green\"), ` are identical to `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"red\"), `, but use different templates.`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `After the states are defined, they are added to the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"$stateProvider\"), `. They are\nnow ready to be navigated to.`), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"javascript\"\n  }, React.createElement(\"pre\", {\n    className: \"language-javascript\"\n  }, React.createElement(\"code\", {\n    className: \"language-javascript\"\n  }, \"    \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"run\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"[\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'$state'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \" \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"function\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"$state\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"       \", \"$state\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"transitionTo\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'home'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"    \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"]\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"run\"), ` method is a great place to navigate to your intial state. You are able to\ninject the now-resolved `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"$state\"), ` object and use its `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"transitionTo\"), ` method to set `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"home\"), `\nas the current state.`), React.createElement(\"div\", {\n    className: \"gatsby-highlight\",\n    \"data-language\": \"javascript\"\n  }, React.createElement(\"pre\", {\n    className: \"language-javascript\"\n  }, React.createElement(\"code\", {\n    className: \"language-javascript\"\n  }, \"    \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"controller\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'SidebarCtrl'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \" \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"function\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"$scope\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \" $state\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"\\n\", \"    \", \"$scope\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), \"content \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"[\"), React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'red'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'green'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \",\"), \" \", React.createElement(\"span\", {\n    className: \"token string\"\n  }, \"'blue'\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"]\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"\\n\", \"    \", \"$scope\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function-variable function\"\n  }, \"setPage\"), \" \", React.createElement(\"span\", {\n    className: \"token operator\"\n  }, \"=\"), \" \", React.createElement(\"span\", {\n    className: \"token keyword\"\n  }, \"function\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"page\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), \" \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"{\"), \"\\n\", \"        \", \"$state\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \".\"), React.createElement(\"span\", {\n    className: \"token function\"\n  }, \"transitionTo\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"(\"), \"page\", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \")\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\"), \"\\n\", \"    \", React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \"}\"), React.createElement(\"span\", {\n    className: \"token punctuation\"\n  }, \";\")))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"SidebarCtrl\"), ` lists contains a simple array called content on its `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"$scope\"), ` which\nis used in a `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"ng-repeat\"), ` to give us a simple menu. When one of those items is clicked\nthe `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"setPage\"), ` function is called with the item that was clicked. In this case, the\ncontent items correspond to the names of the states that we've defined, so we simply\n`, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"transitionTo\"), ` the selected state to display the content of that state.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Next steps with ui-router`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This only really scratches the very surface of what you can pull off with\nui-router. There are a ton of options and the\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/angular-ui/ui-router/wiki\"\n    }\n  }, `wiki`), ` is well put together. Some\nthings I didn't explore, but that are available:`), React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Passing data between states`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Listening for state events`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `Named views (love this, it deserves its own post)`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `URL Routing`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `The ui-router README warns that the utility is still in active early\ndevelopment`), `. The API is still subject to change, so if you choose ui-router for\nyour next project, that is something to be aware of.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Let me know if you'd like me to explore ui-router a bit deeper in future posts.\nI think it is an excellent approach to routing, and look forward to using it\nmore.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `Update:`), ` I've recorded a `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://egghead.io/lessons/angularjs-introduction-ui-router\"\n    }\n  }, `screencast about ui-router`), ` for egghead.io.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `Update 2:`), ` Here's a `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://egghead.io/lessons/angularjs-ui-router-named-views\"\n    }\n  }, `screencast about ui-router's named views`), ` that I recorded for egghead.io. (note: it is paid/subscription content)`));\n});"}}},"pageContext":{"id":"4973a950-6164-5b7c-93a0-13982b1285e9","prev":{"id":"6a93f8b2-db6a-5ebe-8602-0ca8f68dee7b","parent":{"name":"2013-07-29-using-angularjs-stop-using-jquery-as-a-crutch","sourceInstanceName":"legacy"},"excerpt":"Have you ever heard (or said!) this: \"Directives? That's where the jQuery goes.\" I definitely have. In an effort to better understand\n @joshdmiller 's excellent\n ng-boilerplate , I\nwanted to understand its dependency on Boostrap. More specifically, I…","fields":{"title":"Using AngularJS? Stop using jQuery as a crutch.","slug":"2013/07/27/Using-AngularJS-Stop-using-jQuery-as-a-crutch","categories":[],"date":"2013-07-27 11:30"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}},"next":{"id":"56157302-cb35-5c0a-9880-f47510c954cd","parent":{"name":"2013-07-15-a-look-at-angularjs-internal-directives-that-override-standard-html-tags","sourceInstanceName":"legacy"},"excerpt":"Directives are the heart and soul of AngularJS. They are incredibly powerful.\nAngularJS sets out to extend the grammar of the browser to supply semantics that\nfacilitate the creation of web applications, going beyond the standard\nhyper-linked web…","fields":{"title":"AngularJS Directives That Override Standard HTML Tags","slug":"2013/07/15/AngularJS-Directives-That-Override-Standard-HTML-Tags","categories":[],"date":"2013-07-15 13:22"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}}}}