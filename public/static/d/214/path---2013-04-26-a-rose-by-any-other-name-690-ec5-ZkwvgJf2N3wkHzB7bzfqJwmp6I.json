{"data":{"site":{"siteMetadata":{"title":"Gatsby MDX Starter Project","description":"My Gatsby MDX Starter Project","author":"Robin Wieruch","keywords":["Software Engineer","Web Developer","Consultant","Freelancer"]}},"mdx":{"frontmatter":{"title":"A rose by any other name?","date":"Invalid date","banner":null,"slug":null,"categories":null,"keywords":null},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `I posted `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://joelhooks.com/blog/2013/04/24/modeling-data-and-state-in-your-angularjs-application/#comment-875747843\"\n    }\n  }, `an\narticle`), ` about using models to assist in creating leaner, meaner controllers. It resulted in a lively conversation in the comments that spawned an interesting `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://wekeroad.com/2013/04/25/models-and-services-in-angular\"\n    }\n  }, `rebuttal`), ` from `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://twitter.com/robconery\"\n    }\n  }, `Rob Conery`), ` that essentially says I am full of it, and the names I attach to the patterns I use are wrong.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `This is probably true.`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `With that truth understood, I also don't go around pulling made up nonsense\ndefinitions out of my ass. The models bit is battle-tested real working\npatterns, on a large project, with a good sized team. The terms I use come from\na mix of sources, with roots in GoF patterns and through my continued education.\nIt is `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `not`), ` personal terminology.`), React.createElement(MDXTag, {\n    name: \"blockquote\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    parentName: \"blockquote\"\n  }, `Having said, I'd rather see developers build kick-ass apps that are\nwell-designed and follow separation of concerns, than see them waste time\narguing about MV`, `*`, ` nonsense. And for this reason, I hereby declare AngularJS to\nbe MVW framework - Model-View-Whatever. Where Whatever stands for \"whatever\nworks for you\".`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    parentName: \"blockquote\"\n  }, `Angular gives you a lot of flexibility to nicely separate presentation logic\nfrom business logic and presentation state. Please use it fuel your productivity\nand application maintainability rather than heated discussions about things that\nat the end of the day don't matter that much.`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The whole situation reminded me of `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://plus.google.com/app/basic/stream/z13vitkjpya0zxcee23ztzmqcor3fzen2\"\n    }\n  }, `this\npost`), ` from Igor Minar, regarding\nAngularJS's status as an MV-WHATEVER framework. For whatever reason, people name\nthings differently for different reasons. Naming is `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `hugely`), ` important for our\ncommon understanding of things. Up to a point. To take an example from\nnon-coding life, on a recent trip to Italy, I had `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `no clue`), ` what the name of\nanything was. A combination of handwaving, pointing, and nodding was more\neffective than one might think. In some ways, this is true for programming as\nwell. As long as we eventually agree to build the same thing, it will probably\nbe `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `OK`), `.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The conversation came to an abrupt end. My son witnessed the tragic and brutal\ndeath of a man that we both have a lot of respect for. I was involved with\nnotifying people of the incident, and it was a really difficult situation. The\nDisqus notifications were too much, so I disabled the comment thread. Rob\nsubsequently attempted to delete his comments (which is a shame, but\nunderstandable) so he is the \"guest\" commentor. Normally I love a good debate,\nand this is the first time I've ever done this sort of thing. Rob expressed\nextreme displeasure and took it as a personal insult. Hopefully he understands\nthat it is not, and my desire is that we pick up the conversation again one day. Perhaps via a different medium?`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `I find it highly interesting that two people could have such wildly different\nworld views when it comes to naming patterns. It would be great to get to the\nbottom of it, and I suspect in the end we would both be smarter for it.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `I've got a fairly strict rule about not posting non-technical stuff here, so\nthis post is an anomolly. I won't make a habit of stopping conversations, and\nwanted to put this out here, as it relates directly with this space.`));\n});"}}},"pageContext":{"id":"117155b1-cae7-5291-8b16-3c3e8747af68","prev":{"id":"fe3d8daa-aea7-5d73-8114-5e3075ccf3c8","parent":{"name":"2013-05-01-when-is-a-singleton-not-a-singleton","sourceInstanceName":"legacy"},"excerpt":"The Singleton is the Highlander of design patterns.  There can be only one . An example of a Singleton implementation might look something like this: from Tom Roggero The above JavaScript is from an  answer \nfrom StackOverflow that seemed resonable…","fields":{"title":"AngularJS, Dependency Injection, and when is a singleton not a Singleton?","slug":"2013/05/01/AngularJS-Dependency-Injection-and-when-is-a-singleton-not-a-Singleton","categories":[],"date":"2013-05-01 17:31"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}},"next":{"id":"66b93a42-a0e2-50da-a8f2-e580ebb6629f","parent":{"name":"2013-04-24-modeling-data-and-state-in-your-angularjs-application","sourceInstanceName":"legacy"},"excerpt":"Respect your data. Contain your state. I've  written about\nthis \nin the past, in the context of ActionScript 3 and the Robotlegs framework. This\napproach is valid for JavaScript, but requires some translation to build something usable for\nAngularJS…","fields":{"title":"Modeling Data and State in Your AngularJS Application","slug":"2013/04/24/Modeling-Data-and-State-in-Your-AngularJS-Application","categories":[],"date":"2013-04-24 09:05"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}}}}