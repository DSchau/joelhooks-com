{"data":{"site":{"siteMetadata":{"title":"Gatsby MDX Starter Project","description":"My Gatsby MDX Starter Project","author":"Robin Wieruch","keywords":["Software Engineer","Web Developer","Consultant","Freelancer"]}},"mdx":{"frontmatter":{"title":"Size and Composition of Effective Software Teams","date":"Invalid date","banner":null,"slug":null,"categories":null,"keywords":null},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The success or failure of `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `any`), ` project is based on the team or teams working on\nit. Teams are like fingerprints and snowflakes. They are composed of individuals\nwith unique experiences and skillsets. When we set out to build large\napplications in a reasonable amount of time, we will generally build a larger\nteam composed of specialists to get it done. The specialties range from UI\ndevelopers to marketing experts, with many other areas of expertise in between.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `How does a big team organize to work together effectively? I've seen several\napproaches, and I want to talk about two. The first, which is not my preference,\nis the creation \"silos\" for teams based on areas if expertise. The second is to\ncreate cross-functional autonomous teams.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Building silos`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The first approach is to group teams based on their areas of influence. In this\ncase you might have a UI team, a server-side systems team, a qa team, a\nmarketing team, etc...`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"/images/silos.jpg\",\n      \"alt\": \"photo credit: PXLated\"\n    }\n  })), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `These teams might even be divided along vendor lines, for a project that\nutilizes consultants to help deliver a project. This has some potential for\nconflict related to a breakdown in communication.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `What is wrong with this? It can lead to caustic relationships with \"us v them\"\nmentality. Communication breaks down. Daily status meetings for teams don't\ncross-pollinate ideas or current status of activities. Generally these teams\nwill require some sort of \"ambassador\" that shuttles information between the\nteams. It leads to \"waterfall\" development where the server-side team needs to\nfinish work in order to hand it off to the UI team. The UI team will then finish\ntheir part and hopefully hand it off to the QA team, unless they ran into issues\nwith integration and it needs to be handed back to the server-team.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This can work, but successful software is built on top of `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `communication`), `, so\nhow can we organize to help better facilitate that?`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Cross-functional and Autonomous`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `A cross-functional team is composed of members across the boundaries\nspecialties. This team might consist of ui specialists, server-side experts, qa\npros, as well as representitives from the business side of things including\nproduct owner/business analyst and marketing gurus. These teams can shephard\nvirtually any functionality from start to finish.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"/images/rainbow.jpg\",\n      \"alt\": \"photo credit: Pink Sherbet Photography\"\n    }\n  })), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `When a team is composed in this fashion, daily status meetings start to take on\nmore meaning. They facilitate active communication across disciplines and allow\nmembers to interact more closely. It removes much of the us/them problem. It\ndoesn't matter who writes an individual team member's check or what their area\nof expertise might be. They are a member of a team that can fully deliver value\nwith much less reliance on external dependencies.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Autonomy and the ability to get work done at a comfortable speed without\nhitting hard stops to wait on another team to deliver allows teams to succeed.\nTeams are modular, allowing the business to add new teams that have the\ncapability to deliver value to the project.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In most cases developers will be on a single team. The exception might be an\n\"architect\" or devops specialist that serves as \"glue\" between the different\nteams providing consistency. The same is likely true for the business analyst\nand marketing specialist. It is important not to spread the business liasons too\nthin. The teams should have well-groomed backlogs of work from which to pull\nfrom.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `How big should a team be?`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `My favorite \"rule\" for team size comes from Amazon's `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://www.fastcompany.com/50106/inside-mind-jeff-bezos\"\n    }\n  }, `Jeff\nBezos`), ` who uses the\nconcept of \"pizza teams\":`), React.createElement(MDXTag, {\n    name: \"blockquote\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    parentName: \"blockquote\"\n  }, `Bezos pursued his idea of a decentralized, disentangled company where small\ngroups can innovate and test their visions independently of everyone else. He\ncame up with the notion of the \"two-pizza team\": If you can't feed a team with\ntwo pizzas, it's too large. That limits a task force to five to seven people,\ndepending on their appetites.`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `A \"pizza team\" might look like this:`), React.createElement(MDXTag, {\n    name: \"ul\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `1 designer/UX Specialist`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `1 or 2 UI developers`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `1 or 2 server-side developers`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `1 QA expert`), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ul\"\n  }, `1 product owner/business analyst`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This is a very general list, but you get the idea. A team composed in this\nfashion can `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `get shit done`), `. This is the ultimate goal.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Team size and composition is only one factor in the communication puzzle, but it\nis an important one. In the end, whatever works for you and gets your software shipping is the best.\nI've had experience working inside of both of these types of teams, and greatly\nprefer the cross-functional approach. Regardless of how your teams are composed\nremember that we are all on the `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `same team`), ` and that the basic assumption that\nthe members of the team are both `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `smart`), ` and `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `capable`), ` are essential.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `How do you organize teams? What has worked\nfor you, and conversly what has been completely `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `FUBAR`), `?`));\n});"}}},"pageContext":{"id":"4b282327-22ed-5c47-87b4-3f3f42fbbed5","prev":{"id":"f8086c75-83f4-52af-b9fc-33bf7fb47e9b","parent":{"name":"2013-05-22-lessons-learned-kicking-off-an-angularjs-project","sourceInstanceName":"legacy"},"excerpt":"After a year of working with a large AngularJS project, I thought I'd share a\nfew of the lessons that I learned in the process. Firstly, I love AngularJS. It\nsuits my needs exceedingly well, and I expect it will be my goto for the\nforseeable future…","fields":{"title":"Lessons Learned: A Year with a Large AngularJS Project","slug":"2013/05/22/Lessons-Learned-A-Year-with-a-Large-AngularJS-Project","categories":[],"date":"2013-05-22 15:08"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}},"next":{"id":"fe3d8daa-aea7-5d73-8114-5e3075ccf3c8","parent":{"name":"2013-05-01-when-is-a-singleton-not-a-singleton","sourceInstanceName":"legacy"},"excerpt":"The Singleton is the Highlander of design patterns.  There can be only one . An example of a Singleton implementation might look something like this: from Tom Roggero The above JavaScript is from an  answer \nfrom StackOverflow that seemed resonable…","fields":{"title":"AngularJS, Dependency Injection, and when is a singleton not a Singleton?","slug":"2013/05/01/AngularJS-Dependency-Injection-and-when-is-a-singleton-not-a-Singleton","categories":[],"date":"2013-05-01 17:31"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}}}}