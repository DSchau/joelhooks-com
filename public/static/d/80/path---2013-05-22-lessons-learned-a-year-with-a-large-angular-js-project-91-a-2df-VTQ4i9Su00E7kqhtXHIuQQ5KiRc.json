{"data":{"site":{"siteMetadata":{"title":"Gatsby MDX Starter Project","description":"My Gatsby MDX Starter Project","author":"Robin Wieruch","keywords":["Software Engineer","Web Developer","Consultant","Freelancer"]}},"mdx":{"frontmatter":{"title":"Lessons Learned: A Year with a Large AngularJS Project","date":"Invalid date","banner":null,"slug":null,"categories":null,"keywords":null},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `After a year of working with a large AngularJS project, I thought I'd share a\nfew of the lessons that I learned in the process. Firstly, I love AngularJS. It\nsuits my needs exceedingly well, and I expect it will be my goto for the\nforseeable future when I need a solid framework for \"thick client\" single page\napplications. It's awesome. The team working on it is world class, the community\nis fantastic, and it combines a killer combo of functionality for building web\napps.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Code Organisation`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This one is huge. When I arrived the app basically followed what the\nangular-seed project represents. Lots of monolithic single files that contained\ntoo much code. We migrated from that to using John Resig's \"Simple Class\nInheritence\" to divide up encapsulated pieces of functionality. This approach\nworks well, and as long as you keep the inheritance shallow generally works. We\nwere saddled with a \"dirty sock drawer\" still, where monolithic folders existed\nto house various types of classes.`), React.createElement(\"pre\", null, \"- project\", \"\\n\", \"-- controllers\", \"\\n\", \"--- someController.js\", \"\\n\", \"--- someOtherController.js\", \"\\n\", \"--- ...\", \"\\n\", \"--- someController99.js\", \"\\n\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Which lead to a controllers folder that would twist the eyes. My new rule is\nthat if you hear yourself humming the ABCs in your mind in order to find a\nspecific file, your folders probably have too many files.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Today I'd want to start building my project in a more modular fashion. Each\ndiscreet bit of functionality, or functional area, contains the majority of the\nfiles/classes/objects that it needs to function. In a perfect world, these\nmodules would be completely modular, and could be extracted and placed in other\nprojects as reusable \"meta\" components. This is difficult sometimes because you\nwill likely also need a set of common utilities, helpers, or other such files\nthat serve as shared dependencies across your modules. Unless reusability is a\nrequirement, I won't spend a lot of time ensuring absolute seperation, but it is\nwhere the bar is raised and something that I keep in mind as I develop.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Cliff Meyers `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript\"\n    }\n  }, `has written a great\narticle`), `\non organizing your code in a large Angular app.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Directives are awesome and powerful`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `I'm of the opinion now that Directives are the `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `killer feature`), ` of AngularJS.\nThey are wonderful little packages of contained UI/Presentation logic. They\npresent so much flexibility and power with their ability to extend the grammar\nof HTML. We definitely use directives, but perhaps not as much as we could.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `One of my favorite aspects of Angular Directives is that they are composable.\nUsing them as HTML attributes, we are able to leverage directives to build\ncomplex widgets with layered functionality. This can be a double-edge sword at\ntimes, when the layered functionality wants to compete, but overall it is\nawesome.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If I was starting a project today, I would put some serious thought into\norganizing Directives as visual components and behaviors. There are already\nseveral projects that wrap popular UI frameworks with Angular Directives, but it\nisn't strictly necessary to use a full-blown component set to approach it with\nthis mentality. What are the primary components of the application? How can it\nbe built around directives so that the primary components are shared throughout\nthe application instead of cut-n-paste HTML and CSS sprinkled everywhere. How\ncan I leverage these components for future work?`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If you haven't watched them yet, bounce on over to John Lindquist's\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://egghead.io\"\n    }\n  }, `egghead.io`), ` and check out the series on Directives. All of\nthe videos are excellent, but the Directives information is enlightening.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Know thy framework`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Since I've started this project, I've definitely spent some time with the\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/angular/angular.js/tree/master/src\"\n    }\n  }, `Angular internals`), `. The source code is highly readable and well tested, so it is\na `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `great read`), ` if you are into clean/tight JavaScript.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `While I've spent some time with it, this is an area I'd like to get more\nintimate with. Many things are still `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `black box`), ` to me, and while I trust the\nfolks building Angular, I still feel the need to understand what is occuring\nwhen I build applications. This is one of my immediate goals right now, so\nhopefully down the road I might have a thing or two to say about how Angular\nworks uner the hood.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `As an aside, I feel compelled to do the same thing with\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/jquery/jquery/tree/master/src\"\n    }\n  }, `jQuery`), `. So much source,\nso little time.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `The Build`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Sadly, with this project we are required to use Maven and JAWR for our build. It\nhas been a real struggle and we can't do \"proper\" builds. We've been able to\nbuild some tools that help to mitigate, but I don't recommend using Maven for\nyour front end code.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If I was starting the project today, I would definitely use\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/yeoman/generator-angular\"\n    }\n  }, `Yeoman`), ` to easily generate\ntemplates and make life easier.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `The CSS`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This isn't related to Angular directly, but is another important aspect of your\n`, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `AngularJS project`), ` so I wanted to spend a little time on it.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `I will admit that a year ago my attitude was \"f css\". It confused and frustrated\nme to the point of distaste. Obviously this stemmed from ignorance, and I've\nspent the last year trying to play makeup with CSS. My attitude is no longer \"f\ncss\" and sounds more like \"SCSS!\" because I found a happy place where CSS and I\ncan get along.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://sass-lang.com/\"\n    }\n  }, `SCSS`), ` syntax takes many of the pain points that put the\nscrews to my brain with vanilla CSS and added a nice level of clarity. On top of\nthat, Compass provides a pile of wicked mixins that eliminate an entirely new\nlevel of pain from the stylesheet workflow.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In the future I want to dig into SASS/Compass deeper, combining its expressive\nstyling capabilities with the module and component level AngularJS work outlined\nabove. I'd like to use a more organized approach to my stylesheets with\nsomething like `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://smacss.com/\"\n    }\n  }, `SMACSS`), ` providing a baseline standard for how the styling is\nimplemented and organized.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `At this point, CSS and I have fully made up. I've removed a lot of my ignorance,\nwhich was obviously the key to building a solid relationship. We will see how it\ngoes. One day at a time.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Conclusion`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If you are building a single-page web application, AngularJS is a solid choice.\nIt is important to decide on and implement structure for your application early.\nConsider up front how to organize your code into modules and components so that\nyou can harness the power of Directives and maximize reusability potential.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Some good comments on `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://news.ycombinator.com/item?id=5756911\"\n    }\n  }, `Hacker\nNews`), ` if you'd like to join the\ndiscussion.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `You might also enjoy: `, React.createElement(\"a\", {\n    href: \"http://joelhooks.com/blog/2013/07/15/a-look-at-angularjs-internal-directives-that-override-standard-html-tags/\"\n  }), React.createElement(\"strong\", null), `AngularJS Directives That Override Standard HTML Tags`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `or maybe: `, React.createElement(\"a\", {\n    href: \"http://joelhooks.com/blog/2013/08/03/learn-angularjs-in-a-weekend/\"\n  }), React.createElement(\"strong\", null), `Learn AngularJS this Weekend`));\n});"}}},"pageContext":{"id":"f8086c75-83f4-52af-b9fc-33bf7fb47e9b","prev":{"id":"69049f23-23d4-5f3c-a6a7-dd09338ed32e","parent":{"name":"2013-06-06-my-sketchnotes-and-thoughts-from-baconbizconf-2013","sourceInstanceName":"legacy"},"excerpt":"It is hard to explain how excited I was when Amy announced\n BaconBizConf  in April of 2013. A\nsmall conference devoted to like-minded people that either are, or want to be,\nbootstrapping product businesses. The speaker lineup included personal \"gurus…","fields":{"title":"My Sketchnotes and Thoughts from BaconBizConf 2013","slug":"2013/06/06/My-Sketchnotes-and-Thoughts-from-BaconBizConf-2013","categories":[],"date":"2013-06-06 14:18"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}},"next":{"id":"4b282327-22ed-5c47-87b4-3f3f42fbbed5","parent":{"name":"2013-05-21-size-and-composition-of-effective-teams","sourceInstanceName":"legacy"},"excerpt":"The success or failure of  any  project is based on the team or teams working on\nit. Teams are like fingerprints and snowflakes. They are composed of individuals\nwith unique experiences and skillsets. When we set out to build large\napplications in a…","fields":{"title":"Size and Composition of Effective Software Teams","slug":"2013/05/21/Size-and-Composition-of-Effective-Software-Teams","categories":[],"date":"2013-05-21 09:01"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}}}}