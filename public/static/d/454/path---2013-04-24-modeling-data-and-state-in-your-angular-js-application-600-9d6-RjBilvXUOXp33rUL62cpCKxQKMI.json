{"data":{"site":{"siteMetadata":{"title":"The blog of Joel Hooks","description":"This is where I post my things.","author":"Joel Hooks","keywords":["Video Blogger"]}},"mdx":{"frontmatter":{"title":"Modeling Data and State in Your AngularJS Application","date":"Invalid date","banner":null,"slug":null,"categories":null,"keywords":null},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Respect your data. Contain your state.`), React.createElement(\"div\", null, React.createElement(\"div\", {\n    style: {\n      float: 'right',\n      paddingTop: 30,\n      paddingLeft: 30\n    }\n  }, React.createElement(\"img\", {\n    src: \"/images/AngularJS-Shield-large.png\"\n  })), \"Data and state are the foundation of your application. These two items should be absolutely respected. As you work through the AngularJS documentation, these two items are generally stored on the controllers. This works OK, but as your app grows beyond the \\\"todo list\\\" it quickly breaks down. Controllers need shared state, data needs to be contained, and it needs to be done in a consistent manner that is easy to comprehend.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `I've `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://joelhooks.com/2011/03/12/an-introduction-to-robotlegs-as3-part-2-models/\"\n    }\n  }, `written about\nthis`), `\nin the past, in the context of ActionScript 3 and the Robotlegs framework. This\napproach is valid for JavaScript, but requires some translation to build something usable for\nAngularJS.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `What is a Model?`), React.createElement(MDXTag, {\n    name: \"blockquote\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    parentName: \"blockquote\"\n  }, `A model notifies its associated views and controllers when there has been a\nchange in its state. This notification allows the views to produce updated\noutput, and the controllers to change the available set of commands. A passive\nimplementation of MVC omits these notifications, because the application does\nnot require them or the software platform does not support them.\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\"\n    }\n  }, `from\nWikipedia`))), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `As the \"M\" in `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://www.codinghorror.com/blog/2008/05/understanding-model-view-controller.html\"\n    }\n  }, `MVC`), `, model classes `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `encapsulate`), ` your application’s data and `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `provide an API`), ` to access\nand manipulate that data. The other classes in your application will make\nrequests of models via this API. When data on the model is updated, the model\ndispatches events that the other classes within your application can react to.\nModels are appropriate for capturing the domain logic, such as performing\ncalculations or other manipulations.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `An example of this might be a shopping\ncart. When an item is added to the shopping cart model, the new total for all of\nthe items in the cart will be calculated. The new total will then be stored on\nthe model for access by other classes within the application. By placing this\nlogic within your models, you ensure that it isn’t scattered across the entire\napplication and know exactly where to look to see how and when your data is\nbeing manipulated.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In addition to controlling access to data, models maintain the state of your\napplication. Consider a list of objects. You want to keep track of which of\nthese objects is selected, so the data model has a selected property which is\nupdated with the currently selected item. Other areas of your application can\nnow access this property to discover which item is selected and react\naccordingly.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `As you can see, data and state are intimately related. `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `State is data, data is\nstate`), `.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Models are portable. There are many common sets of data that can easily\ntransport between one application and the next. Think of, as an example, a\n`, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"UserLoginModel\"), ` or a `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"ShoppingCartModel\"), `. Portability takes a bit more thought and\nenergy, but no more than writing the same code over again for each project.\nObviously every model isn't going to qualify for this, but many will so it is\nsomething to watch out for.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The model is the core of your application. The\nvisual components get all the ooos and aaahs, but as a developer you know that\ndata is the man behind the curtain. It is our jobs, as developers, to curate the\ndata and deliver it to those beautiful interface items accurately. This is why\nisolating domain logic in the model is so important. By isolating it you have\nmade it easier to locate, update, and maintain.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `We've dug into what a model is, but if you're like me, you are waiting to see\nhow to actually use models within an AngularJS application, so let's take a look\nat that.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Exploring the Code`), React.createElement(\"iframe\", {\n    width: \"100%\",\n    height: 300,\n    src: \"http://jsfiddle.net/joelhooks/jWmck/embedded/js,result,html/\",\n    allowFullScreen: \"allowfullscreen\",\n    frameBorder: 0\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This is a simple/naive example that has a list of authors with a poignant quote from\neach. If you explore the example you will quickly notice that all of the data\nand state is stuffed in the controller. This is OK for a trivial demo, and\nsomething more complicated/non-trivial is difficult to present in a blog post.\nIt should be enough to present the concepts and gain some understanding on how\nusing models can reduce the overall cognitive load of more complex applications.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This \"everything stuffed in a controller\" approach works, but `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `we can do better`), `.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `note:`), ` I'm using jsFiddle, and it puts obvious restrictions on how you\norganize your code. I will be adding some thoughts on that in a future post, but\na monolithic single JS file isn't going to scale very well.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If you'd like to see a good write-up on structuring larger Angular apps, my\nfriend `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://cliffmeyers.com/blog/2013/4/21/code-organization-angularjs-javascript\"\n    }\n  }, `Cliff\nMeyers`), `\nwrote a great article on the subject.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Introducing a Model to Store Data`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `In the above example, all of our data is stored within the controller on the\n`, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"$scope\"), `. It is all hardcoded in the app as well, but we will talk about service\nintegration in the future. The task we want to accomplish now is a little\nseperation of data and presentation. This doesn't mean that we won't be using\n`, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"$scope\"), `. We will. AngularJS uses the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"$scope\"), ` as a `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://martinfowler.com/eaaDev/PresentationModel.html\"\n    }\n  }, `Presentation\nModel`), `. This is\nfine, but we can still provide much nicer separation with a \"proper\" model for\nthe data.`), React.createElement(\"iframe\", {\n    width: \"100%\",\n    height: 300,\n    src: \"http://jsfiddle.net/joelhooks/jWmck/7/embedded/js,result/\",\n    allowFullScreen: \"allowfullscreen\",\n    frameBorder: 0\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If you look at the JavaScript above, I think you will agree that it is already\nstarting to look a bit cleaner. While the controller's `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"$scope\"), ` is still\nultimately supplying the view with the data it craves, the actual data is housed\nin a model. The model is a 'singleton' (of the lowercase 's' variety) defined as\nan Angular service.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `I found Angular's definition of \"service\" confusing at first. It has nothing\ndirectly to do with what I consider a service, but is simply one of the methods\nfor defining dependencies for injection.`), React.createElement(\"iframe\", {\n    width: \"100%\",\n    height: 300,\n    src: \"http://jsfiddle.net/joelhooks/jWmck/9/embedded/js,result/\",\n    allowFullScreen: \"allowfullscreen\",\n    frameBorder: 0\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This is more like it. Now we have a tiny controller, and all of our data and\nstate is offloaded onto `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"authorListModel\"), `. We've added the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"setSelectedAuthor\"), `\nto the model, which dispatches an event. Our controller is listening for the\nevent, so it updates the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"$scope\"), ` appropriately and the view displays the\ninformation we expect.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This clean separation is going to pay huge dividends as the application grows in\nscope. We can now easily separate the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"textarea\"), ` that contains the quote from\nthe list of available authors.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `anti-pattern alert:`), ` you might be tempted to add event listeners on your\nmodel. Don't. It makes them harder to test and generally kills models in terms\nof single-responsibility-principle. Since a model `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `has an`), ` event dispatch, which\ncan also listen for events, the temptation is always there. Ignore this warning\nat your own peril! ;)`), React.createElement(\"iframe\", {\n    width: \"100%\",\n    height: 300,\n    src: \"http://jsfiddle.net/joelhooks/jWmck/10/embedded/js,result,html/\",\n    allowFullScreen: \"allowfullscreen\",\n    frameBorder: 0\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This is a bit silly, but shows the flexibility of this approach. The `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"textarea\"), `\nis now driven by its own controller. That controller is also listening for the\nupdate event the model dispatches. Instead of inspecting the model, it uses a\nparameter sent with the event to update `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"$scope.quote\"), ` and the magical Angular\nbinding does the rest. Nice.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Do I really need to use events like this?`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Most definitely `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `not`), `. Instead of the eventing I outlined above, you could\nsimply bind to the model. One of Angular's greatest strengths is its awesome\ntwo-way `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, '{', '{', \"binding\", '}', '}'), `.`), React.createElement(\"iframe\", {\n    width: \"100%\",\n    height: 300,\n    src: \"http://jsfiddle.net/joelhooks/jWmck/12/embedded/js,html,result\",\n    allowFullScreen: \"allowfullscreen\",\n    frameBorder: 0\n  }), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This is pretty nice, and is arguably cleaner than the eventing approach. In many\n(most) cases, this approach might be preferred.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Conclusion?`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Models provide an excellent way to separate data and display. By migrating your\ndata and state to a model, you have much more flexibility with how that data is\npresented. Models are also `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `prime`), ` candidates for unit testing, as they\ntypically have exactly `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `one dependency`), ` (some form of event emitter, in this\ncase the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"$rootScope\"), `) and contain highly testable domain\nlogic.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Hopefully this gets you started down the road of using models in your AngularJS\napps. In the near future, I will expand on models to discuss services (the\nexternal kind) and how they play with this approach.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If you have any comments, questions, or critique please share. I'd love to hear\nabout how you solve this problem of separating view and data with AngularJS.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If you are looking for nuts & bolts lessons on AngularJS, it is hard for me to\nexpress in words how awesome `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://www.egghead.io/\"\n    }\n  }, `John Lindquist's\negghead.io`), ` is. If you haven't already, go there now.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Join the conversation on `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://redd.it/1d31fh\"\n    }\n  }, `Reddit`), ` and `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://news.ycombinator.com/item?id=5607330\"\n    }\n  }, `Hacker\nNews`)));\n});"}}},"pageContext":{"id":"66b93a42-a0e2-50da-a8f2-e580ebb6629f","prev":{"id":"117155b1-cae7-5291-8b16-3c3e8747af68","parent":{"name":"2013-04-26-a-rose-by-any-other-name","sourceInstanceName":"legacy"},"excerpt":"I posted  an\narticle  about using models to assist in creating leaner, meaner controllers. It resulted in a lively conversation in the comments that spawned an interesting  rebuttal  from  Rob Conery  that essentially says I am full of it, and the…","fields":{"title":"A rose by any other name?","slug":"2013/04/26/A-rose-by-any-other-name","categories":[],"date":"2013-04-26 02:15"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}},"next":{"id":"17b95ba7-533b-56c3-aa64-5b93faea440d","parent":{"name":"2013-04-23-5-essential-vim-plugins","sourceInstanceName":"legacy"},"excerpt":"There are  a lot  of VIM plugins to choose from. An individual's list of what\nwould be considered \"essential\" is largely a personal matter. For any given\nplugin, there is also probably going to be an excellent alternative plugin that does the\nsame…","fields":{"title":"5 Essential VIM Plugins That Greatly Increase my Productivity","slug":"2013/04/23/5-Essential-VIM-Plugins-That-Greatly-Increase-my-Productivity","categories":[],"date":"2013-04-23 09:05"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}}}}