{"data":{"site":{"siteMetadata":{"title":"The blog of Joel Hooks","description":"This is where I post my things.","author":"Joel Hooks","keywords":["Video Blogger"]}},"mdx":{"frontmatter":{"title":"5 Essential VIM Plugins That Greatly Increase my Productivity","date":"Invalid date","banner":null,"slug":null,"categories":null,"keywords":null},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `There are `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `a lot`), ` of VIM plugins to choose from. An individual's list of what\nwould be considered \"essential\" is largely a personal matter. For any given\nplugin, there is also probably going to be an excellent alternative plugin that does the\nsame basic thing in a slightly different way. I'm just starting to use VIM for\nmore than just quick edits of files on a server, and the plugins below are\nsolving very specific workflow issues that I've encountered while learning to be\nproductive in VIM.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `warning:`), ` watch out for plugins, generally. For many (some included in my\nlist of favorites here) might hamper your ability to understand the core\nfunctionality of VIM. Many times the problem is best solved by understanding how\nyou can accomplish the task with just VIM, and not a plugin. One of the biggest\nbarriers I had with getting over the initial learning curve was over-saturation\nwith plugins, as I `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://joelhooks.com/blog/2013/04/09/getting-to-know-vim/\"\n    }\n  }, `wrote\nhere`), `.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Vundle`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If any of these plugins had an \"absolutely\" in front of its \"essential\"\ndescriptor, it would be `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/gmarik/vundle\"\n    }\n  }, `Vundle`), `.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Vundle is short for VIM Bundle. It is spiritually alike to\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://gembundler.com/\"\n    }\n  }, `Bundler`), `, and provides a clean easy way to manage\nplugins that you install. In past VIM efforts, I didn't use any sort of scheme\nfor managing plugins, and it was allways a complete `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `mess`), `. Vundle has solved\nthis for me completely.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Vundle also allows me to rapidly reconfigure my setup across multiple machines,\nwhich can be a real boost. It isn't really a day-to-day productivity booster,\nbut when you need it, it is great to have it configured.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `NERDTree`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `One of the first walls I hit was \"how the heck do I navigate files in a\nproject?\"`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The solution is multi-pronged, and starts with\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/scrooloose/nerdtree\"\n    }\n  }, `NERDTree`), `. The NERD Tree is a\nfilesystem explorer that looks something like this:`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"/images/nerdtree.png\",\n      \"alt\": \"NERDTree\"\n    }\n  })), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `It opens to your current directory, and allows you to drill down into folders.\nThis allows you to traverse your project and open files. It also has file\nmanagement capabilities for creating, deleting, and other common tasks.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `NERDTree is fantastic for hunting something down, but there are other tools that\nhelp solve this problem in different ways.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `note`), `: I was chastised a bit for this one on `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://news.ycombinator.com/item?id=5597939\"\n    }\n  }, `Hacker\nNews`), `. NERDTree `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `is`), ` big, and\nyou might have better luck with `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"netrw\"), ` as suggested. I plan on digging in to\n`, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \":h netrw\"), ` to see if I can drop NERDTree off this list of (my) essentials.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `##ctrlp`), React.createElement(MDXTag, {\n    name: \"blockquote\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    parentName: \"blockquote\"\n  }, `Full path fuzzy file, buffer, mru, tag, ... finder for Vim.`)), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/kien/ctrlp.vim\"\n    }\n  }, `ctrlp`), ` is `, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `rad`), `. It really lets you fly\naround your project's files. After a quick `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"let g:ctrlp_map = '<c-p>'\"), ` to map it\nto a hotkey, you are off to the races. It has different modes that allow you to\njump to files, buffers, most recently used, as well as tags.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `With no fault to ctrlp, I've had issues with tags and JavaScript. ctags is\nbehind the times, and DoctorJS lost its maintainer. Tern looks to have some\npromise in this regard, and the VIM plugin is under heavy development. Having\nsolid JS tags would turbo-charge ctrlp for me, so I'm paying close attention to\nongoing development.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `Syntastic`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/scrooloose\"\n    }\n  }, `scrooloose`), ` has several awesome VIM plugins,\nincluding NERDTree above. I also get a lot of mileage out of\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/scrooloose/syntastic\"\n    }\n  }, `Syntastic`), `. It is a simple linter that\nhighlights problems with syntax in a file. It works on `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"save\"), `, and provides\nmeaningful feedback about warnings and errors.`), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `EasyMotion`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `Last, but in absolutely no way least, is the elegent\n`, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/Lokaltog/vim-easymotion\"\n    }\n  }, `EasyMotion`), `. This plugin is all\nabout navigating in the file you are currently editing.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"img\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"src\": \"/images/easymotion.png\",\n      \"alt\": \"EasyMotion\"\n    }\n  })), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `When activated with the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"word\"), ` motion, EasyMotion assigns the first letter of\nevery word after the cursor with a letter-based hotkey. After the first 26\nletters are used up, it switches to capitals. Those soon change to sections that\nallow you to \"drill in\" and get very fine-grained movement across large\ndistances in your file. As your finger muscles get trained, the motion really is\n`, React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\"\n  }, `easy`), `.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This list isn't exhaustive, by any means. I also have several \"essential\"\nplugins that I used specifically related to languages and file types that are\ncommon for me. Vundle is probably the most essential out of this list. It has\nbeen a huge help over the previous cut-n-paste horrid approach I've used in the\npast. Running `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \":BundleUpdate\"), ` and watching Vundle march down my installed plugin\nlist, looking at the github repository for each plugin I've installed, and\nupdating them without any hassle at all is hugely satisfying.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `If you are interested, my `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/joelhooks/dotfiles\"\n    }\n  }, `dotfiles are stored\nhere`), `. They are an ongoing process, but\nthere are some interesting things going on.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `I'd love the hear about your essential VIM plugins. I'm always on the hunt for\nnew and interesting additions to my workflow.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `{% render_partial _partials/consultancy_class.markdown %}`));\n});"}}},"pageContext":{"id":"88ebdf9c-52d6-59ae-a0ff-4c81ea08dceb","prev":{"id":"820af811-b2c3-58c5-ab7e-a34332937f26","parent":{"name":"2013-04-24-modeling-data-and-state-in-your-angularjs-application","sourceInstanceName":"legacy"},"excerpt":"Respect your data. Contain your state. I've  written about\nthis \nin the past, in the context of ActionScript 3 and the Robotlegs framework. This\napproach is valid for JavaScript, but requires some translation to build something usable for\nAngularJS…","fields":{"title":"Modeling Data and State in Your AngularJS Application","slug":"2013/04/24/Modeling-Data-and-State-in-Your-AngularJS-Application","categories":[],"date":"2013-04-24 09:05"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}},"next":{"id":"348a777c-b2c8-53ae-9366-360ae69a6d58","parent":{"name":"2013-04-18-a-tiny-review-one-week-with-an-11-macbook-air-for-software-development","sourceInstanceName":"legacy"},"excerpt":"For as long as I can remember, all of my computer upgrades have been \"bigger and\nbadder.\" Outside of moving from a FULL ATX DESKTOP WORKSTATION to a laptop,\nMoore's law has played out nicely. Every few years I'd get something bigger and\nbetter. Not…","fields":{"title":"It is Tiny. One Week Developing With an 11\" MacBook Air","slug":"2013/04/18/It-is-Tiny-One-Week-Developing-With-an-11-MacBook-Air","categories":[],"date":"2013-04-18 17:12"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}}}}