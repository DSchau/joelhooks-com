{"data":{"site":{"siteMetadata":{"title":"The blog of Joel Hooks","description":"This is where I post my things.","author":"Joel Hooks","keywords":["Video Blogger"]}},"mdx":{"frontmatter":{"title":"Getting to Know VIM","date":"Invalid date","banner":null,"slug":null,"categories":null,"keywords":null},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components\n  }, `It's like coming full circle.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `When I was first introduced to computers, they very much resembled what I see in\nTerminal today. I've always had a distinct fondness for the command line\ninterface. That said, when I started using computers professionally most of my\ntime has been spent in fancy GUIs. Perhaps because of the roots of my obsession\nI still have an affinity for these text based interfaces.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `For the past several years, I've been constantly poking at vim. I've gone from\nstruggling to remember the `, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \":wq\"), ` sequence to trying my damndest to use\n`, React.createElement(\"code\", {\n    className: \"language-text\"\n  }, \"hjkl\"), ` instead of my arrow keys. I've used vim movement cheatsheets as\ndesktop backgrounds, and stopped using 'crutches' like nano when I'm working on\na server via ssh.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `This year, I've decided to go full bore with vim. When I'm editing text, I want\nto default to vim instead of the many other GUI options I tend to enjoy day to\nday.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `And I'm having some success!`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `The excellent `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"http://pragprog.com/book/dnvim/practical-vim\"\n    }\n  }, `Practical Vim`), ` has\nbeen extremely helpful. The single most important thing I've done this go-around\nis to completely remove `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `all`), ` of the dotfiles I've accumulated over the\nyears. Some custom bits with `, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"p\",\n    props: {\n      \"href\": \"https://github.com/carlhuda/janus\"\n    }\n  }, `Janus`), `\ninstalled on top of that. Janus is awesome, but I also had `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `absolutely no idea`), ` what was going on. It\ninstalls all of the 'essential' plugins, but it is too much. I was generally\nleft hunting and pecking and doing things poorly.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `So I stripped it down, and have been in the process of building up `, React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\"\n  }, `my own\ndotfiles`), ` line by line.`), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `It now feels like a tipping point has been reached. I have some core\nunderstanding of my editor, how it works, and what options are available. I plan\non documenting this process, including which tools have been useful so far.\nUltimately my interest in vim lies with using it in conjunction with tmux (rad\nterminal multiplexer) to create a truly unixy command line development\nenvironment.`));\n});"}}},"pageContext":{"id":"22646e8d-be0e-5ad1-8d5f-5781c1134d08","prev":{"id":"79397aaa-bcd7-524f-a232-d1150c123cad","parent":{"name":"2013-04-09-vim-adventures-a-fun-way-to-pick-up-some-basic-skills","sourceInstanceName":"legacy"},"excerpt":"Vim Adventures  is a fun browser based game that\nteaches basic VIM skills while adventuring. It is kind of silly, and can be a\nbit... frustrating... but that is the point. This is VIM after all! No pain, no\ngain ;)","fields":{"title":"VIM Adventures: A Fun Way to Pick up Some Basic Skills","slug":"2013/04/09/VIM-Adventures-A-Fun-Way-to-Pick-up-Some-Basic-Skills","categories":[],"date":"2013-04-09 15:51"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}},"next":{"id":"f31342c9-d5e3-5be3-b1ec-0417cc18151f","parent":{"name":"2012-11-17-using-custom-jasmine-matchers-to-make-unit-tests-more-readable","sourceInstanceName":"legacy"},"excerpt":"Image from purplemattfish I'm a stickler for the \"single assertion per test\" guideline. One of the pillars of good unit tests is readability. Multiple asserts undermine this principle and make tests that are more difficult to read, understand, andâ€¦","fields":{"title":"Using Custom Jasmine Matchers to Make Unit Tests More Readable","slug":"2012/11/17/Using-Custom-Jasmine-Matchers-to-Make-Unit-Tests-More-Readable","categories":[],"date":"2012-11-17 10:55"},"code":{"scope":"/Users/joel/Code/joelhooks-com/.cache/gatsby-mdx/remote-mdx-dir/3010b3badc54a9dfa4a4c80e419a41b2.js"}}}}